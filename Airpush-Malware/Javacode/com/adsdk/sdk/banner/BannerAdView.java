package com.adsdk.sdk.banner;

import android.content.Context;
import android.content.Intent;
import android.graphics.Canvas;
import android.net.Uri;
import android.os.Handler;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnTouchListener;
import android.view.animation.Animation;
import android.view.animation.TranslateAnimation;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.FrameLayout;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;
import android.widget.ViewFlipper;
import com.adsdk.sdk.AdListener;
import com.adsdk.sdk.BannerAd;
import com.adsdk.sdk.Const;
import com.adsdk.sdk.Log;
import com.adsdk.sdk.data.ClickType;
import java.io.InputStream;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.text.MessageFormat;

public class BannerAdView extends RelativeLayout {
    public static final int LIVE = 0;
    public static final int TEST = 1;
    private static Field mWebView_LAYER_TYPE_SOFTWARE;
    private static Method mWebView_SetLayerType;
    private AdListener adListener;
    private boolean animation;
    private Animation fadeInAnimation;
    private Animation fadeOutAnimation;
    private WebView firstWebView;
    private boolean isInternalBrowser;
    private Context mContext;
    protected boolean mIsInForeground;
    private final OnTouchListener onTouchListener;
    private BannerAd response;
    private WebView secondWebView;
    private boolean touchMove;
    private final Handler updateHandler;
    private ViewFlipper viewFlipper;
    private WebSettings webSettings;
    private InputStream xml;

    class C00191 implements OnTouchListener {
        private float distanceX;
        private float distanceY;

        C00191() {
        }

        public boolean onTouch(View v, MotionEvent event) {
            if (BannerAdView.this.response.getSkipOverlay() != 0) {
                return true;
            }
            try {
                if (event.getAction() == 0) {
                    BannerAdView.this.touchMove = false;
                    this.distanceX = event.getX();
                    this.distanceY = event.getY();
                }
                if (event.getAction() == 2) {
                    if (Math.abs(this.distanceX - event.getX()) > 30.0f) {
                        BannerAdView.this.touchMove = true;
                    }
                    if (Math.abs(this.distanceY - event.getY()) > 30.0f) {
                        BannerAdView.this.touchMove = true;
                    }
                    Log.m1d(Const.TAG, "touchMove: " + BannerAdView.this.touchMove);
                    return true;
                }
                if (event.getAction() == 1) {
                    Log.m1d(Const.TAG, "size x: " + event.getX());
                    Log.m1d(Const.TAG, "getHistorySize: " + event.getHistorySize());
                    if (!(BannerAdView.this.response == null || BannerAdView.this.touchMove)) {
                        BannerAdView.this.openLink();
                        BannerAdView.this.notifyAdClicked();
                    }
                }
                return BannerAdView.this.onTouchEvent(event);
            } catch (Throwable e) {
                e.printStackTrace();
            }
        }
    }

    class C00213 extends WebViewClient {
        C00213() {
        }

        public boolean shouldOverrideUrlLoading(WebView view, String url) {
            if (BannerAdView.this.response.getSkipOverlay() == 1) {
                BannerAdView.this.doOpenUrl(url);
                Log.m9i("TouchListener", "false");
            }
            return true;
        }
    }

    class C00235 implements Runnable {
        C00235() {
        }

        public void run() {
            if (BannerAdView.this.adListener != null) {
                Log.m1d(Const.TAG, "notify bannerListener of ad clicked: " + BannerAdView.this.adListener.getClass().getName());
                BannerAdView.this.adListener.adClicked();
            }
        }
    }

    class C00246 implements Runnable {
        C00246() {
        }

        public void run() {
            if (BannerAdView.this.adListener != null) {
                Log.m1d(Const.TAG, "notify bannerListener of load succeeded: " + BannerAdView.this.adListener.getClass().getName());
                BannerAdView.this.adListener.adLoadSucceeded(null);
            }
        }
    }

    class C00257 implements Runnable {
        C00257() {
        }

        public void run() {
            Log.m1d(Const.TAG, "No Ad");
            if (BannerAdView.this.adListener != null) {
                BannerAdView.this.adListener.noAdFound();
            }
        }
    }

    public void setWidth(int width) {
    }

    public void setHeight(int width) {
    }

    public BannerAdView(Context context, BannerAd response, AdListener adListener) {
        this(context, response, false, adListener);
    }

    public BannerAdView(Context context, InputStream xml, boolean animation) {
        super(context);
        this.isInternalBrowser = false;
        this.fadeInAnimation = null;
        this.fadeOutAnimation = null;
        this.mContext = null;
        this.updateHandler = new Handler();
        this.onTouchListener = new C00191();
        this.xml = xml;
        this.mContext = context;
        this.animation = animation;
        initialize(context);
    }

    public BannerAdView(Context context, BannerAd response, boolean animation, AdListener adListener) {
        super(context);
        this.isInternalBrowser = false;
        this.fadeInAnimation = null;
        this.fadeOutAnimation = null;
        this.mContext = null;
        this.updateHandler = new Handler();
        this.onTouchListener = new C00191();
        this.response = response;
        this.mContext = context;
        this.animation = animation;
        this.adListener = adListener;
        initialize(context);
    }

    private WebView createWebView(Context context) {
        WebView webView = new WebView(getContext()) {
            public void draw(Canvas canvas) {
                if (getWidth() > 0 && getHeight() > 0) {
                    super.draw(canvas);
                }
            }
        };
        this.webSettings = webView.getSettings();
        this.webSettings.setJavaScriptEnabled(true);
        webView.setBackgroundColor(0);
        setLayer(webView);
        webView.setWebViewClient(new C00213());
        webView.setVerticalScrollBarEnabled(false);
        webView.setHorizontalScrollBarEnabled(false);
        return webView;
    }

    private void doOpenUrl(String url) {
        if (this.response.getClickType() == null || !this.response.getClickType().equals(ClickType.INAPP)) {
            getContext().startActivity(new Intent("android.intent.action.VIEW", Uri.parse(url)));
        } else if (url.endsWith(".mp4")) {
            Intent i = new Intent("android.intent.action.VIEW");
            i.setDataAndType(Uri.parse(url), "video/mp4");
            getContext().startActivity(i);
        } else {
            Intent intent = new Intent(getContext(), InAppWebView.class);
            intent.putExtra(Const.REDIRECT_URI, url);
            getContext().startActivity(intent);
        }
    }

    static {
        initCompatibility();
    }

    private static void initCompatibility() {
        try {
            for (Method m : WebView.class.getMethods()) {
                if (m.getName().equals("setLayerType")) {
                    mWebView_SetLayerType = m;
                    break;
                }
            }
            Log.m12v("set layer " + mWebView_SetLayerType);
            mWebView_LAYER_TYPE_SOFTWARE = WebView.class.getField("LAYER_TYPE_SOFTWARE");
            Log.m12v("set1 layer " + mWebView_LAYER_TYPE_SOFTWARE);
        } catch (SecurityException e) {
            Log.m12v("SecurityException");
        } catch (NoSuchFieldException e2) {
            Log.m12v("NoSuchFieldException");
        }
    }

    private static void setLayer(WebView webView) {
        if (mWebView_SetLayerType == null || mWebView_LAYER_TYPE_SOFTWARE == null) {
            Log.m12v("Set Layer is not supported");
            return;
        }
        try {
            Log.m12v("Set Layer is supported");
            mWebView_SetLayerType.invoke(webView, new Object[]{Integer.valueOf(mWebView_LAYER_TYPE_SOFTWARE.getInt(WebView.class)), null});
        } catch (InvocationTargetException e) {
            Log.m12v("Set InvocationTargetException");
        } catch (IllegalArgumentException e2) {
            Log.m12v("Set IllegalArgumentException");
        } catch (IllegalAccessException e3) {
            Log.m12v("Set IllegalAccessException");
        }
    }

    private void buildBannerView() {
        this.firstWebView = createWebView(this.mContext);
        this.secondWebView = createWebView(this.mContext);
        Log.m1d(Const.TAG, "Create view flipper");
        this.viewFlipper = new ViewFlipper(getContext()) {
            protected void onDetachedFromWindow() {
                try {
                    super.onDetachedFromWindow();
                } catch (IllegalArgumentException e) {
                    stopFlipping();
                }
            }
        };
        float scale = this.mContext.getResources().getDisplayMetrics().density;
        setLayoutParams(new LayoutParams((int) ((300.0f * scale) + 0.5f), (int) ((50.0f * scale) + 0.5f)));
        FrameLayout.LayoutParams webViewParams = new FrameLayout.LayoutParams(-1, -1);
        this.viewFlipper.addView(this.firstWebView, webViewParams);
        this.viewFlipper.addView(this.secondWebView, webViewParams);
        addView(this.viewFlipper, new LayoutParams(-1, -1));
        this.firstWebView.setOnTouchListener(this.onTouchListener);
        this.secondWebView.setOnTouchListener(this.onTouchListener);
        Log.m1d(Const.TAG, "animation: " + this.animation);
        if (this.animation) {
            this.fadeInAnimation = new TranslateAnimation(2, 0.0f, 2, 0.0f, 2, 1.0f, 2, 0.0f);
            this.fadeInAnimation.setDuration(1000);
            this.fadeOutAnimation = new TranslateAnimation(2, 0.0f, 2, 0.0f, 2, 0.0f, 2, -1.0f);
            this.fadeOutAnimation.setDuration(1000);
            this.viewFlipper.setInAnimation(this.fadeInAnimation);
            this.viewFlipper.setOutAnimation(this.fadeOutAnimation);
        }
    }

    private void initialize(Context context) {
        initCompatibility();
        buildBannerView();
        showContent();
    }

    public boolean isInternalBrowser() {
        return this.isInternalBrowser;
    }

    private void notifyAdClicked() {
        this.updateHandler.post(new C00235());
    }

    private void notifyLoadAdSucceeded() {
        this.updateHandler.post(new C00246());
    }

    private void notifyNoAd() {
        this.updateHandler.post(new C00257());
    }

    private void openLink() {
        if (this.response != null && this.response.getClickUrl() != null) {
            doOpenUrl(this.response.getClickUrl());
        }
    }

    public void setAdListener(AdListener bannerListener) {
        this.adListener = bannerListener;
    }

    public void setInternalBrowser(boolean isInternalBrowser) {
        this.isInternalBrowser = isInternalBrowser;
    }

    private void showContent() {
        try {
            WebView webView;
            if (this.viewFlipper.getCurrentView() == this.firstWebView) {
                webView = this.secondWebView;
            } else {
                webView = this.firstWebView;
            }
            String text;
            if (this.response.getType() == 0) {
                text = MessageFormat.format(Const.IMAGE_BODY, new Object[]{this.response.getImageUrl(), Integer.valueOf(this.response.getBannerWidth()), Integer.valueOf(this.response.getBannerHeight())});
                Log.m1d(Const.TAG, "set image: " + text);
                webView.loadData(Uri.encode(new StringBuilder(Const.HIDE_BORDER).append(text).toString()), "text/html", Const.ENCODING);
                notifyLoadAdSucceeded();
            } else if (this.response.getType() == 1) {
                text = Uri.encode(new StringBuilder(Const.HIDE_BORDER).append(this.response.getText()).toString());
                Log.m1d(Const.TAG, "set text: " + text);
                webView.loadData(text, "text/html", Const.ENCODING);
                notifyLoadAdSucceeded();
            } else {
                notifyNoAd();
                return;
            }
            if (this.viewFlipper.getCurrentView() == this.firstWebView) {
                Log.m1d(Const.TAG, "show next");
                this.viewFlipper.showNext();
                return;
            }
            Log.m1d(Const.TAG, "show previous");
            this.viewFlipper.showPrevious();
        } catch (Throwable t) {
            Log.m6e(Const.TAG, "Exception in show content", t);
        }
    }
}
