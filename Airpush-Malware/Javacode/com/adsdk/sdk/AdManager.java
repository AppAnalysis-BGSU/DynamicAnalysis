package com.adsdk.sdk;

import android.content.Context;
import android.location.Location;
import android.os.Build.VERSION;
import android.os.Handler;
import com.adsdk.sdk.video.ResourceManager;
import com.adsdk.sdk.video.RichMediaAd;
import com.adsdk.sdk.video.TrackerService;
import java.io.InputStream;
import java.lang.Thread.UncaughtExceptionHandler;
import java.util.HashMap;

public class AdManager {
    private static Context mContext;
    private static HashMap<Long, AdManager> sRunningAds = new HashMap();
    private boolean mEnabled = true;
    private Handler mHandler;
    private boolean mIncludeLocation;
    private AdListener mListener;
    private String mPublisherId;
    private AdRequest mRequest = null;
    private Thread mRequestThread;
    private RichMediaAd mResponse;
    private String mUniqueId1;
    private String mUniqueId2;
    private String mUserAgent;
    private String requestURL;

    class C00041 implements Runnable {

        class C00001 implements Runnable {
            C00001() {
            }

            public void run() {
                AdManager.this.mListener.adLoadSucceeded(AdManager.this.mResponse);
            }
        }

        class C00012 implements Runnable {
            C00012() {
            }

            public void run() {
                AdManager.this.notifyNoAdFound();
            }
        }

        class C00023 implements Runnable {
            C00023() {
            }

            public void run() {
                AdManager.this.notifyNoAdFound();
            }
        }

        class C00034 implements Runnable {
            C00034() {
            }

            public void run() {
                AdManager.this.notifyNoAdFound();
            }
        }

        C00041() {
        }

        public void run() {
            while (ResourceManager.isDownloading()) {
                try {
                    Thread.sleep(200);
                } catch (InterruptedException e) {
                }
            }
            Log.m0d("starting request thread");
            try {
                AdManager.this.mResponse = (RichMediaAd) new RequestRichMediaAd().sendRequest(AdManager.this.getRequest());
                if (AdManager.this.mResponse.getVideo() != null && VERSION.SDK_INT < 8) {
                    Log.m0d("Not capable of video");
                    AdManager.this.notifyNoAdFound();
                    Log.m0d("finishing ad request thread");
                    AdManager.this.mRequestThread = null;
                } else if (AdManager.this.mResponse.getType() == 3 || AdManager.this.mResponse.getType() == 4 || AdManager.this.mResponse.getType() == 5 || AdManager.this.mResponse.getType() == 6) {
                    Log.m0d("response OK received");
                    if (AdManager.this.mListener != null) {
                        AdManager.this.mHandler.post(new C00001());
                    }
                    Log.m0d("finishing ad request thread");
                    AdManager.this.mRequestThread = null;
                } else {
                    if (AdManager.this.mResponse.getType() == 2) {
                        Log.m0d("response NO AD received");
                        if (AdManager.this.mListener != null) {
                            AdManager.this.mHandler.post(new C00012());
                        }
                    } else {
                        Log.m16w("response BANNER received");
                        if (AdManager.this.mListener != null) {
                            AdManager.this.mHandler.post(new C00023());
                        }
                    }
                    Log.m0d("finishing ad request thread");
                    AdManager.this.mRequestThread = null;
                }
            } catch (Throwable t) {
                AdManager.this.mResponse = new RichMediaAd();
                AdManager.this.mResponse.setType(-1);
                if (AdManager.this.mListener != null) {
                    Log.m0d("Ad Load failed. Reason:" + t);
                    t.printStackTrace();
                    AdManager.this.mHandler.post(new C00034());
                }
            }
        }
    }

    class C00052 implements UncaughtExceptionHandler {
        C00052() {
        }

        public void uncaughtException(Thread thread, Throwable ex) {
            AdManager.this.mResponse = new RichMediaAd();
            AdManager.this.mResponse.setType(-1);
            Log.m7e("Handling exception in ad request thread", ex);
            AdManager.this.mRequestThread = null;
        }
    }

    class C00104 implements UncaughtExceptionHandler {
        C00104() {
        }

        public void uncaughtException(Thread thread, Throwable ex) {
            AdManager.this.mResponse = new RichMediaAd();
            AdManager.this.mResponse.setType(-1);
            Log.m7e("Handling exception in ad request thread", ex);
            AdManager.this.mRequestThread = null;
        }
    }

    class C00115 implements Runnable {
        C00115() {
        }

        public void run() {
            AdManager.this.mListener.noAdFound();
        }
    }

    public static AdManager getAdManager(RichMediaAd ad) {
        AdManager adManager = (AdManager) sRunningAds.remove(Long.valueOf(ad.getTimestamp()));
        if (adManager == null) {
            Log.m0d("Cannot find AdManager with running ad:" + ad.getTimestamp());
        }
        return adManager;
    }

    public static void closeRunningAd(RichMediaAd ad, boolean result) {
        AdManager adManager = (AdManager) sRunningAds.remove(Long.valueOf(ad.getTimestamp()));
        if (adManager == null) {
            Log.m0d("Cannot find AdManager with running ad:" + ad.getTimestamp());
            return;
        }
        Log.m0d("Notify closing event to AdManager with running ad:" + ad.getTimestamp());
        adManager.notifyAdClose(ad, result);
    }

    public void release() {
        TrackerService.release();
        ResourceManager.cancel();
    }

    public AdManager(Context ctx, String requestURL, String publisherId, boolean includeLocation) throws IllegalArgumentException {
        setmContext(ctx);
        this.requestURL = requestURL;
        this.mPublisherId = publisherId;
        this.mIncludeLocation = includeLocation;
        this.mRequestThread = null;
        this.mHandler = new Handler();
        initialize();
    }

    public void setListener(AdListener listener) {
        this.mListener = listener;
    }

    public void requestAd() {
        if (!this.mEnabled) {
            Log.m16w("Cannot request rich adds on low memory devices");
        } else if (this.mRequestThread == null) {
            Log.m0d("Requesting Ad (v4.1-1.0)");
            this.mResponse = null;
            this.mRequestThread = new Thread(new C00041());
            this.mRequestThread.setUncaughtExceptionHandler(new C00052());
            this.mRequestThread.start();
        } else {
            Log.m16w("Request thread already running");
        }
    }

    public void setRequestURL(String requestURL) {
        this.requestURL = requestURL;
    }

    public void requestAd(final InputStream xml) {
        if (!this.mEnabled) {
            Log.m16w("Cannot request rich adds on low memory devices");
        } else if (this.mRequestThread == null) {
            Log.m0d("Requesting Ad (v4.1-1.0)");
            this.mResponse = null;
            this.mRequestThread = new Thread(new Runnable() {

                class C00061 implements Runnable {
                    C00061() {
                    }

                    public void run() {
                        AdManager.this.mListener.adLoadSucceeded(AdManager.this.mResponse);
                    }
                }

                class C00072 implements Runnable {
                    C00072() {
                    }

                    public void run() {
                        AdManager.this.notifyNoAdFound();
                    }
                }

                class C00083 implements Runnable {
                    C00083() {
                    }

                    public void run() {
                        AdManager.this.notifyNoAdFound();
                    }
                }

                public void run() {
                    while (ResourceManager.isDownloading()) {
                        try {
                            Thread.sleep(200);
                        } catch (InterruptedException e) {
                        }
                    }
                    Log.m0d("starting request thread");
                    try {
                        AdManager.this.mResponse = (RichMediaAd) new RequestRichMediaAd(xml).sendRequest(AdManager.this.getRequest());
                        if (AdManager.this.mResponse.getType() != 2) {
                            Log.m0d("response OK received");
                            if (AdManager.this.mListener != null) {
                                AdManager.this.mHandler.post(new C00061());
                            }
                        } else {
                            Log.m0d("response NO AD received");
                            if (AdManager.this.mListener != null) {
                                AdManager.this.mHandler.post(new C00072());
                            }
                        }
                    } catch (Throwable t) {
                        AdManager.this.mResponse = new RichMediaAd();
                        AdManager.this.mResponse.setType(-1);
                        if (AdManager.this.mListener != null) {
                            Log.m0d("Ad Load failed. Reason:" + t);
                            t.printStackTrace();
                            AdManager.this.mHandler.post(new C00083());
                        }
                    }
                    Log.m0d("finishing ad request thread");
                    AdManager.this.mRequestThread = null;
                }
            });
            this.mRequestThread.setUncaughtExceptionHandler(new C00104());
            this.mRequestThread.start();
        } else {
            Log.m16w("Request thread already running");
        }
    }

    public boolean isAdLoaded() {
        return this.mResponse != null;
    }

    public void requestAdAndShow(long timeout) {
        AdListener l = this.mListener;
        this.mListener = null;
        requestAd();
        long now = System.currentTimeMillis();
        long timeoutTime = now + timeout;
        while (!isAdLoaded() && now < timeoutTime) {
            try {
                Thread.sleep(200);
            } catch (InterruptedException e) {
            }
            now = System.currentTimeMillis();
        }
        this.mListener = l;
        showAd();
    }

    /* JADX WARNING: inconsistent code. */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void showAd() {
        /*
        r10 = this;
        r9 = 0;
        r0 = r10.getContext();
        r0 = (android.app.Activity) r0;
        r7 = r10.mResponse;
        if (r7 == 0) goto L_0x001d;
    L_0x000b:
        r7 = r10.mResponse;
        r7 = r7.getType();
        r8 = 2;
        if (r7 == r8) goto L_0x001d;
    L_0x0014:
        r7 = r10.mResponse;
        r7 = r7.getType();
        r8 = -1;
        if (r7 != r8) goto L_0x0023;
    L_0x001d:
        r7 = r10.mResponse;
        r10.notifyAdShown(r7, r9);
    L_0x0022:
        return;
    L_0x0023:
        r1 = r10.mResponse;
        r6 = 0;
        r7 = r10.getContext();	 Catch:{ Exception -> 0x0084 }
        r7 = com.adsdk.sdk.Util.isNetworkAvailable(r7);	 Catch:{ Exception -> 0x0084 }
        if (r7 == 0) goto L_0x007e;
    L_0x0030:
        r7 = java.lang.System.currentTimeMillis();	 Catch:{ Exception -> 0x0084 }
        r1.setTimestamp(r7);	 Catch:{ Exception -> 0x0084 }
        r7 = new java.lang.StringBuilder;	 Catch:{ Exception -> 0x0084 }
        r8 = "Showing Ad:";
        r7.<init>(r8);	 Catch:{ Exception -> 0x0084 }
        r7 = r7.append(r1);	 Catch:{ Exception -> 0x0084 }
        r7 = r7.toString();	 Catch:{ Exception -> 0x0084 }
        com.adsdk.sdk.Log.m12v(r7);	 Catch:{ Exception -> 0x0084 }
        r5 = new android.content.Intent;	 Catch:{ Exception -> 0x0084 }
        r7 = com.adsdk.sdk.video.RichMediaActivity.class;
        r5.<init>(r0, r7);	 Catch:{ Exception -> 0x0084 }
        r7 = "RICH_AD_DATA";
        r5.putExtra(r7, r1);	 Catch:{ Exception -> 0x0084 }
        r7 = 0;
        r0.startActivityForResult(r5, r7);	 Catch:{ Exception -> 0x0084 }
        r7 = r1.getAnimation();	 Catch:{ Exception -> 0x0084 }
        r3 = com.adsdk.sdk.Util.getEnterAnimation(r7);	 Catch:{ Exception -> 0x0084 }
        r7 = r1.getAnimation();	 Catch:{ Exception -> 0x0084 }
        r4 = com.adsdk.sdk.Util.getExitAnimation(r7);	 Catch:{ Exception -> 0x0084 }
        com.adsdk.sdk.video.RichMediaActivity.setActivityAnimation(r0, r3, r4);	 Catch:{ Exception -> 0x0084 }
        r6 = 1;
        r7 = sRunningAds;	 Catch:{ Exception -> 0x0084 }
        r8 = r1.getTimestamp();	 Catch:{ Exception -> 0x0084 }
        r8 = java.lang.Long.valueOf(r8);	 Catch:{ Exception -> 0x0084 }
        r7.put(r8, r10);	 Catch:{ Exception -> 0x0084 }
    L_0x007a:
        r10.notifyAdShown(r1, r6);
        goto L_0x0022;
    L_0x007e:
        r7 = "No network available. Cannot show Ad.";
        com.adsdk.sdk.Log.m0d(r7);	 Catch:{ Exception -> 0x0084 }
        goto L_0x007a;
    L_0x0084:
        r2 = move-exception;
        r7 = "Unknown exception when showing Ad";
        com.adsdk.sdk.Log.m7e(r7, r2);	 Catch:{ all -> 0x008e }
        r10.notifyAdShown(r1, r6);
        goto L_0x0022;
    L_0x008e:
        r7 = move-exception;
        r10.notifyAdShown(r1, r6);
        throw r7;
        */
        throw new UnsupportedOperationException("Method not decompiled: com.adsdk.sdk.AdManager.showAd():void");
    }

    private void initialize() throws IllegalArgumentException {
        this.mUserAgent = Util.getDefaultUserAgentString(getContext());
        Log.LOGGING_ENABLED = Log.isLoggingEnabled(getmContext());
        Log.m0d("Ad SDK Version:4.1");
        this.mUniqueId1 = Util.getTelephonyDeviceId(getContext());
        this.mUniqueId2 = Util.getDeviceId(getContext());
        if (this.mPublisherId == null || this.mPublisherId.length() == 0) {
            Log.m4e("Publisher Id cannot be null or empty");
            throw new IllegalArgumentException("User Id cannot be null or empty");
        } else if (this.mUniqueId2 == null || this.mUniqueId2.length() == 0) {
            Log.m4e("Cannot get system device Id");
            throw new IllegalArgumentException("System Device Id cannot be null or empty");
        } else {
            Log.m0d("AdManager Publisher Id:" + this.mPublisherId + " Device Id:" + this.mUniqueId1 + " DeviceId2:" + this.mUniqueId2);
            this.mEnabled = Util.getMemoryClass(getContext()) > 16;
            Util.initializeAnimations(getContext());
        }
    }

    private void notifyNoAdFound() {
        if (this.mListener != null) {
            Log.m0d("No ad found.");
            this.mHandler.post(new C00115());
        }
        this.mResponse = null;
    }

    private void notifyAdShown(final RichMediaAd ad, final boolean ok) {
        if (this.mListener != null) {
            Log.m0d("Ad Shown. Result:" + ok);
            this.mHandler.post(new Runnable() {
                public void run() {
                    AdManager.this.mListener.adShown(ad, ok);
                }
            });
        }
        this.mResponse = null;
    }

    private void notifyAdClose(final RichMediaAd ad, final boolean ok) {
        if (this.mListener != null) {
            Log.m0d("Ad Close. Result:" + ok);
            this.mHandler.post(new Runnable() {
                public void run() {
                    AdManager.this.mListener.adClosed(ad, ok);
                }
            });
        }
    }

    private AdRequest getRequest() {
        if (this.mRequest == null) {
            this.mRequest = new AdRequest();
            this.mRequest.setDeviceId(this.mUniqueId1);
            this.mRequest.setDeviceId2(this.mUniqueId2);
            this.mRequest.setPublisherId(this.mPublisherId);
            this.mRequest.setUserAgent(this.mUserAgent);
            this.mRequest.setUserAgent2(Util.buildUserAgent());
        }
        Location location = null;
        if (this.mIncludeLocation) {
            location = Util.getLocation(getContext());
        }
        if (location != null) {
            Log.m0d("location is longitude: " + location.getLongitude() + ", latitude: " + location.getLatitude());
            this.mRequest.setLatitude(location.getLatitude());
            this.mRequest.setLongitude(location.getLongitude());
        } else {
            this.mRequest.setLatitude(0.0d);
            this.mRequest.setLongitude(0.0d);
        }
        this.mRequest.setConnectionType(Util.getConnectionType(getContext()));
        this.mRequest.setIpAddress(Util.getLocalIpAddress());
        this.mRequest.setTimestamp(System.currentTimeMillis());
        this.mRequest.setType(1);
        this.mRequest.setRequestURL(this.requestURL);
        Log.m0d("Getting new request:" + this.mRequest.toString());
        return this.mRequest;
    }

    private Context getContext() {
        return getmContext();
    }

    private static Context getmContext() {
        return mContext;
    }

    private static void setmContext(Context mContext) {
        mContext = mContext;
    }
}
