package com.ixaexvsbscmhkbbddjlq;

import android.app.Activity;
import android.content.ActivityNotFoundException;
import android.content.Context;
import android.content.Intent;
import android.content.res.TypedArray;
import android.net.ConnectivityManager;
import android.net.Uri;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.GestureDetector;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewTreeObserver.OnGlobalLayoutListener;
import android.view.WindowManager;
import android.webkit.URLUtil;
import android.webkit.WebBackForwardList;
import android.webkit.WebChromeClient;
import android.webkit.WebSettings.PluginState;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.FrameLayout;
import android.widget.Toast;
import com.adsdk.sdk.mraid.MraidView;
import com.ixaexvsbscmhkbbddjlq.AdController.Dimensions;
import com.ixaexvsbscmhkbbddjlq.AdController.PlayerProperties;
import com.ixaexvsbscmhkbbddjlq.AdController.Properties;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.util.HashSet;
import java.util.Iterator;

public class AdView extends WebView implements OnGlobalLayoutListener {
    public static final String ACTION_KEY = "action";
    public static final String DIMENSIONS = "expand_dimensions";
    public static final String EXPAND_URL = "expand_url";
    public static final int ORMMA_ID = 102;
    public static final String PLAYER_PROPERTIES = "player_properties";
    private static Context f144b;
    private static int[] f145e = new int[]{16843039, 16843040};
    private static String f146f;
    private static AdPlayer f147t;
    private boolean f148A;
    final WebView f149a = this;
    private AdController f150c;
    private AdListener f151d;
    private boolean f152g;
    private AdUtilityController f153h;
    private float f154i;
    private int f155j;
    private boolean f156k;
    private int f157l;
    private int f158m;
    private int f159n;
    private int f160o;
    private int f161p;
    private GestureDetector f162q;
    private ViewState f163r = ViewState.DEFAULT;
    private AdViewListener f164s;
    private String f165u;
    private final HashSet f166v = new HashSet();
    private String f167w;
    private Handler f168x = new C0104U(this);
    private WebViewClient f169y = new C0107X(this);
    private WebChromeClient f170z = new ac(this, f144b);

    public enum ACTION {
        PLAY_AUDIO,
        PLAY_VIDEO
    }

    public interface AdViewListener {
        void handleRequest(String str);

        boolean onEventFired();

        boolean onExpand();

        boolean onExpandClose();

        boolean onReady();

        boolean onResize();

        boolean onResizeClose();
    }

    public abstract class NewLocationReciever {
        public abstract void OnNewLocation(ViewState viewState);
    }

    public enum ViewState {
        DEFAULT,
        RESIZED,
        EXPANDED,
        HIDDEN,
        LEFT_BEHIND,
        OPENED
    }

    public AdView(Context context) {
        super(context);
        f144b = context;
        m144f();
    }

    public AdView(Context context, AttributeSet attributeSet) {
        super(context, attributeSet);
        m144f();
        TypedArray obtainStyledAttributes = getContext().obtainStyledAttributes(attributeSet, f145e);
        int dimensionPixelSize = obtainStyledAttributes.getDimensionPixelSize(0, -1);
        int dimensionPixelSize2 = obtainStyledAttributes.getDimensionPixelSize(1, -1);
        if (dimensionPixelSize > 0 && dimensionPixelSize2 > 0) {
            this.f153h.setMaxSize(dimensionPixelSize, dimensionPixelSize2);
        }
        obtainStyledAttributes.recycle();
    }

    public AdView(Context context, AdController adController, AdListener adListener) {
        super(context);
        f144b = context;
        this.f150c = adController;
        this.f151d = adListener;
        m144f();
    }

    public AdView(Context context, AdViewListener adViewListener) {
        super(context);
        f144b = context;
        setListener(adViewListener);
        m144f();
    }

    public AdView(Context context, String str) {
        super(context);
        f144b = context;
        this.f167w = str;
        m144f();
    }

    public AdView(Context context, String str, AdViewListener adViewListener) {
        super(context);
        f144b = context;
        this.f167w = str;
        setListener(adViewListener);
        m144f();
    }

    static /* synthetic */ void m128a(AdView adView, Bundle bundle) {
        Dimensions dimensions = (Dimensions) bundle.getParcelable(DIMENSIONS);
        String string = bundle.getString(EXPAND_URL);
        Properties properties = (Properties) bundle.getParcelable("expand_properties");
        if (URLUtil.isValidUrl(string)) {
            adView.loadUrl(string);
        }
        FrameLayout frameLayout = (FrameLayout) adView.getRootView().findViewById(16908290);
        ViewGroup viewGroup = (ViewGroup) adView.getParent();
        LayoutParams layoutParams = new FrameLayout.LayoutParams(dimensions.width, dimensions.height);
        layoutParams.topMargin = dimensions.f282x;
        layoutParams.leftMargin = dimensions.f283y;
        int childCount = viewGroup.getChildCount();
        int i = 0;
        while (i < childCount && viewGroup.getChildAt(i) != adView) {
            i++;
        }
        adView.f161p = i;
        View frameLayout2 = new FrameLayout(adView.getContext());
        frameLayout2.setId(100);
        viewGroup.addView(frameLayout2, i, new LayoutParams(adView.getWidth(), adView.getHeight()));
        viewGroup.removeView(adView);
        View frameLayout3 = new FrameLayout(adView.getContext());
        frameLayout3.setOnTouchListener(new C0105V(adView));
        LayoutParams layoutParams2 = new FrameLayout.LayoutParams(-1, -1);
        frameLayout3.setId(MraidView.MODAL_CONTAINER_LAYOUT_ID);
        frameLayout3.setPadding(dimensions.f282x, dimensions.f283y, 0, 0);
        frameLayout3.addView(adView, layoutParams);
        frameLayout.addView(frameLayout3, layoutParams2);
        if (properties.useBackground) {
            frameLayout3.setBackgroundColor((((int) (properties.backgroundOpacity * 255.0f)) * 268435456) | properties.backgroundColor);
        }
        String str = "window.ormmaview.fireChangeEvent({ state: 'expanded', size: { width: " + ((int) (((float) dimensions.width) / adView.f154i)) + ", height: " + ((int) (((float) dimensions.height) / adView.f154i)) + "} });";
        Log.d("LBAdView", "doExpand: injection: " + str);
        adView.injectJavaScript(str);
        if (adView.f164s != null) {
            adView.f164s.onExpand();
        }
        adView.f163r = ViewState.EXPANDED;
    }

    private void m131a(InputStream inputStream, String str) {
        Log.d("AdView", "loadInputStream, data =" + str);
        m140d();
        new ae(this, inputStream, str).execute(new Void[0]);
    }

    static /* synthetic */ boolean m132a(AdView adView, Uri uri) {
        String scheme = uri.getScheme();
        if (scheme != null) {
            Iterator it = adView.f166v.iterator();
            while (it.hasNext()) {
                if (((String) it.next()).equalsIgnoreCase(scheme)) {
                    return true;
                }
            }
        }
        return false;
    }

    private void m140d() {
        if (this.f163r == ViewState.EXPANDED) {
            m152a();
        } else if (this.f163r == ViewState.RESIZED) {
            m141e();
        }
        invalidate();
        this.f153h.deleteOldAds();
        this.f153h.stopAllListeners();
        m150i();
    }

    private void m141e() {
        if (this.f164s != null) {
            this.f164s.onResizeClose();
        }
        String str = "window.ormmaview.fireChangeEvent({ state: 'default', size: { width: " + this.f158m + ", height: " + this.f157l + "}});";
        Log.d("LBAdView", "closeResized: injection: " + str);
        injectJavaScript(str);
        m150i();
    }

    private void m144f() {
        AdLog.m106d(AdController.LB_LOG, "Going to initialize mView");
        setScrollContainer(false);
        setVerticalScrollBarEnabled(false);
        setHorizontalScrollBarEnabled(false);
        this.f162q = new GestureDetector(new af(this));
        setBackgroundColor(0);
        DisplayMetrics displayMetrics = new DisplayMetrics();
        ((WindowManager) getContext().getSystemService("window")).getDefaultDisplay().getMetrics(displayMetrics);
        this.f154i = displayMetrics.density;
        this.f152g = false;
        getSettings().setJavaScriptEnabled(true);
        getSettings().setPluginsEnabled(true);
        getSettings().setDomStorageEnabled(true);
        if (VERSION.SDK_INT >= 8) {
            getSettings().setPluginState(PluginState.ON);
        }
        setWebViewClient(this.f169y);
        setWebChromeClient(this.f170z);
        this.f153h = new AdUtilityController(this, getContext());
        addJavascriptInterface(this.f153h, "ORMMAUtilityControllerBridge");
        addJavascriptInterface(new AdJSInterface((Activity) f144b, this.f150c, this.f151d), "LBOUT");
        m148h();
        this.f155j = m146g();
        getViewTreeObserver().addOnGlobalLayoutListener(this);
        AdLog.m106d(AdController.LB_LOG, "mView Initialize complete");
    }

    private int m146g() {
        View findViewById = getRootView().findViewById(16908290);
        return findViewById != null ? findViewById.getHeight() : -1;
    }

    private synchronized void m148h() {
        if (f146f == null) {
            f146f = this.f153h.copyTextFromJarIntoAssetDir("/js/ormma.js", "js/ormma.js");
            AdLog.m106d(AdController.LB_LOG, "mScriptPath = " + f146f);
        }
    }

    private void m150i() {
        LayoutParams layoutParams = getLayoutParams();
        if (this.f148A) {
            layoutParams.height = this.f159n;
            layoutParams.width = this.f160o;
        }
        setVisibility(0);
        requestLayout();
    }

    private AdPlayer m151j() {
        if (f147t != null) {
            f147t.releasePlayer();
        }
        AdPlayer adPlayer = new AdPlayer(getContext());
        f147t = adPlayer;
        return adPlayer;
    }

    protected final synchronized void m152a() {
        resetContents();
        String str = "window.ormmaview.fireChangeEvent({ state: 'default', size: { width: " + this.f158m + ", height: " + this.f157l + "}});";
        Log.d("LBAdView", "closeExpanded: injection: " + str);
        injectJavaScript(str);
        this.f163r = ViewState.DEFAULT;
        this.f168x.sendEmptyMessage(1005);
        setVisibility(0);
    }

    public void addJavascriptObject(Object obj, String str) {
        addJavascriptInterface(obj, str);
    }

    public void clearView() {
        m140d();
        super.clearView();
    }

    public void close() {
        ((Activity) f144b).runOnUiThread(new C0108Y(this));
    }

    public void deregisterProtocol(String str) {
        if (str != null) {
            this.f166v.remove(str.toLowerCase());
        }
    }

    public void dump() {
    }

    public void expand(Dimensions dimensions, String str, Properties properties) {
        Message obtainMessage = this.f168x.obtainMessage(1004);
        Bundle bundle = new Bundle();
        bundle.putParcelable(DIMENSIONS, dimensions);
        bundle.putString(EXPAND_URL, str);
        bundle.putParcelable("expand_properties", properties);
        obtainMessage.setData(bundle);
        this.f168x.sendMessage(obtainMessage);
    }

    public ConnectivityManager getConnectivityManager() {
        return (ConnectivityManager) getContext().getSystemService("connectivity");
    }

    public String getSize() {
        return "{ width: " + ((int) (((float) getWidth()) / this.f154i)) + ", height: " + ((int) (((float) getHeight()) / this.f154i)) + "}";
    }

    public String getState() {
        return this.f163r.toString().toLowerCase();
    }

    public void hide() {
        try {
            Class.forName("android.webkit.WebView").getMethod("onPause", null).invoke(this, null);
        } catch (Exception e) {
        }
        this.f168x.sendEmptyMessage(1002);
    }

    public void injectJavaScript(String str) {
        if (str != null) {
            ((Activity) f144b).runOnUiThread(new C0103T(this, str));
        }
    }

    public boolean isExpanded() {
        return this.f163r == ViewState.EXPANDED;
    }

    public boolean isPageFinished() {
        return false;
    }

    public void loadFile(File file, String str) {
        try {
            m131a(new FileInputStream(file), str);
        } catch (Exception e) {
            AdLog.m107e(AdController.LB_LOG, "erro with loadFile - " + e.getMessage());
            AdLog.printStackTrace(AdController.LB_LOG, e);
        }
    }

    public void loadHTMLWrap(String str) {
        this.f165u = this.f153h.writeHTMLToDiskWrap(str, "_ormma_current", true, null, null, f146f);
        ((Activity) f144b).runOnUiThread(new C0106W(this, "file://" + this.f165u + File.separator + "_ormma_current"));
    }

    public void loadUrl(String str) {
        loadUrl(str, false, null);
    }

    public void loadUrl(String str, String str2) {
        loadUrl(str, false, str2);
    }

    public void loadUrl(String str, boolean z, String str2) {
        if (URLUtil.isValidUrl(str)) {
            if (!z) {
                this.f152g = false;
                try {
                    new ad(this, str, str2).execute(new Void[0]);
                } catch (Exception e) {
                }
            }
            super.loadUrl(str);
        }
    }

    protected void onAttachedToWindow() {
        if (!this.f148A) {
            LayoutParams layoutParams = getLayoutParams();
            this.f159n = layoutParams.height;
            this.f160o = layoutParams.width;
            this.f148A = true;
        }
        super.onAttachedToWindow();
    }

    protected void onDetachedFromWindow() {
        this.f153h.stopAllListeners();
        super.onDetachedFromWindow();
    }

    public void onGlobalLayout() {
        Log.d("LBAdView", "onGlobalLayout called");
        boolean z = this.f156k;
        if (!this.f156k && this.f155j >= 0 && m146g() >= 0 && this.f155j != m146g()) {
            z = true;
            injectJavaScript("window.ormmaview.fireChangeEvent({ keyboardState: true});");
        }
        if (this.f156k && this.f155j >= 0 && m146g() >= 0 && this.f155j == m146g()) {
            z = false;
            injectJavaScript("window.ormmaview.fireChangeEvent({ keyboardState: false});");
        }
        if (this.f155j < 0) {
            this.f155j = m146g();
        }
        this.f156k = z;
    }

    public boolean onTouchEvent(MotionEvent motionEvent) {
        if (this.f162q.onTouchEvent(motionEvent)) {
            motionEvent.setAction(3);
        }
        return super.onTouchEvent(motionEvent);
    }

    public void open(String str, boolean z, boolean z2, boolean z3) {
        Intent intent = new Intent(getContext(), AdBrowser.class);
        Log.d("AdView", "open:" + str);
        intent.putExtra("extra_url", str);
        intent.putExtra(AdBrowser.SHOW_BACK_EXTRA, z);
        intent.putExtra(AdBrowser.SHOW_FORWARD_EXTRA, z2);
        intent.putExtra(AdBrowser.SHOW_REFRESH_EXTRA, z3);
        intent.addFlags(268435456);
        getContext().startActivity(intent);
    }

    public void openMap(String str, boolean z) {
        Log.d("AdView", "Opening Map Url " + str);
        String convert = AdUtils.convert(str.trim());
        if (z) {
            try {
                Intent intent = new Intent("android.intent.action.VIEW", Uri.parse(convert));
                intent.setFlags(268435456);
                getContext().startActivity(intent);
            } catch (ActivityNotFoundException e) {
                e.printStackTrace();
            }
        } else if (this.f167w == null) {
            Toast.makeText(getContext(), "Error: no Google Maps API Key provided for embedded map", 1).show();
        }
    }

    public void playAudio(String str, boolean z, boolean z2, boolean z3, boolean z4, String str2, String str3) {
        Object playerProperties = new PlayerProperties();
        playerProperties.setProperties(false, z, z2, z4, z3, str2, str3);
        Bundle bundle = new Bundle();
        bundle.putString("action", ACTION.PLAY_AUDIO.toString());
        bundle.putString(EXPAND_URL, str);
        bundle.putParcelable(PLAYER_PROPERTIES, playerProperties);
        if (playerProperties.isFullScreen()) {
            try {
                Intent intent = new Intent(getContext(), AdActionHandler.class);
                intent.putExtras(bundle);
                getContext().startActivity(intent);
                return;
            } catch (ActivityNotFoundException e) {
                e.printStackTrace();
                return;
            }
        }
        Message obtainMessage = this.f168x.obtainMessage(1008);
        obtainMessage.setData(bundle);
        this.f168x.sendMessage(obtainMessage);
    }

    public void playAudioImpl(Bundle bundle) {
        PlayerProperties playerProperties = (PlayerProperties) bundle.getParcelable(PLAYER_PROPERTIES);
        String string = bundle.getString(EXPAND_URL);
        View j = m151j();
        j.setPlayData(playerProperties, string);
        j.setLayoutParams(new LayoutParams(1, 1));
        ((ViewGroup) getParent()).addView(j);
        j.playAudio();
    }

    public void playVideo(String str, boolean z, boolean z2, boolean z3, boolean z4, Dimensions dimensions, String str2, String str3) {
        Log.i("RMVideoPlayer", "Video URL - " + str);
        Message obtainMessage = this.f168x.obtainMessage(1007);
        Object playerProperties = new PlayerProperties();
        playerProperties.setProperties(z, z2, z3, false, z4, str2, str3);
        Bundle bundle = new Bundle();
        bundle.putString(EXPAND_URL, str);
        bundle.putString("action", ACTION.PLAY_VIDEO.toString());
        bundle.putParcelable(PLAYER_PROPERTIES, playerProperties);
        if (dimensions != null) {
            bundle.putParcelable(DIMENSIONS, dimensions);
        }
        if (playerProperties.isFullScreen()) {
            try {
                Intent intent = new Intent(getContext(), AdActionHandler.class);
                intent.putExtras(bundle);
                getContext().startActivity(intent);
            } catch (ActivityNotFoundException e) {
                e.printStackTrace();
            }
        } else if (dimensions != null) {
            obtainMessage.setData(bundle);
            this.f168x.sendMessage(obtainMessage);
        }
    }

    public void playVideoImpl(Bundle bundle) {
        PlayerProperties playerProperties = (PlayerProperties) bundle.getParcelable(PLAYER_PROPERTIES);
        Dimensions dimensions = (Dimensions) bundle.getParcelable(DIMENSIONS);
        String string = bundle.getString(EXPAND_URL);
        View j = m151j();
        j.setPlayData(playerProperties, string);
        Log.i("Media Player", "Video URL - " + string);
        LayoutParams layoutParams = new FrameLayout.LayoutParams(dimensions.width, dimensions.height);
        layoutParams.topMargin = dimensions.f282x;
        layoutParams.leftMargin = dimensions.f283y;
        j.setLayoutParams(layoutParams);
        View frameLayout = new FrameLayout(getContext());
        frameLayout.setOnTouchListener(new C0109Z(this));
        frameLayout.setId(MraidView.MODAL_CONTAINER_LAYOUT_ID);
        frameLayout.setPadding(dimensions.f282x, dimensions.f283y, 0, 0);
        ((FrameLayout) getRootView().findViewById(16908290)).addView(frameLayout, new FrameLayout.LayoutParams(-1, -1));
        frameLayout.addView(j);
        setVisibility(4);
        j.setListener(new aa(this));
        j.playVideo();
    }

    public void raiseError(String str, String str2) {
        Message obtainMessage = this.f168x.obtainMessage(1009);
        Bundle bundle = new Bundle();
        bundle.putString("message", str);
        bundle.putString("action", str2);
        obtainMessage.setData(bundle);
        this.f168x.sendMessage(obtainMessage);
    }

    public void registerProtocol(String str) {
        if (str != null) {
            this.f166v.add(str.toLowerCase());
        }
    }

    public void removeListener() {
        this.f164s = null;
    }

    public void resetContents() {
        FrameLayout frameLayout = (FrameLayout) getRootView().findViewById(16908290);
        FrameLayout frameLayout2 = (FrameLayout) getRootView().findViewById(100);
        FrameLayout frameLayout3 = (FrameLayout) getRootView().findViewById(MraidView.MODAL_CONTAINER_LAYOUT_ID);
        ViewGroup viewGroup = (ViewGroup) frameLayout2.getParent();
        frameLayout3.removeView(this);
        frameLayout.removeView(frameLayout3);
        m150i();
        try {
            viewGroup.addView(this, this.f161p);
            viewGroup.removeView(frameLayout2);
            viewGroup.invalidate();
        } catch (Exception e) {
        }
    }

    public void resize(int i, int i2) {
        Message obtainMessage = this.f168x.obtainMessage(1000);
        Bundle bundle = new Bundle();
        bundle.putInt("resize_width", i);
        bundle.putInt("resize_height", i2);
        obtainMessage.setData(bundle);
        this.f168x.sendMessage(obtainMessage);
    }

    public WebBackForwardList restoreState(Bundle bundle) {
        this.f165u = bundle.getString("AD_PATH");
        super.loadUrl("file://" + this.f165u + File.separator + "_ormma_current");
        return null;
    }

    public WebBackForwardList saveState(Bundle bundle) {
        bundle.putString("AD_PATH", this.f165u);
        return null;
    }

    public void setListener(AdViewListener adViewListener) {
        this.f164s = adViewListener;
    }

    public void setMapAPIKey(String str) {
        this.f167w = str;
    }

    public void setMaxSize(int i, int i2) {
        this.f153h.setMaxSize(i, i2);
    }

    public void show() {
        this.f168x.sendEmptyMessage(1003);
    }
}
