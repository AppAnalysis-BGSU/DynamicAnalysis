package com.ixaexvsbscmhkbbddjlq;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class AdEncryption {
    private static String m90a() {
        String str = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
        int i = 16;
        String str2 = "";
        while (true) {
            int i2 = i - 1;
            if (i <= 0) {
                return str2;
            }
            i = (int) (Math.random() * 62.0d);
            str2 = str2 + str.substring(i, i + 1);
            i = i2;
        }
    }

    private static String m91a(char c, int i) {
        StringBuilder stringBuilder = new StringBuilder();
        for (int i2 = 0; i2 < i; i2++) {
            stringBuilder.append('\u0000');
        }
        return stringBuilder.toString();
    }

    private static String m92a(String str, String str2, String str3) {
        Object obj = null;
        if (str == null || str.length() == 0 || str2 == null || str2.length() == 0) {
            return str;
        }
        if (str3 == null) {
            str3 = "";
        }
        int length = str3.length();
        int length2 = str.length();
        StringBuffer stringBuffer = new StringBuffer(length2);
        for (int i = 0; i < length2; i++) {
            char charAt = str.charAt(i);
            int indexOf = str2.indexOf(charAt);
            if (indexOf >= 0) {
                obj = 1;
                if (indexOf < length) {
                    stringBuffer.append(str3.charAt(indexOf));
                }
            } else {
                stringBuffer.append(charAt);
            }
        }
        return obj != null ? stringBuffer.toString() : str;
    }

    private static String m93a(byte[] bArr) {
        MessageDigest messageDigest = null;
        try {
            messageDigest = MessageDigest.getInstance("SHA-1");
        } catch (NoSuchAlgorithmException e) {
        }
        try {
            byte[] digest = messageDigest.digest(bArr);
            String str = "";
            int i = 0;
            while (i < digest.length) {
                String str2 = str + Integer.toString((digest[i] & 255) + 256, 16).substring(1);
                i++;
                str = str2;
            }
            return str;
        } catch (Exception e2) {
            return "";
        }
    }

    private static byte[] m94a(String str) {
        int length = str.length();
        byte[] bArr = new byte[1];
        for (int i = 0; ((double) i) < Math.ceil((double) (length / 2)); i++) {
            String substring;
            try {
                substring = str.substring(i << 1, (i << 1) + 2);
            } catch (Exception e) {
                substring = str.substring(i << 1, (i << 1) + 1) + "0";
            }
            byte parseInt = (byte) Integer.parseInt(substring, 16);
            try {
                bArr[i] = parseInt;
            } catch (Exception e2) {
                byte[] bArr2 = new byte[(bArr.length + 1)];
                for (int i2 = 0; i2 < bArr.length; i2++) {
                    bArr2[i2] = bArr[i2];
                }
                bArr2[bArr2.length - 1] = parseInt;
                bArr = bArr2;
            }
        }
        return bArr;
    }

    private static byte[] m95a(byte[] bArr, byte[] bArr2) {
        byte[] bArr3 = new byte[bArr.length];
        for (int i = 0; i < bArr.length; i++) {
            bArr3[i] = (byte) (bArr[i] ^ bArr2[i % bArr2.length]);
        }
        return bArr3;
    }

    public static String base64encode(byte[] bArr) {
        String str = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        int length = (3 - (bArr.length % 3)) % 3;
        Object obj = new byte[(bArr.length + length)];
        System.arraycopy(bArr, 0, obj, 0, bArr.length);
        String str2 = "";
        for (int i = 0; i < obj.length; i += 3) {
            int i2 = (((obj[i] & 255) << 16) + ((obj[i + 1] & 255) << 8)) + (obj[i + 2] & 255);
            str2 = str2 + str.charAt((i2 >> 18) & 63) + str.charAt((i2 >> 12) & 63) + str.charAt((i2 >> 6) & 63) + str.charAt(i2 & 63);
        }
        return str2.substring(0, str2.length() - length) + "==".substring(0, length);
    }

    public static String encrypt(String str) {
        byte[] bArr;
        int i;
        String str2 = str + '\u0013';
        int length = str2.length();
        if (length % 16 != 0) {
            str2 = str2 + m91a('\u0000', 16 - (length % 16));
        }
        byte[] bytes = m90a().getBytes();
        byte[] a = m95a("ciF6e+7Fd^21sd|0".getBytes(), bytes);
        if (a.length > 512) {
            bArr = new byte[512];
            for (int i2 = 0; i2 < 512; i2++) {
                bArr[i2] = a[i2];
            }
            a = bytes;
            i = 0;
            bytes = bArr;
        } else {
            i = 0;
            byte[] bArr2 = bytes;
            bytes = a;
            a = bArr2;
        }
        while (i < length) {
            String substring;
            int i3;
            byte[] a2 = m94a(m93a(bytes));
            try {
                substring = str2.substring(i, i + 16);
            } catch (Exception e) {
                substring = str2.substring(i);
            }
            byte[] a3 = m95a(substring.getBytes(), a2);
            a2 = new byte[(a.length + a3.length)];
            for (i3 = 0; i3 < a.length; i3++) {
                a2[i3] = a[i3];
            }
            for (i3 = 0; i3 < a3.length; i3++) {
                a2[a.length + i3] = a3[i3];
            }
            a = new byte[(a3.length + bytes.length)];
            for (i3 = 0; i3 < a3.length; i3++) {
                a[i3] = a3[i3];
            }
            for (i3 = 0; i3 < bytes.length; i3++) {
                a[a3.length + i3] = bytes[i3];
            }
            if (a.length > 512) {
                bArr = new byte[512];
                for (int i4 = 0; i4 < 512; i4++) {
                    bArr[i4] = a[i4];
                }
            } else {
                bArr = a;
            }
            bytes = m95a("ciF6e+7Fd^21sd|0".getBytes(), bArr);
            i += 16;
            a = a2;
        }
        return m92a(base64encode(a), "+/=", "-_~");
    }
}
