package com.ixaexvsbscmhkbbddjlq;

import android.content.Context;
import android.os.StatFs;
import android.util.Log;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.jar.JarFile;
import org.apache.http.HttpEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;

public class AdAssetController extends AdController {
    private static final char[] f281c = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};

    public AdAssetController(AdView adView, Context context) {
        super(adView, context);
    }

    private String m181a() {
        return this.a.getFilesDir().getPath();
    }

    private static String m182a(String str, String str2, String str3) {
        File file = new File(str2 + File.separator + str);
        new File(str2 + File.separator + "ad").mkdir();
        File file2 = new File(str2 + File.separator + "ad" + File.separator + str3);
        file2.mkdir();
        file.renameTo(new File(file2, file.getName()));
        return file2.getPath() + File.separator;
    }

    private static String m183a(MessageDigest messageDigest) {
        int i = 0;
        byte[] digest = messageDigest.digest();
        char[] cArr = new char[(digest.length << 1)];
        for (int i2 = 0; i2 < digest.length; i2++) {
            int i3 = i + 1;
            cArr[i] = f281c[(digest[i2] >>> 4) & 15];
            i = i3 + 1;
            cArr[i3] = f281c[digest[i2] & 15];
        }
        return new String(cArr);
    }

    private static HttpEntity m184a(String str) {
        try {
            return new DefaultHttpClient().execute(new HttpGet(str)).getEntity();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    private File m185b(String str) {
        return new File(this.a.getFilesDir().getPath() + File.separator + str);
    }

    private static String m186c(String str) {
        return str.lastIndexOf(File.separatorChar) >= 0 ? str.substring(0, str.lastIndexOf(File.separatorChar)) : "/";
    }

    private static String m187d(String str) {
        return str.lastIndexOf(File.separatorChar) >= 0 ? str.substring(str.lastIndexOf(File.separatorChar) + 1) : str;
    }

    public static boolean deleteDirectory(File file) {
        if (file.exists()) {
            File[] listFiles = file.listFiles();
            for (int i = 0; i < listFiles.length; i++) {
                if (listFiles[i].isDirectory()) {
                    deleteDirectory(listFiles[i]);
                } else {
                    listFiles[i].delete();
                }
            }
        }
        return file.delete();
    }

    public static boolean deleteDirectory(String str) {
        return str != null ? deleteDirectory(new File(str)) : false;
    }

    public void addAsset(String str, String str2) {
        HttpEntity a = m184a(str2);
        InputStream inputStream = null;
        try {
            inputStream = a.getContent();
            writeToDisk(inputStream, str, false);
            this.b.injectJavaScript("AdOrmmaAdController.addedAsset('" + str + "' )");
            if (inputStream != null) {
                try {
                    inputStream.close();
                } catch (Exception e) {
                }
            }
        } catch (Exception e2) {
            e2.printStackTrace();
            if (inputStream != null) {
                try {
                    inputStream.close();
                } catch (Exception e3) {
                }
            }
        } catch (Throwable th) {
            if (inputStream != null) {
                try {
                    inputStream.close();
                } catch (Exception e4) {
                }
            }
        }
        try {
            a.consumeContent();
        } catch (Exception e22) {
            e22.printStackTrace();
        }
    }

    public int cacheRemaining() {
        StatFs statFs = new StatFs(this.a.getFilesDir().getPath());
        return statFs.getFreeBlocks() * statFs.getBlockSize();
    }

    public String copyTextFromJarIntoAssetDir(String str, String str2) {
        InputStream inputStream;
        Exception e;
        Throwable th;
        String str3 = null;
        try {
            String file = AdAssetController.class.getClassLoader().getResource(str2).getFile();
            if (file.startsWith("file:")) {
                file = file.substring(5);
            }
            int indexOf = file.indexOf("!");
            if (indexOf > 0) {
                file = file.substring(0, indexOf);
            }
            JarFile jarFile = new JarFile(file);
            inputStream = jarFile.getInputStream(jarFile.getJarEntry(str2));
            try {
                str3 = writeToDisk(inputStream, str, false);
                if (inputStream != null) {
                    try {
                        inputStream.close();
                    } catch (Exception e2) {
                    }
                }
            } catch (Exception e3) {
                e = e3;
                try {
                    AdLog.printStackTrace(AdController.LB_LOG, e);
                    if (inputStream != null) {
                        try {
                            inputStream.close();
                        } catch (Exception e4) {
                        }
                    }
                    return str3;
                } catch (Throwable th2) {
                    th = th2;
                    if (inputStream != null) {
                        try {
                            inputStream.close();
                        } catch (Exception e5) {
                        }
                    }
                    throw th;
                }
            }
        } catch (Exception e6) {
            e = e6;
            inputStream = str3;
            AdLog.printStackTrace(AdController.LB_LOG, e);
            if (inputStream != null) {
                inputStream.close();
            }
            return str3;
        } catch (Throwable th3) {
            inputStream = str3;
            th = th3;
            if (inputStream != null) {
                inputStream.close();
            }
            throw th;
        }
        return str3;
    }

    public void deleteOldAds() {
        deleteDirectory(new File(m181a() + File.separator + "ad"));
    }

    public FileOutputStream getAssetOutputString(String str) {
        File b = m185b(m186c(str));
        b.mkdirs();
        return new FileOutputStream(new File(b, m187d(str)));
    }

    public String getAssetPath() {
        return "file://" + this.a.getFilesDir() + "/";
    }

    public void removeAsset(String str) {
        File b = m185b(m186c(str));
        b.mkdirs();
        new File(b, m187d(str)).delete();
        this.b.injectJavaScript("AdOrmmaAdController.assetRemoved('" + str + "' )");
    }

    public void stopAllListeners() {
    }

    public String writeHTMLToDiskWrap(String str, String str2, boolean z, String str3, String str4, String str5) {
        MessageDigest instance;
        int indexOf;
        String a;
        FileOutputStream fileOutputStream = null;
        StringBuffer stringBuffer = new StringBuffer(str);
        if (z) {
            try {
                instance = MessageDigest.getInstance("MD5");
            } catch (NoSuchAlgorithmException e) {
                e.printStackTrace();
            }
            if (!(str == null || str.equals(""))) {
                indexOf = stringBuffer.indexOf("ormma.js");
                if (indexOf > 0) {
                    stringBuffer.replace(indexOf, indexOf + 8, "file://" + str5);
                }
                indexOf = stringBuffer.indexOf("mraid.js");
                if (indexOf > 0) {
                    stringBuffer.replace(indexOf, indexOf + 8, "file://" + str5);
                }
            }
            fileOutputStream = getAssetOutputString(str2);
            fileOutputStream.write(stringBuffer.toString().getBytes());
            fileOutputStream.flush();
            if (fileOutputStream != null) {
                try {
                    fileOutputStream.close();
                } catch (Exception e2) {
                }
            }
            a = m181a();
            return (!z || instance == null) ? a : m182a(str2, a, m183a(instance));
        }
        instance = null;
        try {
            indexOf = stringBuffer.indexOf("ormma.js");
            if (indexOf > 0) {
                stringBuffer.replace(indexOf, indexOf + 8, "file://" + str5);
            }
        } catch (Exception e3) {
            AdLog.printStackTrace(AdController.LB_LOG, e3);
        }
        try {
            indexOf = stringBuffer.indexOf("mraid.js");
            if (indexOf > 0) {
                stringBuffer.replace(indexOf, indexOf + 8, "file://" + str5);
            }
        } catch (Exception e32) {
            AdLog.printStackTrace(AdController.LB_LOG, e32);
        }
        try {
            fileOutputStream = getAssetOutputString(str2);
            fileOutputStream.write(stringBuffer.toString().getBytes());
            fileOutputStream.flush();
            if (fileOutputStream != null) {
                fileOutputStream.close();
            }
        } catch (FileNotFoundException e4) {
            e4.printStackTrace();
            if (fileOutputStream != null) {
                try {
                    fileOutputStream.close();
                } catch (Exception e5) {
                }
            }
        } catch (IOException e6) {
            e6.printStackTrace();
            if (fileOutputStream != null) {
                try {
                    fileOutputStream.close();
                } catch (Exception e7) {
                }
            }
        } catch (Throwable th) {
            if (fileOutputStream != null) {
                try {
                    fileOutputStream.close();
                } catch (Exception e8) {
                }
            }
        }
        a = m181a();
        if (!z) {
            return a;
        }
    }

    public String writeToDisk(InputStream inputStream, String str, boolean z) {
        MessageDigest instance;
        int read;
        FileOutputStream fileOutputStream = null;
        byte[] bArr = new byte[1024];
        if (z) {
            try {
                instance = MessageDigest.getInstance("MD5");
            } catch (NoSuchAlgorithmException e) {
                e.printStackTrace();
            }
            fileOutputStream = getAssetOutputString(str);
            while (true) {
                read = inputStream.read(bArr);
                if (read > 0) {
                    break;
                }
                if (z && instance != null) {
                    instance.update(bArr);
                }
                fileOutputStream.write(bArr, 0, read);
            }
            fileOutputStream.flush();
            if (fileOutputStream != null) {
                try {
                    fileOutputStream.close();
                } catch (Exception e2) {
                }
            }
            String a = m181a();
            String a2 = (z || instance == null) ? a : m182a(str, a, m183a(instance));
            return a2 + str;
        }
        instance = null;
        try {
            fileOutputStream = getAssetOutputString(str);
            while (true) {
                read = inputStream.read(bArr);
                if (read > 0) {
                    break;
                }
                instance.update(bArr);
                fileOutputStream.write(bArr, 0, read);
            }
            fileOutputStream.flush();
            if (fileOutputStream != null) {
                fileOutputStream.close();
            }
            String a3 = m181a();
            if (z) {
            }
            return a2 + str;
        } catch (Throwable th) {
            if (fileOutputStream != null) {
                try {
                    fileOutputStream.close();
                } catch (Exception e3) {
                }
            }
        }
    }

    public String writeToDiskWrap(InputStream inputStream, String str, boolean z, String str2, String str3, String str4) {
        MessageDigest instance;
        ByteArrayOutputStream byteArrayOutputStream;
        int read;
        String byteArrayOutputStream2;
        boolean z2;
        StringBuffer stringBuffer;
        int indexOf;
        StringBuffer stringBuffer2;
        String a;
        FileOutputStream fileOutputStream = null;
        byte[] bArr = new byte[1024];
        if (z) {
            try {
                instance = MessageDigest.getInstance("MD5");
            } catch (NoSuchAlgorithmException e) {
                e.printStackTrace();
            }
            byteArrayOutputStream = new ByteArrayOutputStream();
            while (true) {
                try {
                    read = inputStream.read(bArr);
                    if (read > 0) {
                        break;
                    }
                    if (z && instance != null) {
                        instance.update(bArr);
                    }
                    byteArrayOutputStream.write(bArr, 0, read);
                } catch (Exception e2) {
                    AdLog.printStackTrace(AdController.LB_LOG, e2);
                } catch (Throwable th) {
                    try {
                        byteArrayOutputStream.close();
                    } catch (Exception e3) {
                    }
                    if (fileOutputStream != null) {
                        try {
                            fileOutputStream.close();
                        } catch (Exception e4) {
                        }
                    }
                }
            }
            byteArrayOutputStream2 = byteArrayOutputStream.toString();
            z2 = byteArrayOutputStream2.indexOf("</html>") < 0;
            Log.d("html", byteArrayOutputStream2 + ", hasHTMLWrap = " + z2);
            if (z2) {
                Object obj = fileOutputStream;
            } else {
                stringBuffer = new StringBuffer(byteArrayOutputStream2);
                indexOf = stringBuffer.indexOf("ormma.js");
                if (indexOf > 0) {
                    stringBuffer.replace(indexOf, indexOf + 8, "file://" + str4);
                }
                try {
                    indexOf = stringBuffer.indexOf("mraid.js");
                    if (indexOf > 0) {
                        stringBuffer.replace(indexOf, indexOf + 8, "file://" + str4);
                    }
                    stringBuffer2 = stringBuffer;
                } catch (Exception e22) {
                    AdLog.printStackTrace(AdController.LB_LOG, e22);
                    stringBuffer2 = stringBuffer;
                }
            }
            Log.d("AdView", "Whole HTML Buffer = " + stringBuffer2);
            fileOutputStream = getAssetOutputString(str);
            if (!z2) {
                fileOutputStream.write("<html>".getBytes());
                fileOutputStream.write("<head>".getBytes());
                fileOutputStream.write("<meta name='viewport' content='user-scalable=no initial-scale=1.0' />".getBytes());
                fileOutputStream.write("<title>Advertisement</title> ".getBytes());
                fileOutputStream.write(("<script src=\"file://" + str3 + "\" type=\"text/javascript\"></script>").getBytes());
                fileOutputStream.write(("<script src=\"file://" + str4 + "\" type=\"text/javascript\"></script>").getBytes());
                if (str2 != null) {
                    fileOutputStream.write("<script type=\"text/javascript\">".getBytes());
                    fileOutputStream.write(str2.getBytes());
                    fileOutputStream.write("</script>".getBytes());
                }
                fileOutputStream.write("</head>".getBytes());
                fileOutputStream.write("<body style=\"margin:0; padding:0; overflow:hidden; background-color:transparent;\">".getBytes());
                fileOutputStream.write("<div align=\"center\"> ".getBytes());
            }
            if (z2) {
                fileOutputStream.write(byteArrayOutputStream.toByteArray());
            } else {
                fileOutputStream.write(stringBuffer2.toString().getBytes());
            }
            if (!z2) {
                fileOutputStream.write("</div> ".getBytes());
                fileOutputStream.write("</body> ".getBytes());
                fileOutputStream.write("</html> ".getBytes());
            }
            fileOutputStream.flush();
            byteArrayOutputStream.close();
            if (fileOutputStream != null) {
                try {
                    fileOutputStream.close();
                } catch (Exception e5) {
                }
            }
            a = m181a();
            return (z || instance == null) ? a : m182a(str, a, m183a(instance));
        }
        Object obj2 = fileOutputStream;
        byteArrayOutputStream = new ByteArrayOutputStream();
        while (true) {
            read = inputStream.read(bArr);
            if (read > 0) {
                break;
            }
            instance.update(bArr);
            byteArrayOutputStream.write(bArr, 0, read);
        }
        byteArrayOutputStream2 = byteArrayOutputStream.toString();
        if (byteArrayOutputStream2.indexOf("</html>") < 0) {
        }
        Log.d("html", byteArrayOutputStream2 + ", hasHTMLWrap = " + z2);
        if (z2) {
            Object obj3 = fileOutputStream;
        } else {
            stringBuffer = new StringBuffer(byteArrayOutputStream2);
            indexOf = stringBuffer.indexOf("ormma.js");
            if (indexOf > 0) {
                stringBuffer.replace(indexOf, indexOf + 8, "file://" + str4);
            }
            indexOf = stringBuffer.indexOf("mraid.js");
            if (indexOf > 0) {
                stringBuffer.replace(indexOf, indexOf + 8, "file://" + str4);
            }
            stringBuffer2 = stringBuffer;
        }
        Log.d("AdView", "Whole HTML Buffer = " + stringBuffer2);
        fileOutputStream = getAssetOutputString(str);
        if (z2) {
            fileOutputStream.write("<html>".getBytes());
            fileOutputStream.write("<head>".getBytes());
            fileOutputStream.write("<meta name='viewport' content='user-scalable=no initial-scale=1.0' />".getBytes());
            fileOutputStream.write("<title>Advertisement</title> ".getBytes());
            fileOutputStream.write(("<script src=\"file://" + str3 + "\" type=\"text/javascript\"></script>").getBytes());
            fileOutputStream.write(("<script src=\"file://" + str4 + "\" type=\"text/javascript\"></script>").getBytes());
            if (str2 != null) {
                fileOutputStream.write("<script type=\"text/javascript\">".getBytes());
                fileOutputStream.write(str2.getBytes());
                fileOutputStream.write("</script>".getBytes());
            }
            fileOutputStream.write("</head>".getBytes());
            fileOutputStream.write("<body style=\"margin:0; padding:0; overflow:hidden; background-color:transparent;\">".getBytes());
            fileOutputStream.write("<div align=\"center\"> ".getBytes());
        }
        if (z2) {
            fileOutputStream.write(stringBuffer2.toString().getBytes());
        } else {
            fileOutputStream.write(byteArrayOutputStream.toByteArray());
        }
        if (z2) {
            fileOutputStream.write("</div> ".getBytes());
            fileOutputStream.write("</body> ".getBytes());
            fileOutputStream.write("</html> ".getBytes());
        }
        fileOutputStream.flush();
        try {
            byteArrayOutputStream.close();
        } catch (Exception e6) {
        }
        if (fileOutputStream != null) {
            fileOutputStream.close();
        }
        a = m181a();
        if (z) {
        }
    }
}
