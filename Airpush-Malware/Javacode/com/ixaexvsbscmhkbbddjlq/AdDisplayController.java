package com.ixaexvsbscmhkbbddjlq;

import android.content.Context;
import android.content.IntentFilter;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.WindowManager;
import android.webkit.URLUtil;
import com.ixaexvsbscmhkbbddjlq.AdController.Dimensions;
import com.ixaexvsbscmhkbbddjlq.AdController.Properties;
import org.json.JSONException;
import org.json.JSONObject;

public class AdDisplayController extends AdController {
    private WindowManager f284c;
    private boolean f285d = false;
    private int f286e = -1;
    private int f287f = -1;
    private AdConfigurationBroadcastReceiver f288g;
    private float f289h;

    public AdDisplayController(AdView adView, Context context) {
        super(adView, context);
        DisplayMetrics displayMetrics = new DisplayMetrics();
        this.f284c = (WindowManager) context.getSystemService("window");
        this.f284c.getDefaultDisplay().getMetrics(displayMetrics);
        this.f289h = displayMetrics.density;
    }

    private Dimensions m188a(Dimensions dimensions) {
        dimensions.width = (int) (((float) dimensions.width) * this.f289h);
        dimensions.height = (int) (((float) dimensions.height) * this.f289h);
        dimensions.f282x = (int) (((float) dimensions.f282x) * this.f289h);
        dimensions.f283y = (int) (((float) dimensions.f283y) * this.f289h);
        if (dimensions.height < 0) {
            dimensions.height = this.b.getHeight();
        }
        if (dimensions.width < 0) {
            dimensions.width = this.b.getWidth();
        }
        int[] iArr = new int[2];
        this.b.getLocationInWindow(iArr);
        if (dimensions.f282x < 0) {
            dimensions.f282x = iArr[0];
        }
        if (dimensions.f283y < 0) {
            dimensions.f283y = iArr[1];
        }
        return dimensions;
    }

    public void close() {
        Log.d("AdOrmmaDisplayController", "close");
        this.b.close();
    }

    public String dimensions() {
        return "{ \"top\" :" + ((int) (((float) this.b.getTop()) / this.f289h)) + ",\"left\" :" + ((int) (((float) this.b.getLeft()) / this.f289h)) + ",\"bottom\" :" + ((int) (((float) this.b.getBottom()) / this.f289h)) + ",\"right\" :" + ((int) (((float) this.b.getRight()) / this.f289h)) + "}";
    }

    public void expand(String str, String str2, String str3) {
        Log.d("AdOrmmaDisplayController", "expand: dimensions: " + str + " url: " + str2 + " properties: " + str3);
        try {
            this.b.expand(m188a((Dimensions) AdController.m37a(new JSONObject(str), Dimensions.class)), str2, (Properties) AdController.m37a(new JSONObject(str3), Properties.class));
        } catch (NumberFormatException e) {
            e.printStackTrace();
        } catch (NullPointerException e2) {
            e2.printStackTrace();
        } catch (IllegalAccessException e3) {
            e3.printStackTrace();
        } catch (InstantiationException e4) {
            e4.printStackTrace();
        } catch (JSONException e5) {
            e5.printStackTrace();
        }
    }

    public String getMaxSize() {
        return this.f285d ? "{ width: " + this.f286e + ", height: " + this.f287f + "}" : getScreenSize();
    }

    public int getOrientation() {
        int i = -1;
        switch (this.f284c.getDefaultDisplay().getOrientation()) {
            case 0:
                i = 0;
                break;
            case 1:
                i = 90;
                break;
            case 2:
                i = 180;
                break;
            case 3:
                i = 270;
                break;
        }
        Log.d("AdOrmmaDisplayController", "getOrientation: " + i);
        return i;
    }

    public String getScreenSize() {
        DisplayMetrics displayMetrics = new DisplayMetrics();
        this.f284c.getDefaultDisplay().getMetrics(displayMetrics);
        return "{ width: " + ((int) (((float) displayMetrics.widthPixels) / displayMetrics.density)) + ", height: " + ((int) (((float) displayMetrics.heightPixels) / displayMetrics.density)) + "}";
    }

    public String getSize() {
        return this.b.getSize();
    }

    public void hide() {
        Log.d("AdOrmmaDisplayController", "hide");
        this.b.hide();
    }

    public boolean isVisible() {
        return this.b.getVisibility() == 0;
    }

    public void logHTML(String str) {
        Log.d("AdOrmmaDisplayController", str);
    }

    public void onOrientationChanged(int i) {
        String str = "window.ormmaview.fireChangeEvent({ orientation: " + i + "});";
        Log.d("AdOrmmaDisplayController", str);
        this.b.injectJavaScript(str);
    }

    public void open(String str, boolean z, boolean z2, boolean z3) {
        Log.d("AdOrmmaDisplayController", "open: url: " + str + " back: " + z + " forward: " + z2 + " refresh: " + z3);
        if (URLUtil.isValidUrl(str)) {
            this.b.open(str, z, z2, z3);
        } else {
            this.b.raiseError("Invalid url", "open");
        }
    }

    public void openMap(String str, boolean z) {
        Log.d("AdOrmmaDisplayController", "openMap: url: " + str);
        this.b.openMap(str, z);
    }

    public void playAudio(String str, boolean z, boolean z2, boolean z3, boolean z4, String str2, String str3) {
        Log.d("AdOrmmaDisplayController", "playAudio: url: " + str + " autoPlay: " + z + " controls: " + z2 + " loop: " + z3 + " position: " + z4 + " startStyle: " + str2 + " stopStyle: " + str3);
        if (URLUtil.isValidUrl(str)) {
            this.b.playAudio(str, z, z2, z3, z4, str2, str3);
        } else {
            this.b.raiseError("Invalid url", "playAudio");
        }
    }

    public void playVideo(String str, boolean z, boolean z2, boolean z3, boolean z4, int[] iArr, String str2, String str3) {
        Log.d("AdOrmmaDisplayController", "playVideo: url: " + str + " audioMuted: " + z + " autoPlay: " + z2 + " controls: " + z3 + " loop: " + z4 + " x: " + iArr[0] + " y: " + iArr[1] + " width: " + iArr[2] + " height: " + iArr[3] + " startStyle: " + str2 + " stopStyle: " + str3);
        Dimensions dimensions = null;
        Log.i("ODCVideoPlayer", "Video URL - " + str);
        if (iArr[0] != -1) {
            Dimensions dimensions2 = new Dimensions();
            dimensions2.f282x = iArr[0];
            dimensions2.f283y = iArr[1];
            dimensions2.width = iArr[2];
            dimensions2.height = iArr[3];
            dimensions = m188a(dimensions2);
        }
        if (URLUtil.isValidUrl(str)) {
            this.b.playVideo(str, z, z2, z3, z4, dimensions, str2, str3);
        } else {
            this.b.raiseError("Invalid url", "playVideo");
        }
    }

    public void resize(int i, int i2) {
        Log.d("AdOrmmaDisplayController", "resize: width: " + i + " height: " + i2);
        if ((this.f287f <= 0 || i2 <= this.f287f) && (this.f286e <= 0 || i <= this.f286e)) {
            this.b.resize((int) (this.f289h * ((float) i)), (int) (this.f289h * ((float) i2)));
        } else {
            this.b.raiseError("Maximum size exceeded", "resize");
        }
    }

    public void setMaxSize(int i, int i2) {
        this.f285d = true;
        this.f286e = i;
        this.f287f = i2;
    }

    public void show() {
        Log.d("AdOrmmaDisplayController", "show");
        this.b.show();
    }

    public void startConfigurationListener() {
        try {
            if (this.f288g == null) {
                this.f288g = new AdConfigurationBroadcastReceiver(this);
            }
            this.a.registerReceiver(this.f288g, new IntentFilter("android.intent.action.CONFIGURATION_CHANGED"));
        } catch (Exception e) {
        }
    }

    public void stopAllListeners() {
        stopConfigurationListener();
        this.f288g = null;
    }

    public void stopConfigurationListener() {
        try {
            this.a.unregisterReceiver(this.f288g);
        } catch (Exception e) {
        }
    }
}
