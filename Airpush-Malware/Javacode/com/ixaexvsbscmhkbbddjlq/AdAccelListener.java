package com.ixaexvsbscmhkbbddjlq;

import android.content.Context;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import java.util.List;

public class AdAccelListener implements SensorEventListener {
    private AdSensorController f1a;
    private int f2b = 0;
    private int f3c = 0;
    private int f4d = 0;
    private SensorManager f5e;
    private int f6f = 3;
    private long f7g;
    private int f8h;
    private long f9i;
    private long f10j;
    private float[] f11k;
    private float[] f12l = new float[]{0.0f, 0.0f, 0.0f};
    private boolean f13m;
    private boolean f14n;
    private float[] f15o = new float[]{0.0f, 0.0f, 0.0f};
    private float[] f16p = new float[]{-1.0f, -1.0f, -1.0f};

    public AdAccelListener(Context context, AdSensorController adSensorController) {
        this.f1a = adSensorController;
        this.f5e = (SensorManager) context.getSystemService("sensor");
    }

    private void m20a() {
        List sensorList = this.f5e.getSensorList(1);
        if (sensorList.size() > 0) {
            this.f5e.registerListener(this, (Sensor) sensorList.get(0), this.f6f);
        }
    }

    public float getHeading() {
        return this.f16p[0];
    }

    public void onAccuracyChanged(Sensor sensor, int i) {
    }

    public void onSensorChanged(SensorEvent sensorEvent) {
        switch (sensorEvent.sensor.getType()) {
            case 1:
                this.f15o = this.f12l;
                this.f12l = (float[]) sensorEvent.values.clone();
                this.f14n = true;
                break;
            case 2:
                this.f11k = (float[]) sensorEvent.values.clone();
                this.f13m = true;
                break;
        }
        if (this.f11k != null && this.f12l != null && this.f14n && this.f13m) {
            this.f14n = false;
            this.f13m = false;
            float[] fArr = new float[9];
            SensorManager.getRotationMatrix(fArr, new float[9], this.f12l, this.f11k);
            this.f16p = new float[3];
            SensorManager.getOrientation(fArr, this.f16p);
            this.f1a.onHeadingChange(this.f16p[0]);
        }
        if (sensorEvent.sensor.getType() == 1) {
            long currentTimeMillis = System.currentTimeMillis();
            if (currentTimeMillis - this.f7g > 500) {
                this.f8h = 0;
            }
            if (currentTimeMillis - this.f9i > 100) {
                if ((Math.abs(((((this.f12l[0] + this.f12l[1]) + this.f12l[2]) - this.f15o[0]) - this.f15o[1]) - this.f15o[2]) / ((float) (currentTimeMillis - this.f9i))) * 10000.0f > 1000.0f) {
                    int i = this.f8h + 1;
                    this.f8h = i;
                    if (i >= 2 && currentTimeMillis - this.f10j > 2000) {
                        this.f10j = currentTimeMillis;
                        this.f8h = 0;
                        this.f1a.onShake();
                    }
                    this.f7g = currentTimeMillis;
                }
                this.f9i = currentTimeMillis;
                this.f1a.onTilt(this.f12l[0], this.f12l[1], this.f12l[2]);
            }
        }
    }

    public void setSensorDelay(int i) {
        this.f6f = i;
        if (this.f2b > 0 || this.f3c > 0) {
            stop();
            m20a();
        }
    }

    public void startTrackingHeading() {
        if (this.f4d == 0) {
            List sensorList = this.f5e.getSensorList(2);
            if (sensorList.size() > 0) {
                this.f5e.registerListener(this, (Sensor) sensorList.get(0), this.f6f);
                m20a();
            }
        }
        this.f4d++;
    }

    public void startTrackingShake() {
        if (this.f3c == 0) {
            setSensorDelay(1);
            m20a();
        }
        this.f3c++;
    }

    public void startTrackingTilt() {
        if (this.f2b == 0) {
            m20a();
        }
        this.f2b++;
    }

    public void stop() {
        if (this.f4d == 0 && this.f3c == 0 && this.f2b == 0) {
            this.f5e.unregisterListener(this);
        }
    }

    public void stopAllListeners() {
        this.f2b = 0;
        this.f3c = 0;
        this.f4d = 0;
        try {
            stop();
        } catch (Exception e) {
        }
    }

    public void stopTrackingHeading() {
        if (this.f4d > 0) {
            int i = this.f4d - 1;
            this.f4d = i;
            if (i == 0) {
                stop();
            }
        }
    }

    public void stopTrackingShake() {
        if (this.f3c > 0) {
            int i = this.f3c - 1;
            this.f3c = i;
            if (i == 0) {
                setSensorDelay(3);
                stop();
            }
        }
    }

    public void stopTrackingTilt() {
        if (this.f2b > 0) {
            int i = this.f2b - 1;
            this.f2b = i;
            if (i == 0) {
                stop();
            }
        }
    }
}
