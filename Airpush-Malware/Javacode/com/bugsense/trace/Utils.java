package com.bugsense.trace;

import android.app.ActivityManager.MemoryInfo;
import android.content.Context;
import android.location.LocationManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Environment;
import android.os.Process;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Display;
import android.view.WindowManager;
import com.adsdk.sdk.Const;
import com.ixaexvsbscmhkbbddjlq.AdController;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Random;
import java.util.TimeZone;

public class Utils {
    private static final char[] DIGITS = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
    public static final int STATE_DONT_KNOW = 2;
    public static final int STATE_OFF = 0;
    public static final int STATE_ON = 1;
    static final Runtime rt = Runtime.getRuntime();

    private static int CheckNetworkConnection(Context context, String str) {
        int i = 0;
        if (context.getPackageManager().checkPermission("android.permission.ACCESS_NETWORK_STATE", C0069G.APP_PACKAGE) != 0) {
            return 2;
        }
        NetworkInfo[] allNetworkInfo = ((ConnectivityManager) context.getSystemService("connectivity")).getAllNetworkInfo();
        int length = allNetworkInfo.length;
        int i2 = 0;
        while (i < length) {
            NetworkInfo networkInfo = allNetworkInfo[i];
            if (networkInfo.getTypeName().equalsIgnoreCase(str) && networkInfo.isConnected()) {
                i2 = 1;
            }
            i++;
        }
        return i2;
    }

    public static String MD5(String str) throws Exception {
        MessageDigest instance = MessageDigest.getInstance("MD5");
        instance.update(str.getBytes(), 0, str.length());
        return new BigInteger(1, instance.digest()).toString(16);
    }

    protected static String[] ScreenProperties(Context context) {
        String[] strArr = new String[]{"Not available", "Not available", "Not available", "Not available", "Not available"};
        DisplayMetrics displayMetrics = new DisplayMetrics();
        Display defaultDisplay = ((WindowManager) context.getSystemService("window")).getDefaultDisplay();
        int width = defaultDisplay.getWidth();
        int height = defaultDisplay.getHeight();
        int orientation = defaultDisplay.getOrientation();
        strArr[0] = Integer.toString(width);
        strArr[1] = Integer.toString(height);
        String str = "";
        switch (orientation) {
            case 0:
                str = AdController.STYLE_NORMAL;
                break;
            case 1:
                str = IMraid.MRAID_EVENT_IMPRESSION;
                break;
            case 2:
                str = "180";
                break;
            case 3:
                str = "270";
                break;
        }
        strArr[2] = str;
        defaultDisplay.getMetrics(displayMetrics);
        strArr[3] = Float.toString(displayMetrics.xdpi);
        strArr[4] = Float.toString(displayMetrics.ydpi);
        return strArr;
    }

    protected static boolean checkForRoot() {
        for (String str : new String[]{"/sbin/", "/system/bin/", "/system/xbin/", "/data/local/xbin/", "/data/local/bin/", "/system/sd/xbin/", "/system/bin/failsafe/", "/data/local/"}) {
            if (new File(str + "su").exists()) {
                return true;
            }
        }
        return false;
    }

    private static char[] encodeHex(byte[] bArr) {
        int i = 0;
        int length = bArr.length;
        char[] cArr = new char[(length << 1)];
        for (int i2 = 0; i2 < length; i2++) {
            int i3 = i + 1;
            cArr[i] = DIGITS[(bArr[i2] & 240) >>> 4];
            i = i3 + 1;
            cArr[i3] = DIGITS[bArr[i2] & 15];
        }
        return cArr;
    }

    public static final String exceedLimitString(String str) {
        return (str == null || str.length() < 1) ? "" : (str.length() == 128 || str.length() <= 128) ? str : str.substring(0, 125) + "...";
    }

    private static String generateUid() {
        String l = Long.valueOf(new Date().getTime()).toString();
        String obj = new Object().toString();
        long nanoTime = System.nanoTime();
        try {
            Thread.sleep(256, 42);
        } catch (InterruptedException e) {
        }
        String l2 = Long.valueOf(System.nanoTime() - nanoTime).toString();
        obj = l + obj + l2 + Integer.valueOf((int) (new Random(System.currentTimeMillis()).nextDouble() * 65535.0d)).toString() + IConstants.ANDROID_ID;
        byte[] bArr = null;
        try {
            bArr = MessageDigest.getInstance("MD5").digest(obj.getBytes(Const.ENCODING));
        } catch (UnsupportedEncodingException e2) {
            e2.printStackTrace();
        } catch (NoSuchAlgorithmException e3) {
            e3.printStackTrace();
        }
        return new String(encodeHex(bArr));
    }

    public static String getCPU() {
        Process exec;
        String str;
        Process process;
        String str2;
        IOException iOException;
        Throwable th;
        BufferedReader bufferedReader = null;
        String str3 = "unknown";
        CharSequence valueOf = String.valueOf(Process.myPid());
        try {
            exec = Runtime.getRuntime().exec("top -d 1 -n 1");
            try {
                BufferedReader bufferedReader2 = new BufferedReader(new InputStreamReader(exec.getInputStream()));
                str = str3;
                while (true) {
                    try {
                        String readLine = bufferedReader2.readLine();
                        if (readLine == null) {
                            try {
                                break;
                            } catch (IOException e) {
                                Log.e("executeTop", "error in closing and destroying top process");
                                e.printStackTrace();
                            }
                        } else if (readLine.contains(valueOf)) {
                            String[] split = readLine.split(" ");
                            if (split != null) {
                                int i = 0;
                                while (i < split.length) {
                                    if (split[i] != null && split[i].contains("%")) {
                                        str = split[i];
                                        break;
                                    }
                                    i++;
                                }
                            }
                        }
                    } catch (IOException e2) {
                        IOException iOException2 = e2;
                        bufferedReader = bufferedReader2;
                        process = exec;
                        str2 = str;
                        iOException = iOException2;
                    } catch (Throwable th2) {
                        th = th2;
                        bufferedReader = bufferedReader2;
                    }
                }
                bufferedReader2.close();
                exec.destroy();
            } catch (IOException e3) {
                iOException = e3;
                process = exec;
                str2 = str3;
                try {
                    Log.e("executeTop", "error in getting first line of top");
                    iOException.printStackTrace();
                    try {
                        bufferedReader.close();
                        process.destroy();
                        str = str2;
                    } catch (IOException iOException3) {
                        Log.e("executeTop", "error in closing and destroying top process");
                        iOException3.printStackTrace();
                        str = str2;
                    }
                    str = str.substring(0, str.length() - 1);
                    return str;
                } catch (Throwable th3) {
                    th = th3;
                    exec = process;
                    try {
                        bufferedReader.close();
                        exec.destroy();
                    } catch (IOException e22) {
                        Log.e("executeTop", "error in closing and destroying top process");
                        e22.printStackTrace();
                    }
                    throw th;
                }
            } catch (Throwable th4) {
                th = th4;
                bufferedReader.close();
                exec.destroy();
                throw th;
            }
        } catch (IOException e4) {
            iOException3 = e4;
            process = null;
            str2 = str3;
            Log.e("executeTop", "error in getting first line of top");
            iOException3.printStackTrace();
            bufferedReader.close();
            process.destroy();
            str = str2;
            str = str.substring(0, str.length() - 1);
            return str;
        } catch (Throwable th5) {
            th = th5;
            exec = null;
            bufferedReader.close();
            exec.destroy();
            throw th;
        }
        try {
            str = str.substring(0, str.length() - 1);
        } catch (Exception e5) {
            e5.printStackTrace();
        }
        return str;
    }

    public static String getMem() {
        MemoryInfo memoryInfo = new MemoryInfo();
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(String.format("%.3f", new Object[]{Double.valueOf(((double) rt.freeMemory()) / 1048576.0d)}) + ":");
        stringBuilder.append(String.format("%.3f", new Object[]{Double.valueOf(((double) rt.maxMemory()) / 1048576.0d)}) + ":");
        stringBuilder.append(String.format("%.3f", new Object[]{Double.valueOf(((double) rt.totalMemory()) / 1048576.0d)}) + ":");
        stringBuilder.append(String.format("%.3f", new Object[]{Double.valueOf(((double) memoryInfo.availMem) / 1048576.0d)}) + ":");
        stringBuilder.append(String.format("%.3f", new Object[]{Double.valueOf(((double) memoryInfo.threshold) / 1048576.0d)}) + ":");
        stringBuilder.append(String.valueOf(memoryInfo.lowMemory));
        return stringBuilder.toString();
    }

    public static final String getTime() {
        String valueOf = String.valueOf(System.currentTimeMillis());
        try {
            valueOf = String.valueOf(Calendar.getInstance(TimeZone.getTimeZone("UTC")).getTimeInMillis() / 1000);
        } catch (Exception e) {
        }
        return valueOf;
    }

    private static boolean hasStorage(boolean z) {
        return Environment.getExternalStorageState().equals("mounted") ? true : !z && "mounted_ro".equals(Environment.getExternalStorageState());
    }

    protected static int isGPSOn(Context context) {
        return context.getPackageManager().checkPermission("android.permission.ACCESS_FINE_LOCATION", C0069G.APP_PACKAGE) == 0 ? !((LocationManager) context.getSystemService("location")).isProviderEnabled("gps") ? 0 : 1 : 2;
    }

    protected static int isMobileNetworkOn(Context context) {
        return CheckNetworkConnection(context, Const.CONNECTION_TYPE_MOBILE_UNKNOWN);
    }

    public static boolean isOnWifi(Context context) {
        return CheckNetworkConnection(context, Const.CONNECTION_TYPE_WIFI) == 1;
    }

    protected static int isWifiOn(Context context) {
        return CheckNetworkConnection(context, Const.CONNECTION_TYPE_WIFI);
    }

    /* JADX WARNING: inconsistent code. */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public static synchronized java.lang.String manageUid(android.content.Context r11) {
        /*
        r3 = 0;
        r4 = 1;
        r1 = 0;
        r10 = 32;
        r5 = com.bugsense.trace.Utils.class;
        monitor-enter(r5);
        r0 = com.bugsense.trace.C0069G.UID;	 Catch:{ all -> 0x0100 }
        if (r0 == 0) goto L_0x0018;
    L_0x000c:
        r0 = com.bugsense.trace.C0069G.UID;	 Catch:{ all -> 0x0100 }
        r0 = r0.length();	 Catch:{ all -> 0x0100 }
        if (r0 != r10) goto L_0x0018;
    L_0x0014:
        r0 = com.bugsense.trace.C0069G.UID;	 Catch:{ all -> 0x0100 }
    L_0x0016:
        monitor-exit(r5);
        return r0;
    L_0x0018:
        if (r11 != 0) goto L_0x0024;
    L_0x001a:
        r0 = com.bugsense.trace.C0069G.TAG;	 Catch:{ all -> 0x0100 }
        r1 = "Context is null!";
        android.util.Log.e(r0, r1);	 Catch:{ all -> 0x0100 }
        r0 = "12345678901234567890123456789012";
        goto L_0x0016;
    L_0x0024:
        r0 = "";
        r6 = new java.io.File;	 Catch:{ all -> 0x0100 }
        r2 = new java.lang.StringBuilder;	 Catch:{ all -> 0x0100 }
        r2.<init>();	 Catch:{ all -> 0x0100 }
        r7 = android.os.Environment.getExternalStorageDirectory();	 Catch:{ all -> 0x0100 }
        r2 = r2.append(r7);	 Catch:{ all -> 0x0100 }
        r7 = java.io.File.separator;	 Catch:{ all -> 0x0100 }
        r2 = r2.append(r7);	 Catch:{ all -> 0x0100 }
        r7 = ".bugsense";
        r2 = r2.append(r7);	 Catch:{ all -> 0x0100 }
        r2 = r2.toString();	 Catch:{ all -> 0x0100 }
        r6.<init>(r2);	 Catch:{ all -> 0x0100 }
        r7 = new java.io.File;	 Catch:{ all -> 0x0100 }
        r2 = new java.lang.StringBuilder;	 Catch:{ all -> 0x0100 }
        r2.<init>();	 Catch:{ all -> 0x0100 }
        r8 = r11.getFilesDir();	 Catch:{ all -> 0x0100 }
        r8 = r8.getAbsolutePath();	 Catch:{ all -> 0x0100 }
        r2 = r2.append(r8);	 Catch:{ all -> 0x0100 }
        r8 = java.io.File.separator;	 Catch:{ all -> 0x0100 }
        r2 = r2.append(r8);	 Catch:{ all -> 0x0100 }
        r8 = ".bugsense";
        r2 = r2.append(r8);	 Catch:{ all -> 0x0100 }
        r2 = r2.toString();	 Catch:{ all -> 0x0100 }
        r7.<init>(r2);	 Catch:{ all -> 0x0100 }
        if (r6 == 0) goto L_0x0097;
    L_0x0070:
        r2 = r6.exists();	 Catch:{ all -> 0x0100 }
        if (r2 == 0) goto L_0x0097;
    L_0x0076:
        r2 = new java.io.BufferedReader;	 Catch:{ Exception -> 0x0111 }
        r8 = new java.io.FileReader;	 Catch:{ Exception -> 0x0111 }
        r9 = r6.getAbsolutePath();	 Catch:{ Exception -> 0x0111 }
        r8.<init>(r9);	 Catch:{ Exception -> 0x0111 }
        r2.<init>(r8);	 Catch:{ Exception -> 0x0111 }
        if (r2 == 0) goto L_0x008a;
    L_0x0086:
        r0 = r2.readLine();	 Catch:{ Exception -> 0x0115 }
    L_0x008a:
        r2.close();	 Catch:{ IOException -> 0x00fb }
    L_0x008d:
        if (r0 == 0) goto L_0x0095;
    L_0x008f:
        r2 = r0.length();	 Catch:{ all -> 0x0100 }
        if (r2 == r10) goto L_0x0097;
    L_0x0095:
        r0 = "";
    L_0x0097:
        if (r0 == 0) goto L_0x009f;
    L_0x0099:
        r2 = r0.length();	 Catch:{ all -> 0x0100 }
        if (r2 == r10) goto L_0x011c;
    L_0x009f:
        if (r7 == 0) goto L_0x011c;
    L_0x00a1:
        r2 = r7.exists();	 Catch:{ all -> 0x0100 }
        if (r2 == 0) goto L_0x011c;
    L_0x00a7:
        r2 = new java.io.BufferedReader;	 Catch:{ Exception -> 0x0103 }
        r8 = new java.io.FileReader;	 Catch:{ Exception -> 0x0103 }
        r9 = r7.getAbsolutePath();	 Catch:{ Exception -> 0x0103 }
        r8.<init>(r9);	 Catch:{ Exception -> 0x0103 }
        r2.<init>(r8);	 Catch:{ Exception -> 0x0103 }
        if (r2 == 0) goto L_0x00bb;
    L_0x00b7:
        r0 = r2.readLine();	 Catch:{ Exception -> 0x010e }
    L_0x00bb:
        r2.close();	 Catch:{ IOException -> 0x0106 }
    L_0x00be:
        if (r0 == 0) goto L_0x00c6;
    L_0x00c0:
        r2 = r0.length();	 Catch:{ all -> 0x0100 }
        if (r2 == r10) goto L_0x011c;
    L_0x00c6:
        r0 = "";
        r2 = r0;
    L_0x00c9:
        if (r2 == 0) goto L_0x00d1;
    L_0x00cb:
        r0 = r2.length();	 Catch:{ all -> 0x0100 }
        if (r0 == r10) goto L_0x011a;
    L_0x00d1:
        r2 = generateUid();	 Catch:{ all -> 0x0100 }
        r0 = r4;
    L_0x00d6:
        com.bugsense.trace.C0069G.UID = r2;	 Catch:{ all -> 0x0100 }
        if (r0 == 0) goto L_0x00f8;
    L_0x00da:
        r0 = 1;
        r0 = hasStorage(r0);	 Catch:{ Exception -> 0x010b }
        if (r0 == 0) goto L_0x0118;
    L_0x00e1:
        r0 = r11.getPackageManager();	 Catch:{ Exception -> 0x010b }
        r3 = "android.permission.WRITE_EXTERNAL_STORAGE";
        r4 = com.bugsense.trace.C0069G.APP_PACKAGE;	 Catch:{ Exception -> 0x010b }
        r0 = r0.checkPermission(r3, r4);	 Catch:{ Exception -> 0x010b }
        if (r0 != 0) goto L_0x0118;
    L_0x00ef:
        r0 = saveUid(r6, r2);	 Catch:{ Exception -> 0x010b }
    L_0x00f3:
        if (r0 != 0) goto L_0x00f8;
    L_0x00f5:
        saveUid(r7, r2);	 Catch:{ all -> 0x0100 }
    L_0x00f8:
        r0 = r2;
        goto L_0x0016;
    L_0x00fb:
        r2 = move-exception;
        r2.printStackTrace();	 Catch:{ all -> 0x0100 }
        goto L_0x008d;
    L_0x0100:
        r0 = move-exception;
        monitor-exit(r5);
        throw r0;
    L_0x0103:
        r2 = move-exception;
    L_0x0104:
        r2 = r3;
        goto L_0x00bb;
    L_0x0106:
        r2 = move-exception;
        r2.printStackTrace();	 Catch:{ all -> 0x0100 }
        goto L_0x00be;
    L_0x010b:
        r0 = move-exception;
        r0 = r1;
        goto L_0x00f3;
    L_0x010e:
        r3 = move-exception;
        r3 = r2;
        goto L_0x0104;
    L_0x0111:
        r2 = move-exception;
        r2 = r3;
        goto L_0x008a;
    L_0x0115:
        r8 = move-exception;
        goto L_0x008a;
    L_0x0118:
        r0 = r1;
        goto L_0x00f3;
    L_0x011a:
        r0 = r1;
        goto L_0x00d6;
    L_0x011c:
        r2 = r0;
        goto L_0x00c9;
        */
        throw new UnsupportedOperationException("Method not decompiled: com.bugsense.trace.Utils.manageUid(android.content.Context):java.lang.String");
    }

    public static String readFile(String str) {
        Throwable th;
        StringBuilder stringBuilder = new StringBuilder();
        BufferedReader bufferedReader = null;
        BufferedReader bufferedReader2;
        try {
            bufferedReader2 = new BufferedReader(new FileReader(str));
            while (true) {
                try {
                    String readLine = bufferedReader2.readLine();
                    if (readLine == null) {
                        break;
                    }
                    stringBuilder.append(readLine);
                } catch (Exception e) {
                } catch (Throwable th2) {
                    Throwable th3 = th2;
                    bufferedReader = bufferedReader2;
                    th = th3;
                }
            }
            if (bufferedReader2 != null) {
                try {
                    bufferedReader2.close();
                } catch (IOException e2) {
                    e2.printStackTrace();
                }
            }
        } catch (Exception e3) {
            bufferedReader2 = null;
            if (bufferedReader2 != null) {
                try {
                    bufferedReader2.close();
                } catch (IOException e22) {
                    e22.printStackTrace();
                }
            }
            return stringBuilder.toString();
        } catch (Throwable th4) {
            th = th4;
            if (bufferedReader != null) {
                try {
                    bufferedReader.close();
                } catch (IOException e4) {
                    e4.printStackTrace();
                }
            }
            throw th;
        }
        return stringBuilder.toString();
    }

    public static String readLogs() {
        int i = C0069G.LOG_LINES;
        if (i < 0) {
            i = 100;
        }
        String str = C0069G.LOG_FILTER;
        StringBuilder stringBuilder = new StringBuilder();
        try {
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(Runtime.getRuntime().exec("logcat -d " + str).getInputStream()));
            List arrayList = new ArrayList();
            while (true) {
                str = bufferedReader.readLine();
                if (str == null) {
                    break;
                }
                arrayList.add(str);
            }
            if (arrayList.size() == 0) {
                return "You must add the android.permission.READ_LOGS permission to your manifest file!";
            }
            i = arrayList.size() - i;
            if (i < 0) {
                i = 0;
            }
            for (int i2 = i; i2 < arrayList.size(); i2++) {
                stringBuilder.append(((String) arrayList.get(i2)) + "\n");
            }
            return stringBuilder.toString();
        } catch (Exception e) {
            Log.e(C0069G.TAG, "Error reading logcat output!");
            if (BugSenseHandler.I_WANT_TO_DEBUG) {
                e.printStackTrace();
            }
            return e.getMessage();
        }
    }

    private static boolean saveUid(File file, String str) {
        PrintWriter printWriter;
        IOException e;
        Throwable th;
        if (file != null) {
            try {
                printWriter = new PrintWriter(file);
            } catch (IOException e2) {
                e = e2;
                printWriter = null;
                try {
                    Log.e(C0069G.TAG, "Cannot save uid");
                    if (BugSenseHandler.I_WANT_TO_DEBUG) {
                        Log.e(C0069G.TAG, "Cannot save uid, path= " + file);
                        e.printStackTrace();
                    }
                    if (printWriter != null) {
                        printWriter.close();
                    }
                    return false;
                } catch (Throwable th2) {
                    th = th2;
                    if (printWriter != null) {
                        printWriter.close();
                    }
                    throw th;
                }
            } catch (Throwable th3) {
                th = th3;
                printWriter = null;
                if (printWriter != null) {
                    printWriter.close();
                }
                throw th;
            }
            try {
                printWriter.println(str);
                printWriter.flush();
                if (printWriter == null) {
                    return true;
                }
                printWriter.close();
                return true;
            } catch (IOException e3) {
                e = e3;
                Log.e(C0069G.TAG, "Cannot save uid");
                if (BugSenseHandler.I_WANT_TO_DEBUG) {
                    Log.e(C0069G.TAG, "Cannot save uid, path= " + file);
                    e.printStackTrace();
                }
                if (printWriter != null) {
                    printWriter.close();
                }
                return false;
            }
        }
        return false;
    }
}
