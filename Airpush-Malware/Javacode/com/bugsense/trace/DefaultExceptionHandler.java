package com.bugsense.trace;

import android.app.ActivityManager.MemoryInfo;
import android.util.Log;
import com.bugsense.trace.models.CrashMechanism;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.Thread.UncaughtExceptionHandler;
import java.util.HashMap;
import java.util.Map;

public class DefaultExceptionHandler implements UncaughtExceptionHandler {
    private UncaughtExceptionHandler defaultExceptionHandler;

    public DefaultExceptionHandler(UncaughtExceptionHandler uncaughtExceptionHandler) {
        this.defaultExceptionHandler = uncaughtExceptionHandler;
    }

    public void uncaughtException(Thread thread, Throwable th) {
        String createJSONFromCrash;
        Writer stringWriter = new StringWriter();
        th.printStackTrace(new PrintWriter(stringWriter));
        long j = 0;
        try {
            j = System.currentTimeMillis() - C0069G.TIMESTAMP;
        } catch (Exception e) {
        }
        MemoryInfo memoryInfo = new MemoryInfo();
        Runtime runtime = Runtime.getRuntime();
        Map hashMap = new HashMap(6);
        hashMap.put("sysMemAvail", String.valueOf(((double) memoryInfo.availMem) / 1048576.0d));
        hashMap.put("sysMemLow", String.valueOf(memoryInfo.lowMemory));
        hashMap.put("sysMemThreshold", String.valueOf(((double) memoryInfo.threshold) / 1048576.0d));
        hashMap.put("appMemAvail", String.valueOf(((double) runtime.freeMemory()) / 1048576.0d));
        hashMap.put("appMemMax", String.valueOf(((double) runtime.maxMemory()) / 1048576.0d));
        hashMap.put("appMemTotal", String.valueOf(((double) runtime.totalMemory()) / 1048576.0d));
        String str = "";
        try {
            createJSONFromCrash = CrashMechanism.createJSONFromCrash(stringWriter.toString(), Utils.isWifiOn(BugSenseHandler.gContext), Utils.isMobileNetworkOn(BugSenseHandler.gContext), Utils.isGPSOn(BugSenseHandler.gContext), Utils.ScreenProperties(BugSenseHandler.gContext), Utils.getTime(), BugSenseHandler.getCrashExtraData(), null, 1, j, hashMap);
        } catch (Exception e2) {
            e2.printStackTrace();
            createJSONFromCrash = str;
        }
        CrashMechanism.transmitCrashASync(BugSenseHandler.gContext, createJSONFromCrash, 1);
        if (BugSenseHandler.I_WANT_TO_DEBUG) {
            Log.d(C0069G.TAG, stringWriter.toString());
        }
        if (BugSenseHandler.getCallback() != null) {
            BugSenseHandler.getCallback().lastBreath();
        }
        try {
            Thread.sleep(3000);
        } catch (InterruptedException e3) {
            e3.printStackTrace();
        }
        this.defaultExceptionHandler.uncaughtException(thread, th);
    }
}
