package com.bugsense.trace.models;

import android.content.Context;
import android.util.Log;
import com.adsdk.sdk.Const;
import com.bugsense.trace.BugSense;
import com.bugsense.trace.BugSenseHandler;
import com.bugsense.trace.C0069G;
import com.bugsense.trace.Utils;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import org.apache.http.HttpEntity;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.apache.http.params.HttpProtocolParams;
import org.json.JSONObject;

public final class CrashMechanism {
    public static final int CRASH = 1;
    public static final int HANDLEDEXCEPTION = 0;
    private static final int MAX_CRASHES = 5;
    private static final int MAX_EXCEPTIONS = 8;
    private static volatile CrashMechanism instance;

    public static String createJSONFromCrash(String str, int i, int i2, int i3, String[] strArr, String str2, Map<String, String> map, Map<String, String> map2, int i4, long j, Map<String, String> map3) throws Exception {
        JSONObject jSONObject = new JSONObject();
        JSONObject jSONObject2 = new JSONObject();
        JSONObject jSONObject3 = new JSONObject();
        JSONObject jSONObject4 = new JSONObject();
        JSONObject jSONObject5 = new JSONObject();
        JSONObject jSONObject6 = new JSONObject();
        JSONObject jSONObject7 = new JSONObject();
        jSONObject2.put("remote_ip", "");
        JSONObject jSONObject8 = new JSONObject();
        jSONObject8.put("appid", C0069G.APPID);
        jSONObject2.put("extra_data", jSONObject8);
        jSONObject.put("request", jSONObject2);
        BufferedReader bufferedReader = new BufferedReader(new StringReader(str));
        if (str2 == null) {
            jSONObject3.put("occured_at", bufferedReader.readLine());
        } else {
            jSONObject3.put("occured_at", str2);
        }
        jSONObject3.put("message", bufferedReader.readLine());
        Object readLine = bufferedReader.readLine();
        try {
            readLine = readLine.substring(readLine.lastIndexOf("(") + 1, readLine.lastIndexOf(")"));
        } catch (Exception e) {
        }
        jSONObject3.put("where", readLine);
        jSONObject3.put("handled", i4);
        jSONObject3.put("klass", getClass(str));
        jSONObject3.put("backtrace", str);
        jSONObject3.put("breadcrumbs", getBreadcrumbsLine(C0069G.breadcrumbs));
        jSONObject.put("exception", jSONObject3);
        bufferedReader.close();
        jSONObject5.put("uid", C0069G.UID);
        jSONObject5.put("phone", C0069G.PHONE_MODEL);
        jSONObject5.put("brand", C0069G.PHONE_BRAND);
        jSONObject5.put("appver", C0069G.APP_VERSION);
        jSONObject5.put("appname", C0069G.APP_PACKAGE);
        jSONObject5.put("internal_version", C0069G.APP_VERSIONCODE);
        jSONObject5.put("osver", C0069G.ANDROID_VERSION);
        jSONObject5.put("wifi_on", i);
        jSONObject5.put("mobile_net_on", i2);
        jSONObject5.put("gps_on", i3);
        jSONObject5.put("screen:width", strArr[0]);
        jSONObject5.put("screen:height", strArr[1]);
        jSONObject5.put("screen:orientation", strArr[2]);
        jSONObject5.put("screen_dpi(x:y)", strArr[3] + ":" + strArr[4]);
        if (map2 != null) {
            map.putAll(map2);
        }
        if (C0069G.SEND_LOG && i4 == 1) {
            map.put(IConstants.MODEL_LOG, Utils.readLogs());
        }
        map.put("rooted", String.valueOf(C0069G.HAS_ROOT));
        map.put("ms_from_start", String.valueOf(j));
        if (!(map == null || map.isEmpty())) {
            for (Entry entry : map.entrySet()) {
                jSONObject4.put((String) entry.getKey(), entry.getValue());
            }
            jSONObject5.put("log_data", jSONObject4);
        }
        if (!(map3 == null || map3.isEmpty())) {
            for (Entry entry2 : map3.entrySet()) {
                jSONObject6.put((String) entry2.getKey(), entry2.getValue());
            }
            jSONObject.put("performance", jSONObject6);
        }
        jSONObject.put("application_environment", jSONObject5);
        jSONObject7.put(IConstants.ANDROID_VERSION, C0069G.BUGSENSE_VERSION);
        jSONObject7.put("name", "bugsense-android");
        jSONObject.put("client", jSONObject7);
        return jSONObject.toString();
    }

    private static String getBreadcrumbsLine(ArrayList<String> arrayList) {
        String str = "";
        if (arrayList == null || arrayList.size() == 0) {
            return "";
        }
        StringBuilder stringBuilder = new StringBuilder();
        Iterator it = arrayList.iterator();
        while (it.hasNext()) {
            str = ((String) it.next()).replaceAll("\\|", "_");
            if (str.charAt(0) == '_') {
                str = str.replaceFirst("_", "-");
            }
            stringBuilder.append(str);
            stringBuilder.append("|");
        }
        try {
            return stringBuilder.toString().substring(0, stringBuilder.toString().length() - 1);
        } catch (Exception e) {
            Log.e(C0069G.TAG, "Error occured in breadcrumbs");
            return "";
        }
    }

    private static String getClass(String str) {
        String str2 = "";
        try {
            int indexOf = str.indexOf(":");
            if (indexOf != -1 && indexOf + 1 < str.length()) {
                str2 = str.substring(0, indexOf);
            }
        } catch (Exception e) {
        }
        return str2;
    }

    public static CrashMechanism getInstance() {
        if (instance == null) {
            instance = new CrashMechanism();
        }
        return instance;
    }

    public static void saveCrash(final String str, final int i) {
        Runnable thread = new Thread(new Runnable() {
            public void run() {
                String str = "Crash_";
                if (i == 0) {
                    str = "Exception_";
                }
                try {
                    BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(C0069G.FILES_PATH + "/" + (str + String.valueOf(System.currentTimeMillis()) + "-" + Integer.toString(new Random(System.currentTimeMillis()).nextInt(99999)))));
                    bufferedWriter.write(str);
                    bufferedWriter.flush();
                    bufferedWriter.close();
                } catch (IOException e) {
                    Log.e(C0069G.TAG, "Error saving crash data");
                    if (BugSenseHandler.I_WANT_TO_DEBUG) {
                        e.printStackTrace();
                    }
                }
            }
        });
        ExecutorService executor = BugSense.getExecutor();
        if (thread != null && executor != null) {
            executor.submit(thread);
        }
    }

    public static void transmitCrashASync(final Context context, final String str, final int i) {
        Runnable thread = new Thread(new Runnable() {
            public void run() {
                if (!CrashMechanism.transmitCrashSync(context, str, i)) {
                    CrashMechanism.saveCrash(str, i);
                }
            }
        });
        ExecutorService executor = BugSense.getExecutor();
        if (thread != null && executor != null) {
            executor.submit(thread);
        }
    }

    public static boolean transmitCrashSync(Context context, String str, int i) {
        if (BugSenseHandler.I_WANT_TO_DEBUG) {
            Log.d(C0069G.TAG, "URL: " + C0069G.URL);
            Log.d(C0069G.TAG, "APIKEY: " + C0069G.API_KEY);
        }
        if (str.length() > 10) {
            List arrayList = new ArrayList();
            DefaultHttpClient defaultHttpClient = new DefaultHttpClient();
            HttpParams params = defaultHttpClient.getParams();
            HttpProtocolParams.setUseExpectContinue(params, false);
            HttpConnectionParams.setConnectionTimeout(params, 20000);
            HttpConnectionParams.setSoTimeout(params, 20000);
            HttpUriRequest httpPost = new HttpPost(C0069G.URL);
            httpPost.addHeader("X-BugSense-Api-Key", C0069G.API_KEY);
            try {
                arrayList.add(new BasicNameValuePair("data", str));
                httpPost.setEntity(new UrlEncodedFormEntity(arrayList, Const.ENCODING));
                HttpEntity entity = defaultHttpClient.execute(httpPost).getEntity();
                if (entity == null) {
                    Log.w(C0069G.TAG, "It seems that there is no internet connectivity");
                    throw new Exception("no internet connection");
                }
                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(entity.getContent()));
                String readLine = bufferedReader.readLine();
                bufferedReader.close();
                if (BugSenseHandler.I_WANT_TO_DEBUG) {
                    Log.i(C0069G.TAG, "Crash Response: " + readLine);
                }
                if (readLine != null && readLine.contains("tickerText") && readLine.contains("contentTitle") && readLine.contains(IConstants.NOTIFICATION_URL)) {
                    BugSense.showUpgradeNotification(context, readLine);
                }
            } catch (Exception e) {
                Log.w(C0069G.TAG, "Transmitting crash Exception " + e.getMessage());
                if (!BugSenseHandler.I_WANT_TO_DEBUG) {
                    return false;
                }
                e.printStackTrace();
                return false;
            }
        }
        return true;
    }

    public synchronized void sendSavedCrashes(final Context context) {
        Runnable thread = new Thread(new Runnable() {

            class C00701 implements FilenameFilter {
                C00701() {
                }

                public boolean accept(File file, String str) {
                    return str.startsWith("Crash_");
                }
            }

            class C00712 implements FilenameFilter {
                C00712() {
                }

                public boolean accept(File file, String str) {
                    return str.startsWith("Exception_");
                }
            }

            public void run() {
                int i = 0;
                File file = new File(C0069G.FILES_PATH);
                if (!file.exists()) {
                    file.mkdir();
                }
                FilenameFilter c00701 = new C00701();
                FilenameFilter c00712 = new C00712();
                String[] list = file.list(c00701);
                String[] list2 = file.list(c00712);
                if (BugSenseHandler.I_WANT_TO_DEBUG) {
                    Log.d(C0069G.TAG, "Crash List has: " + list.length + " items");
                    Log.d(C0069G.TAG, "HandledEx List has: " + list2.length + " items");
                }
                int i2 = 5;
                if (5 > list.length) {
                    i2 = list.length;
                }
                int i3 = 0;
                while (i3 < i2 && CrashMechanism.transmitCrashSync(context, Utils.readFile(C0069G.FILES_PATH + "/" + list[i3]), 1)) {
                    i3++;
                }
                if (i3 >= 1) {
                    for (i2 = 0; i2 < list.length; i2++) {
                        try {
                            new File(C0069G.FILES_PATH + "/" + list[i2]).delete();
                        } catch (Throwable e) {
                            Log.e(C0069G.TAG, "Error deleting trace file: " + C0069G.FILES_PATH + "/" + list[i2], e);
                        }
                    }
                }
                i2 = 8;
                if (8 > list2.length) {
                    i2 = list2.length;
                }
                i3 = 0;
                while (i3 < i2 && CrashMechanism.transmitCrashSync(context, Utils.readFile(C0069G.FILES_PATH + "/" + list2[i3]), 0)) {
                    i3++;
                }
                if (i3 >= 1) {
                    while (i < list2.length) {
                        try {
                            new File(C0069G.FILES_PATH + "/" + list2[i]).delete();
                        } catch (Throwable e2) {
                            Log.e(C0069G.TAG, "Error deleting trace file: " + C0069G.FILES_PATH + "/" + list2[i], e2);
                        }
                        i++;
                    }
                }
            }
        });
        ExecutorService executor = BugSense.getExecutor();
        if (!(thread == null || executor == null)) {
            executor.submit(thread);
        }
    }
}
