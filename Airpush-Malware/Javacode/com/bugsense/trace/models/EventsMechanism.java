package com.bugsense.trace.models;

import android.util.Log;
import com.bugsense.trace.BugSense;
import com.bugsense.trace.BugSenseHandler;
import com.bugsense.trace.C0069G;
import com.bugsense.trace.CryptoHttpClient;
import com.bugsense.trace.Utils;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Locale;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import org.apache.http.HttpEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.apache.http.params.HttpProtocolParams;

public final class EventsMechanism {
    private static final int MAX_BYTES = 256;
    private static final int MAX_EVENTS_SIZE = 12;
    private static volatile EventsMechanism instance;

    class C00761 implements Runnable {

        class C00751 implements FilenameFilter {
            C00751() {
            }

            public boolean accept(File file, String str) {
                return str.startsWith("Event_");
            }
        }

        C00761() {
        }

        public void run() {
            File file = new File(C0069G.FILES_PATH);
            if (!file.exists()) {
                file.mkdir();
            }
            String[] list = file.list(new C00751());
            if (BugSenseHandler.I_WANT_TO_DEBUG) {
                Log.d(C0069G.TAG, "Events List has: " + list.length + " items");
            }
            int i = 12;
            if (12 > list.length) {
                i = list.length;
            }
            int i2 = 0;
            while (i2 < i && EventsMechanism.transmitEventSync(Utils.readFile(C0069G.FILES_PATH + "/" + list[i2]))) {
                i2++;
            }
            if (i2 >= 1) {
                for (i = 0; i < list.length; i++) {
                    try {
                        new File(C0069G.FILES_PATH + "/" + list[i]).delete();
                    } catch (Throwable e) {
                        Log.e(C0069G.TAG, "Error deleting trace file: " + C0069G.FILES_PATH + "/" + list[i], e);
                    }
                }
            }
        }
    }

    public static String getFlatLine(String str) {
        if (str.getBytes().length > MAX_BYTES) {
            str = str.substring(0, MAX_BYTES);
        }
        if (str.equals("_ping") || str.equals("_gnip")) {
            str = str.replaceAll("_", "-");
        }
        if (str.contains(":") || str.contains("|")) {
            str = str.replaceAll(":", "_").replace("|", "_");
        }
        int length = 256 - ("3.2.1:".getBytes().length + (":" + C0069G.PHONE_MODEL + ":" + C0069G.PHONE_BRAND + ":" + C0069G.ANDROID_VERSION + ":" + C0069G.APP_VERSION + ":" + Locale.getDefault().getDisplayLanguage() + ":" + Utils.getTime()).getBytes().length);
        if (str.getBytes().length > length) {
            str = str.substring(0, length);
        }
        return "3.2.1:" + str + ":" + C0069G.PHONE_MODEL + ":" + C0069G.PHONE_BRAND + ":" + C0069G.ANDROID_VERSION + ":" + C0069G.APP_VERSION + ":" + Locale.getDefault().getDisplayLanguage() + ":" + Utils.getTime();
    }

    public static EventsMechanism getInstance() {
        if (instance == null) {
            instance = new EventsMechanism();
        }
        return instance;
    }

    public static void saveEvent(final String str) {
        Runnable thread = new Thread(new Runnable() {
            public void run() {
                String flatLine = EventsMechanism.getFlatLine(str);
                try {
                    BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(C0069G.FILES_PATH + "/" + ("Event_" + String.valueOf(System.currentTimeMillis()) + "-" + Integer.toString(new Random(System.currentTimeMillis()).nextInt(99999)))));
                    bufferedWriter.write(flatLine);
                    bufferedWriter.flush();
                    bufferedWriter.close();
                } catch (IOException e) {
                    Log.e(C0069G.TAG, "Error saving event data");
                    if (BugSenseHandler.I_WANT_TO_DEBUG) {
                        e.printStackTrace();
                    }
                }
            }
        });
        ExecutorService executor = BugSense.getExecutor();
        if (thread != null && executor != null) {
            executor.submit(thread);
        }
    }

    public static boolean transmitEventSync(String str) {
        if (BugSenseHandler.I_WANT_TO_DEBUG) {
            Log.d(C0069G.TAG, "URL: " + C0069G.ANALYTICS_URL);
            Log.d(C0069G.TAG, "APIKEY: " + C0069G.API_KEY);
        }
        try {
            DefaultHttpClient cryptoHttpClient = C0069G.ANALYTICS_URL.startsWith("https://") ? new CryptoHttpClient(0) : new DefaultHttpClient();
            HttpParams params = cryptoHttpClient.getParams();
            HttpProtocolParams.setUseExpectContinue(params, false);
            HttpConnectionParams.setConnectionTimeout(params, 20000);
            HttpConnectionParams.setSoTimeout(params, 20000);
            HttpUriRequest httpPost = new HttpPost(C0069G.ANALYTICS_URL);
            httpPost.addHeader("X-BugSense-Api-Key", C0069G.API_KEY);
            new ArrayList().add(new BasicNameValuePair("data", str));
            httpPost.setEntity(new StringEntity(str));
            HttpEntity entity = cryptoHttpClient.execute(httpPost).getEntity();
            if (entity == null) {
                Log.w(C0069G.TAG, "It seems that there is no internet connectivity");
                throw new Exception("no internet connection");
            }
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(entity.getContent()));
            StringBuilder stringBuilder = new StringBuilder();
            while (true) {
                String readLine = bufferedReader.readLine();
                if (readLine == null) {
                    break;
                }
                stringBuilder.append(readLine);
            }
            if (BugSenseHandler.I_WANT_TO_DEBUG) {
                Log.i(C0069G.TAG, "Event Response: " + stringBuilder.toString());
            }
            return true;
        } catch (Exception e) {
            Log.w(C0069G.TAG, "Transmitting ping Exception " + e.getMessage());
            if (!BugSenseHandler.I_WANT_TO_DEBUG) {
                return false;
            }
            e.printStackTrace();
            return false;
        }
    }

    public synchronized void sendSavedEvents() {
        Runnable thread = new Thread(new C00761());
        ExecutorService executor = BugSense.getExecutor();
        if (!(thread == null || executor == null)) {
            executor.submit(thread);
        }
    }
}
