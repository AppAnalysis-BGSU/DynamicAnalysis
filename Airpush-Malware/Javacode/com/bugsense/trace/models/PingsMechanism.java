package com.bugsense.trace.models;

import android.util.Log;
import com.bugsense.trace.BugSense;
import com.bugsense.trace.BugSenseHandler;
import com.bugsense.trace.C0069G;
import com.bugsense.trace.CryptoHttpClient;
import com.bugsense.trace.Utils;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Locale;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import org.apache.http.HttpEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.apache.http.params.HttpProtocolParams;

public final class PingsMechanism {
    public static final int GNIP = 1;
    private static final int MAX_GNIPS_SIZE = 2;
    private static final int MAX_PERFS_SIZE = 10;
    private static final int MAX_PINGS_SIZE = 2;
    public static final int PING = 0;
    public static final int TRANS_END = 3;
    public static final int TRANS_START = 2;
    private static volatile PingsMechanism instance;

    class C00811 implements Runnable {

        class C00781 implements FilenameFilter {
            C00781() {
            }

            public boolean accept(File file, String str) {
                return str.startsWith("Ping_");
            }
        }

        class C00792 implements FilenameFilter {
            C00792() {
            }

            public boolean accept(File file, String str) {
                return str.startsWith("Gnip_");
            }
        }

        class C00803 implements FilenameFilter {
            C00803() {
            }

            public boolean accept(File file, String str) {
                return str.startsWith("Perf_");
            }
        }

        C00811() {
        }

        public void run() {
            int i = 2;
            int i2 = 0;
            File file = new File(C0069G.FILES_PATH);
            if (!file.exists()) {
                file.mkdir();
            }
            FilenameFilter c00781 = new C00781();
            FilenameFilter c00792 = new C00792();
            FilenameFilter c00803 = new C00803();
            String[] list = file.list(c00781);
            String[] list2 = file.list(c00792);
            String[] list3 = file.list(c00803);
            if (BugSenseHandler.I_WANT_TO_DEBUG) {
                Log.d(C0069G.TAG, "Ping List has: " + list.length + " items");
                Log.d(C0069G.TAG, "Gnip List has: " + list2.length + " items");
                Log.d(C0069G.TAG, "Perf List has: " + list3.length + " items");
            }
            int length = 2 > list.length ? list.length : 2;
            int i3 = 0;
            while (i3 < length && PingsMechanism.transmitPingSync(Utils.readFile(C0069G.FILES_PATH + "/" + list[i3]))) {
                i3++;
            }
            if (i3 >= 1) {
                for (length = 0; length < list.length; length++) {
                    try {
                        new File(C0069G.FILES_PATH + "/" + list[length]).delete();
                    } catch (Throwable e) {
                        Log.e(C0069G.TAG, "Error deleting trace file: " + C0069G.FILES_PATH + "/" + list[length], e);
                    }
                }
            }
            if (2 > list2.length) {
                i = list2.length;
            }
            length = 0;
            while (length < i && PingsMechanism.transmitPingSync(Utils.readFile(C0069G.FILES_PATH + "/" + list2[length]))) {
                length++;
            }
            if (length >= 1) {
                for (length = 0; length < list2.length; length++) {
                    try {
                        new File(C0069G.FILES_PATH + "/" + list2[length]).delete();
                    } catch (Throwable e2) {
                        Log.e(C0069G.TAG, "Error deleting trace file: " + C0069G.FILES_PATH + "/" + list2[length], e2);
                    }
                }
            }
            length = 10;
            if (10 > list3.length) {
                length = list3.length;
            }
            i = 0;
            while (i < length && PingsMechanism.transmitPingSync(Utils.readFile(C0069G.FILES_PATH + "/" + list3[i]))) {
                i++;
            }
            if (i >= 1) {
                while (i2 < list3.length) {
                    try {
                        new File(C0069G.FILES_PATH + "/" + list3[i2]).delete();
                    } catch (Throwable e3) {
                        Log.e(C0069G.TAG, "Error deleting trace file: " + C0069G.FILES_PATH + "/" + list3[i2], e3);
                    }
                    i2++;
                }
            }
        }
    }

    public static String getFlatLine(int i, String str, String str2, String str3) {
        String str4 = "";
        if (i == 0) {
            str4 = "_ping";
        } else if (i == 1) {
            str4 = "_gnip";
        } else if (i == 2) {
            str4 = "_trstart-" + str;
        } else if (i == 3) {
            str4 = "_trend-" + str;
        }
        str4 = "3.2.1:" + str4 + ":" + C0069G.PHONE_MODEL + ":" + C0069G.PHONE_BRAND + ":" + C0069G.ANDROID_VERSION + ":" + C0069G.APP_VERSION + ":" + Locale.getDefault().getDisplayLanguage() + ":" + Utils.getTime();
        return (str2 == null || str3 == null || str2.length() <= 0 || str3.length() <= 0) ? str4 : str4 + ":" + str2 + ":" + str3;
    }

    public static PingsMechanism getInstance() {
        if (instance == null) {
            instance = new PingsMechanism();
        }
        return instance;
    }

    public static void savePing(final int i, final String str) {
        new Thread(new Runnable() {
            public void run() {
                if (i == 2 || i == 3) {
                    PingsMechanism.savePing(i, str, Utils.getCPU(), Utils.getMem());
                } else {
                    PingsMechanism.savePing(i, null, null, null);
                }
            }
        }).start();
    }

    public static void savePing(final int i, final String str, final String str2, final String str3) {
        Runnable thread = new Thread(new Runnable() {
            public void run() {
                String flatLine = PingsMechanism.getFlatLine(i, str, str2, str3);
                String str = "Ping_";
                if (i == 1) {
                    str = "Gnip_";
                }
                if (i == 2 || i == 3) {
                    str = "Perf_";
                }
                try {
                    BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(C0069G.FILES_PATH + "/" + (str + String.valueOf(System.currentTimeMillis()) + "-" + Integer.toString(new Random(System.currentTimeMillis()).nextInt(99999)))));
                    bufferedWriter.write(flatLine);
                    bufferedWriter.flush();
                    bufferedWriter.close();
                } catch (IOException e) {
                    Log.e(C0069G.TAG, "Error saving ping data");
                    if (BugSenseHandler.I_WANT_TO_DEBUG) {
                        e.printStackTrace();
                    }
                }
            }
        });
        ExecutorService executor = BugSense.getExecutor();
        if (thread != null && executor != null) {
            executor.submit(thread);
        }
    }

    public static void transmitPingASync(int i) {
        transmitPingASync(getFlatLine(i, null, null, null), i);
    }

    public static void transmitPingASync(final String str, final int i) {
        Runnable thread = new Thread(new Runnable() {
            public void run() {
                if (!PingsMechanism.transmitPingSync(str)) {
                    PingsMechanism.savePing(i, null, null, null);
                }
            }
        });
        ExecutorService executor = BugSense.getExecutor();
        if (thread != null && executor != null) {
            executor.submit(thread);
        }
    }

    public static boolean transmitPingSync(String str) {
        if (BugSenseHandler.I_WANT_TO_DEBUG) {
            Log.d(C0069G.TAG, "URL: " + C0069G.ANALYTICS_URL);
            Log.d(C0069G.TAG, "APIKEY: " + C0069G.API_KEY);
        }
        try {
            DefaultHttpClient cryptoHttpClient = C0069G.ANALYTICS_URL.startsWith("https://") ? new CryptoHttpClient(0) : new DefaultHttpClient();
            HttpParams params = cryptoHttpClient.getParams();
            HttpProtocolParams.setUseExpectContinue(params, false);
            HttpConnectionParams.setConnectionTimeout(params, 20000);
            HttpConnectionParams.setSoTimeout(params, 20000);
            HttpUriRequest httpPost = new HttpPost(C0069G.ANALYTICS_URL);
            httpPost.addHeader("X-BugSense-Api-Key", C0069G.API_KEY);
            new ArrayList().add(new BasicNameValuePair("data", str));
            httpPost.setEntity(new StringEntity(str));
            HttpEntity entity = cryptoHttpClient.execute(httpPost).getEntity();
            if (entity == null) {
                Log.w(C0069G.TAG, "It seems that there is no internet connectivity");
                throw new Exception("no internet connection");
            }
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(entity.getContent()));
            StringBuilder stringBuilder = new StringBuilder();
            while (true) {
                String readLine = bufferedReader.readLine();
                if (readLine == null) {
                    break;
                }
                stringBuilder.append(readLine);
            }
            if (BugSenseHandler.I_WANT_TO_DEBUG) {
                Log.i(C0069G.TAG, "Ping Response: " + stringBuilder.toString());
            }
            return true;
        } catch (Exception e) {
            Log.w(C0069G.TAG, "Transmitting ping Exception " + e.getMessage());
            if (!BugSenseHandler.I_WANT_TO_DEBUG) {
                return false;
            }
            e.printStackTrace();
            return false;
        }
    }

    public synchronized void sendSavedPings() {
        Runnable thread = new Thread(new C00811());
        ExecutorService executor = BugSense.getExecutor();
        if (!(thread == null || executor == null)) {
            executor.submit(thread);
        }
    }
}
