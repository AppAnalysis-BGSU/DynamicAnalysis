package com.apsalar.sdk;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteException;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import com.adsdk.sdk.Const;
import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.TimeUnit;
import org.json.JSONException;
import org.json.JSONObject;

/* compiled from: ApThread */
class ApsalarThread extends Thread {
    private static final int BUFFER_SIZE_MAX = 1000;
    private static final int HEARTBEAT_INTERVAL_BACKOFF = 2;
    private static final int HEARTBEAT_INTERVAL_MAX = 21600000;
    protected static final int HEARTBEAT_INTERVAL_MIN = 300000;
    protected static final int QUEUE_SIZE_MAX = 10000;
    private static final int RETRY_INTERVAL_BACKOFF = 2;
    private static final int RETRY_INTERVAL_MAX = 300000;
    private static final int RETRY_INTERVAL_MIN = 15000;
    private static String apiKey = null;
    private static SQLiteDatabase buffer = null;
    private static int bufferSize = 0;
    private static final String countEventsSQL = "SELECT count(serial) FROM backlog";
    private static Context ctx = null;
    private static SQLiteOpenHelper dbOpener = null;
    private static int heartbeatInterval = 300000;
    private static long lastEventTime = 0;
    private static int retryInterval = RETRY_INTERVAL_MIN;
    private static String secret = null;
    private static final String selectEventsSQL = "SELECT serial, session_json, event_json FROM backlog ORDER BY serial";
    private static ApsalarThread singleton = null;
    private static final String tableBacklogSQL = "CREATE TABLE IF NOT EXISTS backlog (serial INTEGER PRIMARY KEY,session_json TEXT,event_json TEXT)";
    private static final boolean useBuffering = true;
    protected ArrayBlockingQueue<ApsalarAPI> events = new ArrayBlockingQueue(10000);
    protected ApsalarSessionInfo lastSessionInfo = null;

    /* compiled from: ApThread */
    private static class State {
        static final int BUFFERING = 3;
        static final int NOMINAL = 2;
        static final int RECOVERY = 1;

        private State() {
        }
    }

    protected static ApsalarThread getInstance() {
        if (singleton == null) {
            return null;
        }
        return singleton;
    }

    protected static ApsalarThread getInstance(Context context, String str, String str2) {
        ctx = context;
        apiKey = str;
        secret = str2;
        String packageName = ctx.getPackageName();
        String str3 = "";
        try {
            MessageDigest instance = MessageDigest.getInstance("SHA-1");
            instance.update(secret.getBytes(Const.ENCODING));
            instance.update(packageName.getBytes(Const.ENCODING));
            str3 = Apsalar.hexDigest(instance.digest());
        } catch (NoSuchAlgorithmException e) {
        } catch (UnsupportedEncodingException e2) {
        } catch (IndexOutOfBoundsException e3) {
        }
        try {
            if (dbOpener == null) {
                dbOpener = new ApsalarSQLiteOpenHelper(ctx, "Apsalar.sqlite_" + str3);
            }
            buffer = dbOpener.getWritableDatabase();
            buffer.execSQL(tableBacklogSQL);
        } catch (SQLiteException e4) {
            buffer = null;
        } catch (IllegalStateException e5) {
            buffer = null;
        }
        if (singleton == null) {
            singleton = new ApsalarThread();
            singleton.setDaemon(true);
            singleton.setName("ApsalarThread");
        }
        if (!singleton.isAlive()) {
            singleton.start();
        }
        return singleton;
    }

    private ApsalarThread() {
    }

    public void run() {
        int i = 1;
        while (true) {
            switch (i) {
                case 1:
                    i = recovery();
                    break;
                case 2:
                    i = nominal();
                    break;
                case 3:
                    i = buffering();
                    break;
                default:
                    break;
            }
        }
    }

    private int recovery() {
        int i;
        JSONObject jSONObject;
        int i2;
        int i3;
        JSONObject jSONObject2;
        int i4;
        ApsalarAPI apsalarSession;
        boolean has;
        if (dbOpener == null || buffer == null) {
            return 2;
        }
        try {
            buffer = dbOpener.getWritableDatabase();
            Cursor rawQuery = buffer.rawQuery(selectEventsSQL, null);
            JSONObject jSONObject3 = null;
            JSONObject jSONObject4 = null;
            while (rawQuery.moveToNext()) {
                try {
                    i = rawQuery.getInt(0);
                    String string = rawQuery.getString(1);
                    String string2 = rawQuery.getString(2);
                    try {
                        jSONObject = new JSONObject(string);
                    } catch (JSONException e) {
                        jSONObject = jSONObject4;
                        jSONObject4 = jSONObject3;
                        i2 = 0;
                        i3 = i;
                        jSONObject2 = jSONObject;
                        jSONObject = jSONObject4;
                        i4 = i2;
                        jSONObject3 = jSONObject2;
                        switch (i4) {
                            case 1:
                                this.lastSessionInfo = new ApsalarSessionInfo(jSONObject3, apiKey, secret);
                                heartbeatInterval = 300000;
                                apsalarSession = new ApsalarSession(this.lastSessionInfo, jSONObject);
                                i = apsalarSession.REST();
                                jSONObject4 = ((ApsalarEvent) apsalarSession).returnDataJSON;
                                if (jSONObject4 != null) {
                                    has = jSONObject4.has("first_time");
                                } else {
                                    has = false;
                                }
                                if (!has) {
                                    i4 = i;
                                    break;
                                }
                                Apsalar.sendFBInstall();
                                Apsalar.sendReferrerInstall();
                                i4 = i;
                                break;
                            case 3:
                                this.lastSessionInfo = new ApsalarSessionInfo(jSONObject3, apiKey, secret);
                                i4 = new ApsalarEvent(this.lastSessionInfo, jSONObject).REST();
                                break;
                            case 4:
                                this.lastSessionInfo = new ApsalarSessionInfo(jSONObject3, apiKey, secret);
                                i4 = new ApsalarEndSession(this.lastSessionInfo, jSONObject).REST();
                                this.lastSessionInfo = null;
                                break;
                            default:
                                i4 = -1;
                                break;
                        }
                        switch (i4) {
                            case 0:
                                rawQuery.close();
                                return 3;
                            default:
                                try {
                                    buffer = dbOpener.getWritableDatabase();
                                    buffer.delete("backlog", "serial = ?", new String[]{String.valueOf(i3)});
                                    jSONObject4 = jSONObject3;
                                    jSONObject3 = jSONObject;
                                } catch (IllegalStateException e2) {
                                    jSONObject4 = jSONObject3;
                                    jSONObject3 = jSONObject;
                                }
                        }
                    }
                    try {
                        jSONObject4 = new JSONObject(string2);
                        try {
                            i2 = jSONObject4.getInt("eventType");
                        } catch (JSONException e3) {
                            i2 = 0;
                            i3 = i;
                            jSONObject2 = jSONObject;
                            jSONObject = jSONObject4;
                            i4 = i2;
                            jSONObject3 = jSONObject2;
                            switch (i4) {
                                case 1:
                                    this.lastSessionInfo = new ApsalarSessionInfo(jSONObject3, apiKey, secret);
                                    heartbeatInterval = 300000;
                                    apsalarSession = new ApsalarSession(this.lastSessionInfo, jSONObject);
                                    i = apsalarSession.REST();
                                    jSONObject4 = ((ApsalarEvent) apsalarSession).returnDataJSON;
                                    if (jSONObject4 != null) {
                                        has = jSONObject4.has("first_time");
                                    } else {
                                        has = false;
                                    }
                                    if (!has) {
                                        i4 = i;
                                        break;
                                    }
                                    Apsalar.sendFBInstall();
                                    Apsalar.sendReferrerInstall();
                                    i4 = i;
                                    break;
                                case 3:
                                    this.lastSessionInfo = new ApsalarSessionInfo(jSONObject3, apiKey, secret);
                                    i4 = new ApsalarEvent(this.lastSessionInfo, jSONObject).REST();
                                    break;
                                case 4:
                                    this.lastSessionInfo = new ApsalarSessionInfo(jSONObject3, apiKey, secret);
                                    i4 = new ApsalarEndSession(this.lastSessionInfo, jSONObject).REST();
                                    this.lastSessionInfo = null;
                                    break;
                                default:
                                    i4 = -1;
                                    break;
                            }
                            switch (i4) {
                                case 0:
                                    rawQuery.close();
                                    return 3;
                                default:
                                    buffer = dbOpener.getWritableDatabase();
                                    buffer.delete("backlog", "serial = ?", new String[]{String.valueOf(i3)});
                                    jSONObject4 = jSONObject3;
                                    jSONObject3 = jSONObject;
                            }
                        } catch (SQLiteException e4) {
                            jSONObject3 = jSONObject4;
                            jSONObject4 = jSONObject;
                            jSONObject = jSONObject3;
                            i3 = 0;
                            jSONObject3 = jSONObject4;
                            i4 = 0;
                            switch (i4) {
                                case 1:
                                    this.lastSessionInfo = new ApsalarSessionInfo(jSONObject3, apiKey, secret);
                                    heartbeatInterval = 300000;
                                    apsalarSession = new ApsalarSession(this.lastSessionInfo, jSONObject);
                                    i = apsalarSession.REST();
                                    jSONObject4 = ((ApsalarEvent) apsalarSession).returnDataJSON;
                                    if (jSONObject4 != null) {
                                        has = false;
                                    } else {
                                        has = jSONObject4.has("first_time");
                                    }
                                    if (!has) {
                                        Apsalar.sendFBInstall();
                                        Apsalar.sendReferrerInstall();
                                        i4 = i;
                                        break;
                                    }
                                    i4 = i;
                                    break;
                                case 3:
                                    this.lastSessionInfo = new ApsalarSessionInfo(jSONObject3, apiKey, secret);
                                    i4 = new ApsalarEvent(this.lastSessionInfo, jSONObject).REST();
                                    break;
                                case 4:
                                    this.lastSessionInfo = new ApsalarSessionInfo(jSONObject3, apiKey, secret);
                                    i4 = new ApsalarEndSession(this.lastSessionInfo, jSONObject).REST();
                                    this.lastSessionInfo = null;
                                    break;
                                default:
                                    i4 = -1;
                                    break;
                            }
                            switch (i4) {
                                case 0:
                                    rawQuery.close();
                                    return 3;
                                default:
                                    buffer = dbOpener.getWritableDatabase();
                                    buffer.delete("backlog", "serial = ?", new String[]{String.valueOf(i3)});
                                    jSONObject4 = jSONObject3;
                                    jSONObject3 = jSONObject;
                            }
                        }
                    } catch (JSONException e5) {
                        jSONObject4 = jSONObject3;
                        i2 = 0;
                        i3 = i;
                        jSONObject2 = jSONObject;
                        jSONObject = jSONObject4;
                        i4 = i2;
                        jSONObject3 = jSONObject2;
                        switch (i4) {
                            case 1:
                                this.lastSessionInfo = new ApsalarSessionInfo(jSONObject3, apiKey, secret);
                                heartbeatInterval = 300000;
                                apsalarSession = new ApsalarSession(this.lastSessionInfo, jSONObject);
                                i = apsalarSession.REST();
                                jSONObject4 = ((ApsalarEvent) apsalarSession).returnDataJSON;
                                if (jSONObject4 != null) {
                                    has = false;
                                } else {
                                    has = jSONObject4.has("first_time");
                                }
                                if (!has) {
                                    Apsalar.sendFBInstall();
                                    Apsalar.sendReferrerInstall();
                                    i4 = i;
                                    break;
                                }
                                i4 = i;
                                break;
                            case 3:
                                this.lastSessionInfo = new ApsalarSessionInfo(jSONObject3, apiKey, secret);
                                i4 = new ApsalarEvent(this.lastSessionInfo, jSONObject).REST();
                                break;
                            case 4:
                                this.lastSessionInfo = new ApsalarSessionInfo(jSONObject3, apiKey, secret);
                                i4 = new ApsalarEndSession(this.lastSessionInfo, jSONObject).REST();
                                this.lastSessionInfo = null;
                                break;
                            default:
                                i4 = -1;
                                break;
                        }
                        switch (i4) {
                            case 0:
                                rawQuery.close();
                                return 3;
                            default:
                                buffer = dbOpener.getWritableDatabase();
                                buffer.delete("backlog", "serial = ?", new String[]{String.valueOf(i3)});
                                jSONObject4 = jSONObject3;
                                jSONObject3 = jSONObject;
                        }
                    } catch (SQLiteException e6) {
                        jSONObject4 = jSONObject;
                        jSONObject = jSONObject3;
                        i3 = 0;
                        jSONObject3 = jSONObject4;
                        i4 = 0;
                        switch (i4) {
                            case 1:
                                this.lastSessionInfo = new ApsalarSessionInfo(jSONObject3, apiKey, secret);
                                heartbeatInterval = 300000;
                                apsalarSession = new ApsalarSession(this.lastSessionInfo, jSONObject);
                                i = apsalarSession.REST();
                                jSONObject4 = ((ApsalarEvent) apsalarSession).returnDataJSON;
                                if (jSONObject4 != null) {
                                    has = jSONObject4.has("first_time");
                                } else {
                                    has = false;
                                }
                                if (!has) {
                                    i4 = i;
                                    break;
                                }
                                Apsalar.sendFBInstall();
                                Apsalar.sendReferrerInstall();
                                i4 = i;
                                break;
                            case 3:
                                this.lastSessionInfo = new ApsalarSessionInfo(jSONObject3, apiKey, secret);
                                i4 = new ApsalarEvent(this.lastSessionInfo, jSONObject).REST();
                                break;
                            case 4:
                                this.lastSessionInfo = new ApsalarSessionInfo(jSONObject3, apiKey, secret);
                                i4 = new ApsalarEndSession(this.lastSessionInfo, jSONObject).REST();
                                this.lastSessionInfo = null;
                                break;
                            default:
                                i4 = -1;
                                break;
                        }
                        switch (i4) {
                            case 0:
                                rawQuery.close();
                                return 3;
                            default:
                                buffer = dbOpener.getWritableDatabase();
                                buffer.delete("backlog", "serial = ?", new String[]{String.valueOf(i3)});
                                jSONObject4 = jSONObject3;
                                jSONObject3 = jSONObject;
                        }
                    }
                    i3 = i;
                    jSONObject2 = jSONObject;
                    jSONObject = jSONObject4;
                    i4 = i2;
                    jSONObject3 = jSONObject2;
                } catch (SQLiteException e7) {
                    jSONObject = jSONObject3;
                    i3 = 0;
                    jSONObject3 = jSONObject4;
                    i4 = 0;
                    switch (i4) {
                        case 1:
                            this.lastSessionInfo = new ApsalarSessionInfo(jSONObject3, apiKey, secret);
                            heartbeatInterval = 300000;
                            apsalarSession = new ApsalarSession(this.lastSessionInfo, jSONObject);
                            i = apsalarSession.REST();
                            jSONObject4 = ((ApsalarEvent) apsalarSession).returnDataJSON;
                            if (jSONObject4 != null) {
                                has = false;
                            } else {
                                has = jSONObject4.has("first_time");
                            }
                            if (!has) {
                                Apsalar.sendFBInstall();
                                Apsalar.sendReferrerInstall();
                                i4 = i;
                                break;
                            }
                            i4 = i;
                            break;
                        case 3:
                            this.lastSessionInfo = new ApsalarSessionInfo(jSONObject3, apiKey, secret);
                            i4 = new ApsalarEvent(this.lastSessionInfo, jSONObject).REST();
                            break;
                        case 4:
                            this.lastSessionInfo = new ApsalarSessionInfo(jSONObject3, apiKey, secret);
                            i4 = new ApsalarEndSession(this.lastSessionInfo, jSONObject).REST();
                            this.lastSessionInfo = null;
                            break;
                        default:
                            i4 = -1;
                            break;
                    }
                    switch (i4) {
                        case 0:
                            rawQuery.close();
                            return 3;
                        default:
                            buffer = dbOpener.getWritableDatabase();
                            buffer.delete("backlog", "serial = ?", new String[]{String.valueOf(i3)});
                            jSONObject4 = jSONObject3;
                            jSONObject3 = jSONObject;
                    }
                }
                switch (i4) {
                    case 1:
                        this.lastSessionInfo = new ApsalarSessionInfo(jSONObject3, apiKey, secret);
                        heartbeatInterval = 300000;
                        apsalarSession = new ApsalarSession(this.lastSessionInfo, jSONObject);
                        i = apsalarSession.REST();
                        jSONObject4 = ((ApsalarEvent) apsalarSession).returnDataJSON;
                        if (jSONObject4 != null) {
                            has = jSONObject4.has("first_time");
                        } else {
                            has = false;
                        }
                        if (!has) {
                            i4 = i;
                            break;
                        }
                        Apsalar.sendFBInstall();
                        Apsalar.sendReferrerInstall();
                        i4 = i;
                        break;
                    case 3:
                        this.lastSessionInfo = new ApsalarSessionInfo(jSONObject3, apiKey, secret);
                        i4 = new ApsalarEvent(this.lastSessionInfo, jSONObject).REST();
                        break;
                    case 4:
                        this.lastSessionInfo = new ApsalarSessionInfo(jSONObject3, apiKey, secret);
                        i4 = new ApsalarEndSession(this.lastSessionInfo, jSONObject).REST();
                        this.lastSessionInfo = null;
                        break;
                    default:
                        i4 = -1;
                        break;
                }
                switch (i4) {
                    case 0:
                        rawQuery.close();
                        return 3;
                    default:
                        buffer = dbOpener.getWritableDatabase();
                        buffer.delete("backlog", "serial = ?", new String[]{String.valueOf(i3)});
                        jSONObject4 = jSONObject3;
                        jSONObject3 = jSONObject;
                }
            }
            rawQuery.close();
            return 2;
        } catch (IllegalStateException e8) {
            return 2;
        } catch (SQLiteException e9) {
            Log.e("Apsalar SDK/Thread", "database SQLiteException");
            return 2;
        }
    }

    private int nominal() {
        lastEventTime = System.currentTimeMillis();
        while (true) {
            try {
                long j;
                ApsalarAPI apsalarAPI;
                int i;
                ArrayBlockingQueue arrayBlockingQueue = this.events;
                if (this.lastSessionInfo == null) {
                    j = Long.MAX_VALUE;
                } else {
                    j = ((long) heartbeatInterval) - (System.currentTimeMillis() - lastEventTime);
                }
                ApsalarAPI apsalarAPI2 = (ApsalarAPI) arrayBlockingQueue.poll(j, TimeUnit.MILLISECONDS);
                if (apsalarAPI2 != null || this.lastSessionInfo == null) {
                    apsalarAPI = apsalarAPI2;
                } else {
                    ApsalarHeartbeat apsalarHeartbeat = new ApsalarHeartbeat(this.lastSessionInfo);
                    heartbeatInterval *= 2;
                    if (heartbeatInterval > HEARTBEAT_INTERVAL_MAX) {
                        heartbeatInterval = HEARTBEAT_INTERVAL_MAX;
                    }
                    lastEventTime = System.currentTimeMillis();
                    apsalarAPI = apsalarHeartbeat;
                }
                if (apsalarAPI != null) {
                    if (apsalarAPI instanceof ApsalarSession) {
                        this.lastSessionInfo = ((ApsalarEvent) apsalarAPI).info;
                        heartbeatInterval = 300000;
                        lastEventTime = System.currentTimeMillis();
                    }
                    int REST = apsalarAPI.REST();
                    JSONObject jSONObject = ((ApsalarEvent) apsalarAPI).returnDataJSON;
                    boolean z = false;
                    if (jSONObject != null) {
                        z = jSONObject.has("first_time");
                    }
                    if (z) {
                        Apsalar.sendFBInstall();
                        Apsalar.sendReferrerInstall();
                    }
                    i = REST;
                } else {
                    i = -1;
                }
                switch (i) {
                    case 0:
                        if (apsalarAPI instanceof ApsalarJSON) {
                            if (buffer == null) {
                                Object arrayBlockingQueue2 = new ArrayBlockingQueue(10000);
                                arrayBlockingQueue2.offer(apsalarAPI);
                                this.events.drainTo(arrayBlockingQueue2);
                                this.events = arrayBlockingQueue2;
                                break;
                            }
                            bufferEvent(apsalarAPI);
                            return 3;
                        }
                        continue;
                    default:
                        break;
                }
            } catch (InterruptedException e) {
            }
        }
    }

    private int buffering() {
        int i = 2;
        if (dbOpener == null || buffer == null) {
            return i;
        }
        try {
            buffer = dbOpener.getWritableDatabase();
            Cursor rawQuery = buffer.rawQuery(countEventsSQL, null);
            try {
                rawQuery.moveToNext();
                bufferSize = rawQuery.getInt(0);
            } catch (SQLiteException e) {
                bufferSize = 0;
            }
            rawQuery.close();
            lastEventTime = System.currentTimeMillis();
            while (true) {
                try {
                    ApsalarAPI apsalarAPI = (ApsalarAPI) this.events.poll(((long) retryInterval) - (System.currentTimeMillis() - lastEventTime), TimeUnit.MILLISECONDS);
                    lastEventTime = System.currentTimeMillis();
                    if (apsalarAPI == null) {
                        retryInterval = (int) ((1.0d + Math.random()) * (((double) retryInterval) * 2.0d));
                        if (retryInterval > 300000) {
                            retryInterval = 300000;
                        }
                        ApsalarRetryThread.getInstance().events.offer(new ApsalarRetry());
                    } else if (apsalarAPI instanceof ApsalarRetry) {
                        return 1;
                    } else {
                        if ((apsalarAPI instanceof ApsalarJSON) && !bufferEvent(apsalarAPI)) {
                        }
                    }
                } catch (InterruptedException e2) {
                }
            }
        } catch (IllegalStateException e3) {
            buffer = null;
            return i;
        }
    }

    protected static boolean bufferEvent(ApsalarAPI apsalarAPI) {
        if (buffer == null) {
            return false;
        }
        if (bufferSize >= BUFFER_SIZE_MAX) {
            return false;
        }
        ContentValues contentValues = new ContentValues();
        contentValues.put("session_json", ((ApsalarEvent) apsalarAPI).getInfo().toJSON().toString());
        contentValues.put("event_json", ((ApsalarJSON) apsalarAPI).toJSON().toString());
        try {
            buffer = dbOpener.getWritableDatabase();
            buffer.insert("backlog", null, contentValues);
            bufferSize++;
            return true;
        } catch (IllegalStateException e) {
            buffer = null;
            return false;
        }
    }
}
