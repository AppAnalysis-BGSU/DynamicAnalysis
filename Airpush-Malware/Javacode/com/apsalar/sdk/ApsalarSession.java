package com.apsalar.sdk;

import com.adsdk.sdk.Const;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.Iterator;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/* compiled from: ApEvent */
class ApsalarSession extends ApsalarEvent implements ApsalarAPI, ApsalarJSON {
    private String returndata;
    private String[] triggerInfo;
    private LoadTriggerTask triggerTask;

    protected void init() {
        this.urlbase = "http://e.apsalar.com/api/v1/start";
        this.eventType = 1;
    }

    protected ApsalarSession(ApsalarSessionInfo apsalarSessionInfo) {
        super(apsalarSessionInfo);
        this.triggerTask = null;
        this.triggerInfo = new String[0];
        this.returndata = null;
    }

    protected ApsalarSession(ApsalarSessionInfo apsalarSessionInfo, LoadTriggerTask loadTriggerTask, String[] strArr) {
        super(apsalarSessionInfo);
        this.triggerTask = null;
        this.triggerInfo = new String[0];
        this.returndata = null;
        this.triggerTask = loadTriggerTask;
        this.triggerInfo = strArr;
    }

    protected ApsalarSession(ApsalarSessionInfo apsalarSessionInfo, JSONObject jSONObject) {
        super(apsalarSessionInfo, jSONObject);
        this.triggerTask = null;
        this.triggerInfo = new String[0];
        this.returndata = null;
    }

    protected void makeURL() {
        String str = "";
        try {
            str = "?a=" + URLEncoder.encode(this.info.apiKey, Const.ENCODING) + "&ab=" + URLEncoder.encode(this.info.abi, Const.ENCODING) + "&av=" + URLEncoder.encode(this.info.appVersion, Const.ENCODING) + "&br=" + URLEncoder.encode(this.info.brand, Const.ENCODING) + "&c=" + URLEncoder.encode(this.info.connType, Const.ENCODING) + "&de=" + URLEncoder.encode(this.info.device, Const.ENCODING) + "&i=" + URLEncoder.encode(this.info.clsPackage, Const.ENCODING) + "&ma=" + URLEncoder.encode(this.info.manufacturer, Const.ENCODING) + "&mo=" + URLEncoder.encode(this.info.model, Const.ENCODING) + "&n=" + URLEncoder.encode(this.info.appName, Const.ENCODING) + "&p=" + URLEncoder.encode(this.info.platform, Const.ENCODING) + "&pr=" + URLEncoder.encode(this.info.product, Const.ENCODING) + "&rt=" + URLEncoder.encode(this.info.retType, Const.ENCODING) + "&s=" + URLEncoder.encode(this.info.sessionId, Const.ENCODING) + "&sdk=" + URLEncoder.encode(this.info.sdkVersion, Const.ENCODING) + "&u=" + URLEncoder.encode(this.info.deviceId, Const.ENCODING) + "&v=" + URLEncoder.encode(this.info.osVersion, Const.ENCODING);
        } catch (UnsupportedEncodingException e) {
        }
        this.url = str;
    }

    private void registerEntryPoints(JSONObject jSONObject) {
        if (this.info != null) {
            try {
                ApsalarItem apsalarItem;
                String str;
                JSONObject jSONObject2 = (JSONObject) jSONObject.get("result");
                JSONArray jSONArray = jSONObject2.getJSONArray("Callbacks");
                for (int i = 0; i < jSONArray.length(); i++) {
                    apsalarItem = (ApsalarItem) Apsalar.registered_callbacks.get(jSONArray.getString(i));
                    if (apsalarItem != null) {
                        apsalarItem.registered = Boolean.valueOf(true);
                    } else {
                        apsalarItem = new ApsalarItem(jSONArray.getString(i), null);
                        apsalarItem.registered = Boolean.valueOf(true);
                        Apsalar.registered_callbacks.put(jSONArray.getString(i), apsalarItem);
                    }
                }
                JSONObject jSONObject3 = jSONObject2.getJSONObject("Triggers");
                Iterator keys = jSONObject3.keys();
                while (keys.hasNext()) {
                    str = (String) keys.next();
                    apsalarItem = (ApsalarItem) Apsalar.registered_triggers.get(str);
                    if (apsalarItem != null) {
                        apsalarItem.registered = Boolean.valueOf(true);
                        apsalarItem.connected = Boolean.valueOf(jSONObject3.getBoolean(str));
                    } else {
                        apsalarItem = new ApsalarItem(str, Boolean.valueOf(true));
                        apsalarItem.registered = Boolean.valueOf(true);
                        apsalarItem.connected = Boolean.valueOf(jSONObject3.getBoolean(str));
                        Apsalar.registered_triggers.put(str, apsalarItem);
                    }
                }
                for (String str2 : Apsalar.registered_callbacks.keySet()) {
                    ApsalarItem apsalarItem2 = (ApsalarItem) Apsalar.registered_callbacks.get(str2);
                    if (!apsalarItem2.registered.booleanValue()) {
                        new ApsalarRegister("C", apsalarItem2.name, this.info).REST();
                    }
                }
            } catch (JSONException e) {
            }
        }
    }

    public int REST() {
        int REST = super.REST();
        if (REST == 1) {
            registerEntryPoints(this.returnDataJSON);
            if (this.triggerTask != null && this.triggerInfo.length > 0) {
                this.triggerTask.execute(new String[]{this.triggerInfo[0], this.triggerInfo[1]});
            }
        } else if (this.triggerTask != null) {
            this.triggerTask.cancel(true);
        }
        return REST;
    }
}
