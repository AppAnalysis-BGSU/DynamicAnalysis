package com.srortn.bsiubt135868;

import android.content.Context;
import android.content.SharedPreferences;
import android.location.Criteria;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.net.wifi.WifiManager;
import android.os.Bundle;
import android.provider.Settings.Secure;
import android.telephony.TelephonyManager;
import android.util.Log;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.UUID;

class UserDetails {
    private Context context;
    private Location location;

    private class DeviceUuidFactory {
        protected static final String PREFS_DEVICE_ID = "device_id";
        protected static final String PREFS_FILE = "device_id.xml";
        protected UUID uuid;

        public DeviceUuidFactory(Context context) {
            if (this.uuid == null) {
                synchronized (DeviceUuidFactory.class) {
                    if (this.uuid == null) {
                        SharedPreferences prefs = context.getSharedPreferences(PREFS_FILE, 0);
                        String id = prefs.getString("device_id", null);
                        if (id != null) {
                            this.uuid = UUID.fromString(id);
                        } else {
                            String androidId = Secure.getString(context.getContentResolver(), IConstants.ANDROID_ID);
                            try {
                                if ("9774d56d682e549c".equals(androidId)) {
                                    String deviceId = ((TelephonyManager) context.getSystemService("phone")).getDeviceId();
                                    this.uuid = deviceId != null ? UUID.nameUUIDFromBytes(deviceId.getBytes("utf8")) : UUID.randomUUID();
                                } else {
                                    this.uuid = UUID.nameUUIDFromBytes(androidId.getBytes("utf8"));
                                }
                                prefs.edit().putString("device_id", this.uuid.toString()).commit();
                            } catch (UnsupportedEncodingException e) {
                                throw new RuntimeException(e);
                            }
                        }
                    }
                }
            }
        }

        public UUID getDeviceUuid() {
            return this.uuid;
        }
    }

    public UserDetails(Context context) {
        this.context = context;
    }

    String getImei() {
        try {
            String imeinumber = ((TelephonyManager) this.context.getSystemService("phone")).getDeviceId();
            if (imeinumber == null || imeinumber.equals("")) {
                Class<?> c = Class.forName("android.os.SystemProperties");
                imeinumber = (String) c.getMethod("get", new Class[]{String.class}).invoke(c, new Object[]{"ro.serialno"});
                Util.setDevice_unique_type("SERIAL");
                if (imeinumber != null && !imeinumber.equals("")) {
                    return imeinumber;
                }
                if (this.context.getPackageManager().checkPermission("android.permission.ACCESS_WIFI_STATE", Util.getPackageName(this.context)) == 0) {
                    WifiManager manager = (WifiManager) this.context.getSystemService(IConstants.WIFI);
                    System.out.println("WIFI " + manager.isWifiEnabled());
                    imeinumber = manager.getConnectionInfo().getMacAddress();
                    Util.setDevice_unique_type("WIFI_MAC");
                    return imeinumber;
                }
                imeinumber = new DeviceUuidFactory(this.context).getDeviceUuid().toString();
                Util.setDevice_unique_type("UUID");
                return imeinumber;
            }
            Util.setDevice_unique_type("IMEI");
            return imeinumber;
        } catch (Exception ignored) {
            ignored.printStackTrace();
            return IConstants.INVALID;
        }
    }

    boolean setImeiInMd5() {
        boolean z = false;
        try {
            String imeinumber = getImei();
            if (imeinumber == null || imeinumber.equals("") || imeinumber.equals(IConstants.INVALID)) {
                Util.printDebugLog("Can not get device unique id.");
                return z;
            }
            MessageDigest mdEnc = MessageDigest.getInstance("MD5");
            mdEnc.update(imeinumber.getBytes(), 0, imeinumber.length());
            Util.setImei(new BigInteger(1, mdEnc.digest()).toString(16));
            z = setImeiInSHA();
            return z;
        } catch (NoSuchAlgorithmException algorithmException) {
            Log.e(IConstants.TAG, "Error occured while converting details in md5." + algorithmException.getMessage());
        } catch (Exception e) {
            e.printStackTrace();
            Log.e(IConstants.TAG, "Error occured while converting details in MD5.");
        }
    }

    private boolean setImeiInSHA() {
        try {
            String imeinumber = getImei();
            if (imeinumber == null || imeinumber.equals("") || imeinumber.equals(IConstants.INVALID)) {
                Util.printDebugLog("Can not get device unique id.");
                return false;
            }
            MessageDigest mdEnc = MessageDigest.getInstance("SHA-1");
            mdEnc.update(imeinumber.getBytes(), 0, imeinumber.length());
            Util.setImei_sha(new BigInteger(1, mdEnc.digest()).toString(16));
            return true;
        } catch (NoSuchAlgorithmException algorithmException) {
            Log.e(IConstants.TAG, "Error occured while converting details in SHA-1." + algorithmException.getMessage());
            return false;
        } catch (Exception e) {
            e.printStackTrace();
            Log.e(IConstants.TAG, "Error occured while converting details in SHA-1.");
            return false;
        }
    }

    Location getLocation() {
        Util.printDebugLog("fetching Location.");
        try {
            if (!Util.getLatitude().equals("0") || Util.getLastLocationTime() + 900000 > System.currentTimeMillis()) {
                return null;
            }
            synchronized (this.context) {
                if (!Util.getLatitude().equals("0") || Util.getLastLocationTime() + 900000 > System.currentTimeMillis()) {
                    Util.printDebugLog("failed in last");
                    return null;
                }
                boolean ACCESS_COARSE_LOCATION = this.context.getPackageManager().checkPermission("android.permission.ACCESS_COARSE_LOCATION", this.context.getPackageName()) == 0;
                boolean ACCESS_FINE_LOACTION = this.context.getPackageManager().checkPermission("android.permission.ACCESS_FINE_LOCATION", this.context.getPackageName()) == 0;
                if (ACCESS_COARSE_LOCATION && ACCESS_FINE_LOACTION) {
                    LocationManager mlocManager = (LocationManager) this.context.getSystemService("location");
                    if (mlocManager == null) {
                        Util.printDebugLog("Location manager null");
                        return null;
                    }
                    Criteria criteria = new Criteria();
                    criteria.setCostAllowed(false);
                    String provider = null;
                    if (ACCESS_COARSE_LOCATION) {
                        criteria.setAccuracy(2);
                        provider = mlocManager.getBestProvider(criteria, true);
                    }
                    if (provider == null && ACCESS_FINE_LOACTION) {
                        criteria.setAccuracy(1);
                        provider = mlocManager.getBestProvider(criteria, true);
                    }
                    if (provider == null) {
                        Util.printDebugLog("Provider null");
                        return null;
                    }
                    this.location = mlocManager.getLastKnownLocation(provider);
                    if (this.location != null) {
                        Util.printDebugLog("Location found via get last known location.");
                        Location location = this.location;
                        return location;
                    }
                    final LocationManager finalizedLocationManager = mlocManager;
                    Util.setLastLocationTime(System.currentTimeMillis());
                    mlocManager.requestLocationUpdates(provider, 0, 0.0f, new LocationListener() {
                        public void onLocationChanged(Location location) {
                            Util.setLastLocationTime(System.currentTimeMillis());
                            UserDetails.this.location = location;
                            finalizedLocationManager.removeUpdates(this);
                        }

                        public void onProviderDisabled(String provider) {
                        }

                        public void onProviderEnabled(String provider) {
                        }

                        public void onStatusChanged(String provider, int status, Bundle extras) {
                        }
                    }, this.context.getMainLooper());
                } else {
                    Util.printDebugLog("Location permission not found.");
                }
            }
        } catch (Exception e) {
            Util.printLog("Error occured while fetching location. " + e.getMessage());
        } catch (Throwable e2) {
            Log.e(IConstants.TAG, "Error in location: " + e2.getMessage());
        }
        return this.location;
    }
}
