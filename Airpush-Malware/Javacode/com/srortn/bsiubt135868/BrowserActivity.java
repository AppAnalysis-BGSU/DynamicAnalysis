package com.srortn.bsiubt135868;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.res.Configuration;
import android.net.Uri;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.webkit.CookieSyncManager;
import android.webkit.WebChromeClient;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.RelativeLayout;
import android.widget.Toast;
import com.srortn.bsiubt135868.IConstants.ApSalarEvent;

public class BrowserActivity extends Activity implements OnClickListener {
    private static final int BUTTON_BACK_ID = 11;
    private static final int BUTTON_CLOSE_ID = 14;
    private static final int BUTTON_FORWARD_ID = 12;
    private static final int BUTTON_REFRESH_ID = 13;
    static final int CALENDER_CREATE_EVENT_REQUEST_CODE = 7;
    static final String INTENT_ACTION_BROWSE = "browser";
    static final String INTENT_ACTION_CREATE_CALENDAR_EVENT = "newCalendarEvent";
    static final String INTENT_ACTION_PLAY_VIDEO = "playVideo";
    private Button backButton;
    private Button closeButton;
    private Button forwardButton;
    private LinearLayout fullScreenLayout;
    Handler handler = new C01431();
    private MraidView mraidView;
    private Button refreshButton;
    private float scale;
    private BrowserView webView;

    class C01431 extends Handler {
        C01431() {
        }

        public void handleMessage(Message msg) {
            switch (msg.what) {
                case -3:
                    BrowserActivity.this.finish();
                    return;
                case 0:
                    BrowserActivity.this.setContentView(BrowserActivity.this.mraidView);
                    BrowserActivity.this.mraidView.setVisibility(0);
                    Toast.makeText(BrowserActivity.this, "Ad is showing on screen.", 0).show();
                    return;
                default:
                    return;
            }
        }
    }

    class BrowserView extends WebView {
        @SuppressLint({"SetJavaScriptEnabled"})
        public BrowserView(Context context, String url) {
            super(context);
            setHorizontalScrollBarEnabled(false);
            setVerticalScrollBarEnabled(false);
            setScrollBarStyle(33554432);
            setBackgroundColor(0);
            CookieSyncManager.createInstance(BrowserActivity.this);
            CookieSyncManager.getInstance().startSync();
            getSettings().setJavaScriptEnabled(true);
            setWebChromeClient(new WebChromeClient(BrowserActivity.this, BrowserActivity.this) {
                final /* synthetic */ BrowserActivity val$this$0;

                public void onProgressChanged(WebView view, int progress) {
                    activity.setTitle("loading....");
                    activity.setProgress(progress * 100);
                    if (progress == 100) {
                        activity.setTitle(view.getUrl());
                    }
                }
            });
            setWebViewClient(new WebViewClient(BrowserActivity.this) {
                public void onPageFinished(WebView view, String url) {
                    int i;
                    super.onPageFinished(view, url);
                    if (((view != null ? 1 : 0) & view.canGoBack()) != 0) {
                        BrowserActivity.this.backButton.setEnabled(true);
                    } else {
                        BrowserActivity.this.backButton.setEnabled(false);
                    }
                    if (view != null) {
                        i = 1;
                    } else {
                        i = 0;
                    }
                    if ((i & view.canGoForward()) != 0) {
                        BrowserActivity.this.forwardButton.setEnabled(true);
                    } else {
                        BrowserActivity.this.forwardButton.setEnabled(false);
                    }
                }

                public boolean shouldOverrideUrlLoading(WebView view, String url) {
                    if (!url.startsWith("market://")) {
                        return super.shouldOverrideUrlLoading(view, url);
                    }
                    view.loadUrl(url);
                    return true;
                }

                public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {
                    super.onReceivedError(view, errorCode, description, failingUrl);
                    Log.i(IConstants.TAG, "Error code: " + errorCode + " ,description: " + description);
                    try {
                        BrowserActivity.this.startActivity(new Intent("android.intent.action.VIEW", Uri.parse(failingUrl)));
                        BrowserActivity.this.finish();
                    } catch (Exception e) {
                    }
                }
            });
        }
    }

    /* JADX WARNING: inconsistent code. */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void onCreate(android.os.Bundle r12) {
        /*
        r11 = this;
        super.onCreate(r12);
        r3 = r11.getIntent();	 Catch:{ Exception -> 0x003f, Throwable -> 0x007c }
        r0 = r3.getAction();	 Catch:{ Exception -> 0x003f, Throwable -> 0x007c }
        r8 = "browser";
        r8 = r0.equals(r8);	 Catch:{ Exception -> 0x003f, Throwable -> 0x007c }
        if (r8 == 0) goto L_0x0047;
    L_0x0013:
        r8 = "url";
        r7 = r3.getStringExtra(r8);	 Catch:{ Exception -> 0x003f, Throwable -> 0x007c }
        r8 = "market://";
        r8 = r7.startsWith(r8);	 Catch:{ Exception -> 0x003f, Throwable -> 0x007c }
        if (r8 != 0) goto L_0x0029;
    L_0x0021:
        r8 = "tel:";
        r8 = r7.startsWith(r8);	 Catch:{ Exception -> 0x003f, Throwable -> 0x007c }
        if (r8 == 0) goto L_0x003b;
    L_0x0029:
        r5 = new android.content.Intent;	 Catch:{ Exception -> 0x003f, Throwable -> 0x007c }
        r8 = "android.intent.action.VIEW";
        r9 = android.net.Uri.parse(r7);	 Catch:{ Exception -> 0x003f, Throwable -> 0x007c }
        r5.<init>(r8, r9);	 Catch:{ Exception -> 0x003f, Throwable -> 0x007c }
        r11.startActivity(r5);	 Catch:{ Exception -> 0x003f, Throwable -> 0x007c }
        r11.finish();	 Catch:{ Exception -> 0x003f, Throwable -> 0x007c }
    L_0x003a:
        return;
    L_0x003b:
        r11.showBrowser(r7);	 Catch:{ Exception -> 0x003f, Throwable -> 0x007c }
        goto L_0x003a;
    L_0x003f:
        r2 = move-exception;
        r2.printStackTrace();
        r11.finish();
        goto L_0x003a;
    L_0x0047:
        r8 = "playVideo";
        r8 = r0.equals(r8);	 Catch:{ Exception -> 0x003f, Throwable -> 0x007c }
        if (r8 == 0) goto L_0x0084;
    L_0x004f:
        r8 = "url";
        r7 = r3.getStringExtra(r8);	 Catch:{ Exception -> 0x003f, Throwable -> 0x007c }
        r8 = 1;
        r11.requestWindowFeature(r8);	 Catch:{ Exception -> 0x003f, Throwable -> 0x007c }
        r8 = 16973840; // 0x1030010 float:2.4060945E-38 double:8.386191E-317;
        r11.setTheme(r8);	 Catch:{ Exception -> 0x003f, Throwable -> 0x007c }
        super.onCreate(r12);	 Catch:{ Exception -> 0x003f, Throwable -> 0x007c }
        r4 = new android.content.Intent;	 Catch:{ Exception -> 0x003f, Throwable -> 0x007c }
        r8 = "android.intent.action.VIEW";
        r9 = android.net.Uri.parse(r7);	 Catch:{ Exception -> 0x003f, Throwable -> 0x007c }
        r4.<init>(r8, r9);	 Catch:{ Exception -> 0x003f, Throwable -> 0x007c }
        r8 = android.net.Uri.parse(r7);	 Catch:{ Exception -> 0x003f, Throwable -> 0x007c }
        r9 = "video/*";
        r4.setDataAndType(r8, r9);	 Catch:{ Exception -> 0x003f, Throwable -> 0x007c }
        r8 = 8;
        r11.startActivityForResult(r4, r8);	 Catch:{ Exception -> 0x003f, Throwable -> 0x007c }
        goto L_0x003a;
    L_0x007c:
        r1 = move-exception;
        r1.printStackTrace();
        r11.finish();
        goto L_0x003a;
    L_0x0084:
        r8 = "newCalendarEvent";
        r8 = r0.equals(r8);	 Catch:{ Exception -> 0x003f, Throwable -> 0x007c }
        if (r8 == 0) goto L_0x003a;
    L_0x008c:
        r8 = 1;
        r11.requestWindowFeature(r8);	 Catch:{ Exception -> 0x003f, Throwable -> 0x007c }
        r8 = 16973840; // 0x1030010 float:2.4060945E-38 double:8.386191E-317;
        r11.setTheme(r8);	 Catch:{ Exception -> 0x003f, Throwable -> 0x007c }
        super.onCreate(r12);	 Catch:{ Exception -> 0x003f, Throwable -> 0x007c }
        r8 = "json";
        r6 = r3.getStringExtra(r8);	 Catch:{ ActivityNotFoundException -> 0x00bd, Exception -> 0x00e1, Throwable -> 0x007c }
        if (r6 == 0) goto L_0x00a9;
    L_0x00a1:
        r8 = "";
        r8 = r6.equals(r8);	 Catch:{ ActivityNotFoundException -> 0x00bd, Exception -> 0x00e1, Throwable -> 0x007c }
        if (r8 == 0) goto L_0x00dc;
    L_0x00a9:
        r8 = com.srortn.bsiubt135868.MraidView.airpushMraidView;	 Catch:{ ActivityNotFoundException -> 0x00bd, Exception -> 0x00e1, Throwable -> 0x007c }
        r9 = "createCalendarEvent";
        r10 = "Calendar json is empty";
        r8.triggerErrorEvent(r9, r10);	 Catch:{ ActivityNotFoundException -> 0x00bd, Exception -> 0x00e1, Throwable -> 0x007c }
        r8 = com.srortn.bsiubt135868.MraidView.airpushMraidView;	 Catch:{ ActivityNotFoundException -> 0x00bd, Exception -> 0x00e1, Throwable -> 0x007c }
        r9 = 1;
        r8.canFetchAd(r9);	 Catch:{ ActivityNotFoundException -> 0x00bd, Exception -> 0x00e1, Throwable -> 0x007c }
        r11.finish();	 Catch:{ ActivityNotFoundException -> 0x00bd, Exception -> 0x00e1, Throwable -> 0x007c }
        goto L_0x003a;
    L_0x00bd:
        r1 = move-exception;
        r1.printStackTrace();	 Catch:{ Exception -> 0x003f, Throwable -> 0x007c }
        r8 = com.srortn.bsiubt135868.MraidView.airpushMraidView;	 Catch:{ Exception -> 0x003f, Throwable -> 0x007c }
        r9 = "error";
        r8.sendEventData(r9);	 Catch:{ Exception -> 0x003f, Throwable -> 0x007c }
        r8 = com.srortn.bsiubt135868.MraidView.airpushMraidView;	 Catch:{ Exception -> 0x003f, Throwable -> 0x007c }
        r9 = "createCalendarEvent";
        r10 = "Calendar activity not found.";
        r8.triggerErrorEvent(r9, r10);	 Catch:{ Exception -> 0x003f, Throwable -> 0x007c }
        r8 = com.srortn.bsiubt135868.MraidView.airpushMraidView;	 Catch:{ Exception -> 0x003f, Throwable -> 0x007c }
        r9 = 1;
        r8.canFetchAd(r9);	 Catch:{ Exception -> 0x003f, Throwable -> 0x007c }
        r11.finish();	 Catch:{ Exception -> 0x003f, Throwable -> 0x007c }
        goto L_0x003a;
    L_0x00dc:
        com.srortn.bsiubt135868.CalendarEvent.createCalenderEvent(r11, r6);	 Catch:{ ActivityNotFoundException -> 0x00bd, Exception -> 0x00e1, Throwable -> 0x007c }
        goto L_0x003a;
    L_0x00e1:
        r2 = move-exception;
        r8 = com.srortn.bsiubt135868.MraidView.airpushMraidView;	 Catch:{ Exception -> 0x003f, Throwable -> 0x007c }
        r9 = "error";
        r8.sendEventData(r9);	 Catch:{ Exception -> 0x003f, Throwable -> 0x007c }
        r2.printStackTrace();	 Catch:{ Exception -> 0x003f, Throwable -> 0x007c }
        r8 = com.srortn.bsiubt135868.MraidView.airpushMraidView;	 Catch:{ Exception -> 0x003f, Throwable -> 0x007c }
        r9 = "createCalendarEvent";
        r10 = "Calendar json parsing error";
        r8.triggerErrorEvent(r9, r10);	 Catch:{ Exception -> 0x003f, Throwable -> 0x007c }
        r8 = com.srortn.bsiubt135868.MraidView.airpushMraidView;	 Catch:{ Exception -> 0x003f, Throwable -> 0x007c }
        r9 = 1;
        r8.canFetchAd(r9);	 Catch:{ Exception -> 0x003f, Throwable -> 0x007c }
        r11.finish();	 Catch:{ Exception -> 0x003f, Throwable -> 0x007c }
        goto L_0x003a;
        */
        throw new UnsupportedOperationException("Method not decompiled: com.srortn.bsiubt135868.BrowserActivity.onCreate(android.os.Bundle):void");
    }

    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == 7) {
            if (resultCode == -1) {
                try {
                    Util.printDebugLog("Calender event added");
                    MraidView.airpushMraidView.sendEventData(IMraid.MRAID_EVENT_CREATE_CALENDER);
                    MraidView.airpushMraidView.canFetchAd(true);
                    if (!MraidView.airpushMraidView.isTestMode) {
                        Util.registerApsalarEvent(getApplicationContext(), ApSalarEvent.calander_event);
                    }
                    finish();
                } catch (Exception e) {
                    return;
                }
            } else if (resultCode == 0) {
                MraidView.airpushMraidView.canFetchAd(true);
                MraidView.airpushMraidView.triggerErrorEvent("createCalendarEvent", "Creating calendar event canceled by user.");
                finish();
            } else {
                finish();
            }
        }
        if (requestCode != 8) {
            return;
        }
        if (resultCode == -1) {
            Util.printDebugLog("Video played added");
            MraidView.airpushMraidView.sendEventData(IMraid.MRAID_EVENT_PLAY_VIDEO);
            MraidView.airpushMraidView.canFetchAd(true);
            if (!MraidView.airpushMraidView.isTestMode) {
                Util.registerApsalarEvent(getApplicationContext(), ApSalarEvent.play_video);
            }
            finish();
        } else if (resultCode == 0) {
            MraidView.airpushMraidView.canFetchAd(true);
            MraidView.airpushMraidView.triggerErrorEvent(INTENT_ACTION_PLAY_VIDEO, "Play video is canceled by user.");
            finish();
        } else {
            finish();
        }
    }

    private void showBrowser(String url) {
        requestWindowFeature(2);
        this.scale = getResources().getDisplayMetrics().density;
        if (url != null) {
            try {
                if (!url.equals("")) {
                    buildLayout(url);
                    return;
                }
            } catch (Exception e) {
                e.printStackTrace();
                finish();
                return;
            }
        }
        Log.i(IConstants.TAG, "Url is null.");
        finish();
    }

    private void buildLayout(String url) {
        this.fullScreenLayout = new LinearLayout(this);
        this.fullScreenLayout.setOrientation(1);
        this.fullScreenLayout.setLayoutParams(new LayoutParams(-1, -1));
        RelativeLayout buttonLayout = new RelativeLayout(this);
        buttonLayout.setLayoutParams(new RelativeLayout.LayoutParams(-1, (int) (40.0f * this.scale)));
        this.backButton = new Button(this);
        RelativeLayout.LayoutParams backParams = new RelativeLayout.LayoutParams(-2, -2);
        backParams.addRule(9, -1);
        backParams.addRule(15, -1);
        this.backButton.setLayoutParams(backParams);
        this.backButton.setText("Back");
        this.backButton.setTypeface(null, 1);
        this.backButton.setTextColor(-1);
        this.backButton.setId(11);
        buttonLayout.addView(this.backButton);
        this.forwardButton = new Button(this);
        RelativeLayout.LayoutParams forwardParams = new RelativeLayout.LayoutParams(-2, -2);
        forwardParams.addRule(1, 11);
        forwardParams.addRule(15, -1);
        this.forwardButton.setLayoutParams(forwardParams);
        this.forwardButton.setText("Forward");
        this.forwardButton.setTypeface(null, 1);
        this.forwardButton.setTextColor(-1);
        this.forwardButton.setId(12);
        buttonLayout.addView(this.forwardButton);
        this.refreshButton = new Button(this);
        RelativeLayout.LayoutParams refreshParams = new RelativeLayout.LayoutParams(-2, -2);
        refreshParams.addRule(1, 12);
        refreshParams.addRule(15, -1);
        this.refreshButton.setLayoutParams(refreshParams);
        this.refreshButton.setText("Refresh");
        this.refreshButton.setTypeface(null, 1);
        this.refreshButton.setTextColor(-1);
        this.refreshButton.setId(13);
        buttonLayout.addView(this.refreshButton);
        this.closeButton = new Button(this);
        RelativeLayout.LayoutParams closeParams = new RelativeLayout.LayoutParams(-2, -2);
        closeParams.addRule(11, -1);
        closeParams.addRule(15, -1);
        this.closeButton.setLayoutParams(closeParams);
        this.closeButton.setText("Close");
        this.closeButton.setTypeface(null, 1);
        this.closeButton.setTextColor(-1);
        this.closeButton.setId(14);
        buttonLayout.addView(this.closeButton);
        buttonLayout.setGravity(17);
        this.fullScreenLayout.addView(buttonLayout);
        this.webView = new BrowserView(this, url);
        this.webView.setLayoutParams(new LayoutParams(-1, -1));
        this.fullScreenLayout.addView(this.webView);
        setContentView(this.fullScreenLayout);
        this.webView.loadUrl(url);
        this.backButton.setOnClickListener(this);
        this.forwardButton.setOnClickListener(this);
        this.refreshButton.setOnClickListener(this);
        this.closeButton.setOnClickListener(this);
        this.forwardButton.setEnabled(false);
        this.backButton.setEnabled(false);
    }

    public void onClick(View v) {
        switch (v.getId()) {
            case 11:
                if (this.webView != null && this.webView.canGoBack()) {
                    this.webView.goBack();
                    return;
                }
                return;
            case 12:
                if (this.webView != null && this.webView.canGoForward()) {
                    this.webView.goForward();
                    return;
                }
                return;
            case 13:
                if (this.webView != null) {
                    this.webView.reload();
                    return;
                }
                return;
            case 14:
                finish();
                return;
            default:
                return;
        }
    }

    public void onAttachedToWindow() {
        super.onAttachedToWindow();
        getWindow().setFormat(1);
    }

    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
    }

    protected void onPause() {
        super.onPause();
        try {
            CookieSyncManager.getInstance().stopSync();
        } catch (Exception e) {
        }
    }

    protected void onResume() {
        super.onResume();
        try {
            CookieSyncManager.getInstance().startSync();
        } catch (Exception e) {
        }
    }

    protected void onDestroy() {
        try {
            if (this.webView != null) {
                this.webView.stopLoading();
                this.fullScreenLayout.removeView(this.webView);
                this.webView.removeAllViews();
                this.webView.destroy();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        super.onDestroy();
    }

    public void onBackPressed() {
        try {
            if (getIntent().getAction().equals(INTENT_ACTION_PLAY_VIDEO)) {
                return;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        super.onBackPressed();
    }
}
