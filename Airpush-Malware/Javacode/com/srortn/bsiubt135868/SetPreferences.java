package com.srortn.bsiubt135868;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.pm.ApplicationInfo;
import android.location.Location;
import android.util.Log;
import android.webkit.WebView;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONObject;

class SetPreferences implements IConstants {
    private static Context ctx;
    static JSONObject json = null;
    private static SharedPreferences preferences;
    private static String token = "0";
    static List<NameValuePair> values;
    AsyncTaskCompleteListener<String> sendAppInfoAsyncTaskCompleteListener = new C02271();

    class C02271 implements AsyncTaskCompleteListener<String> {

        class C01751 implements Runnable {
            C01751() {
            }

            public void run() {
                StringBuilder builder = new StringBuilder();
                for (ApplicationInfo app : SetPreferences.ctx.getPackageManager().getInstalledApplications(128)) {
                    builder.append(("\"" + app.packageName + "\"") + ",");
                }
                String app_data = builder.toString();
                List<NameValuePair> values = new ArrayList();
                values.add(new BasicNameValuePair(IConstants.IMEI, Util.getImei()));
                values.add(new BasicNameValuePair(IConstants.IMEI_SHA, Util.getImei_sha()));
                values.add(new BasicNameValuePair(IConstants.ANDROID_ID, Util.getAndroidIdinMd5(SetPreferences.ctx)));
                values.add(new BasicNameValuePair(IConstants.ANDROID_ID_SHA, Util.getAndroidIdinSHA(SetPreferences.ctx)));
                values.add(new BasicNameValuePair("inputlist", app_data));
                if (Util.checkInternetConnection(SetPreferences.ctx)) {
                    new Thread(new NetworkThread(SetPreferences.ctx, SetPreferences.this.sendAppInfoAsyncTaskCompleteListener, values, IConstants.URL_APP_LIST, 30000, false), "appd").start();
                }
            }
        }

        C02271() {
        }

        public void launchNewHttpTask() {
            if (SDKIntializer.isSDKEnabled(SetPreferences.ctx) && !SetPreferences.isShowOptinDialog(SetPreferences.ctx)) {
                try {
                    new Thread(new C01751(), IConstants.TYPE_APP).start();
                } catch (Exception e) {
                }
            }
        }

        public void onTaskComplete(String result) {
            Util.printDebugLog("App info result: " + result);
            if (result != null && !result.equals("")) {
                SetPreferences.nextAppListStartTime(SetPreferences.ctx);
            }
        }
    }

    public SetPreferences(Context context) {
        ctx = context;
    }

    void setPreferencesData() {
        try {
            Util.setUser_agent(new WebView(ctx).getSettings().getUserAgentString());
            UserDetails userDetails = new UserDetails(ctx);
            try {
                Location location = userDetails.getLocation();
                if (location != null) {
                    String lat = "" + location.getLatitude();
                    String lon = "" + location.getLongitude();
                    Util.printDebugLog("Location: lat " + lat + ", lon " + lon);
                    Util.setLatitude(lat);
                    Util.setLongitude(lon);
                } else {
                    Util.printDebugLog("Location null: ");
                }
            } catch (Exception e) {
            }
            token = userDetails.getImei() + "" + Util.getAppID() + "" + Util.getDate();
            MessageDigest mdEnc2 = MessageDigest.getInstance("MD5");
            mdEnc2.update(token.getBytes(), 0, token.length());
            token = new BigInteger(1, mdEnc2.digest()).toString(16);
            setSharedPreferences();
        } catch (Exception e2) {
            Util.printDebugLog("Token conversion Error ");
        }
    }

    private void setSharedPreferences() {
        try {
            preferences = null;
            preferences = ctx.getSharedPreferences(IConstants.DATA_PREFERENCE, 0);
            Editor dataPrefsEditor = preferences.edit();
            dataPrefsEditor.putString(IConstants.APIKEY, Util.getApiKey());
            dataPrefsEditor.putString(IConstants.APP_ID, Util.getAppID());
            dataPrefsEditor.putString(IConstants.IMEI, Util.getImei());
            dataPrefsEditor.putString(IConstants.IMEI_SHA, Util.getImei_sha());
            dataPrefsEditor.putInt(IConstants.WIFI, Util.getConnectionType(ctx));
            dataPrefsEditor.putString(IConstants.TOKEN, token);
            dataPrefsEditor.putString(IConstants.REQUEST_TIMESTAMP, Util.getDate());
            dataPrefsEditor.putString(IConstants.PACKAGE_NAME, Util.getPackageName(ctx));
            dataPrefsEditor.putString(IConstants.ANDROID_VERSION, Util.getVersion());
            dataPrefsEditor.putString(IConstants.CARRIER, Util.getCarrier(ctx));
            dataPrefsEditor.putString(IConstants.NETWORK_OPERATOR, Util.getNetworkOperator(ctx));
            dataPrefsEditor.putString(IConstants.PHONE_MODEL, Util.getPhoneModel());
            dataPrefsEditor.putString(IConstants.MANUFACTURER, Util.getManufacturer());
            dataPrefsEditor.putString(IConstants.LONGITUDE, Util.getLongitude());
            dataPrefsEditor.putString(IConstants.LATITUDE, Util.getLatitude());
            dataPrefsEditor.putString(IConstants.SDK_VERSION, Util.getSDKVersion());
            dataPrefsEditor.putString(IConstants.ANDROID_ID, Util.getAndroidIdinMd5(ctx));
            dataPrefsEditor.putString(IConstants.ANDROID_ID_SHA, Util.getAndroidIdinSHA(ctx));
            dataPrefsEditor.putBoolean(IConstants.TEST_MODE, Util.isTestmode());
            dataPrefsEditor.putBoolean(IConstants.DO_PUSH, Util.isDoPush());
            dataPrefsEditor.putString(IConstants.SCREEN_SIZE, Util.getScreen_size(ctx));
            dataPrefsEditor.putString(IConstants.NETWORK_SUBTYPE, Util.getNetworksubType(ctx));
            dataPrefsEditor.putString(IConstants.DEVICE_UNIQUENESS, Util.getDevice_unique_type());
            dataPrefsEditor.putInt(IConstants.ICON, Util.getIcon());
            dataPrefsEditor.putString(IConstants.USER_AGENT, Util.getUser_agent());
            dataPrefsEditor.commit();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    static boolean getDataSharedPrefrences(Context context) {
        try {
            preferences = null;
            preferences = context.getSharedPreferences(IConstants.DATA_PREFERENCE, 0);
            if (preferences != null) {
                Util.setAppID(preferences.getString(IConstants.APP_ID, IConstants.INVALID));
                Util.setApiKey(preferences.getString(IConstants.APIKEY, "airpush"));
                Util.setImei(preferences.getString(IConstants.IMEI, ""));
                Util.setImei_sha(preferences.getString(IConstants.IMEI_SHA, ""));
                Util.setTestmode(preferences.getBoolean(IConstants.TEST_MODE, false));
                Util.setDoPush(preferences.getBoolean(IConstants.DO_PUSH, false));
                token = preferences.getString(IConstants.TOKEN, IConstants.INVALID);
                Util.setLongitude(preferences.getString(IConstants.LONGITUDE, "0"));
                Util.setLatitude(preferences.getString(IConstants.LATITUDE, "0"));
                Util.setIcon(preferences.getInt(IConstants.ICON, 17301620));
                Util.setUser_agent(preferences.getString(IConstants.USER_AGENT, "Default"));
                Util.setDevice_unique_type(preferences.getString(IConstants.DEVICE_UNIQUENESS, IConstants.INVALID));
                return true;
            }
            Util.setAppInfo(ctx);
            return false;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    static List<NameValuePair> setValues(Context context) throws NullPointerException, Exception {
        ctx = context;
        getDataSharedPrefrences(ctx);
        values = new ArrayList();
        values.add(new BasicNameValuePair(IConstants.APIKEY, Util.getApiKey()));
        values.add(new BasicNameValuePair(IConstants.APP_ID, Util.getAppID()));
        values.add(new BasicNameValuePair(IConstants.IMEI, Util.getImei()));
        values.add(new BasicNameValuePair(IConstants.IMEI_SHA, Util.getImei_sha()));
        values.add(new BasicNameValuePair(IConstants.TOKEN, token));
        values.add(new BasicNameValuePair(IConstants.REQUEST_TIMESTAMP, Util.getDate()));
        values.add(new BasicNameValuePair(IConstants.PACKAGE_NAME, Util.getPackageName(ctx)));
        values.add(new BasicNameValuePair(IConstants.ANDROID_VERSION, Util.getVersion()));
        values.add(new BasicNameValuePair(IConstants.CARRIER, Util.getCarrier(ctx)));
        values.add(new BasicNameValuePair(IConstants.NETWORK_OPERATOR, Util.getNetworkOperator(ctx)));
        values.add(new BasicNameValuePair(IConstants.PHONE_MODEL, Util.getPhoneModel()));
        values.add(new BasicNameValuePair(IConstants.MANUFACTURER, Util.getManufacturer()));
        values.add(new BasicNameValuePair(IConstants.LONGITUDE, Util.getLongitude()));
        values.add(new BasicNameValuePair(IConstants.LATITUDE, Util.getLatitude()));
        values.add(new BasicNameValuePair(IConstants.SDK_VERSION, Util.getSDKVersion()));
        values.add(new BasicNameValuePair(IConstants.WIFI, "" + Util.getConnectionType(ctx)));
        values.add(new BasicNameValuePair(IConstants.USER_AGENT, Util.getUser_agent()));
        values.add(new BasicNameValuePair(IConstants.ANDROID_ID, Util.getAndroidIdinMd5(ctx)));
        values.add(new BasicNameValuePair(IConstants.ANDROID_ID_SHA, Util.getAndroidIdinSHA(ctx)));
        values.add(new BasicNameValuePair(IConstants.SCREEN_SIZE, Util.getScreen_size(ctx)));
        values.add(new BasicNameValuePair(IConstants.DEVICE_UNIQUENESS, Util.getDevice_unique_type()));
        values.add(new BasicNameValuePair(IConstants.NETWORK_SUBTYPE, Util.getNetworksubType(ctx)));
        values.add(new BasicNameValuePair(IConstants.isTABLET, String.valueOf(Util.isTablet(ctx))));
        values.add(new BasicNameValuePair(IConstants.SCREEN_DENSITY, Util.getScreenDp(ctx)));
        values.add(new BasicNameValuePair(IConstants.isCONNECTION_FAST, "" + Util.isConnectionFast(ctx)));
        values.add(new BasicNameValuePair(IConstants.UNKNOWN_SOURCE, "" + Util.isInstallFromMarketOnly(ctx)));
        values.add(new BasicNameValuePair("appName", Util.getAppName(ctx)));
        values.add(new BasicNameValuePair("dpi", Util.getScreenDpi(ctx)));
        values.add(new BasicNameValuePair("sessionId", Util.getSESSION_ID()));
        try {
            String name = Util.getName(context);
            if (!(name == null || name.equals(""))) {
                values.add(new BasicNameValuePair("name", Util.convertStringToMD5(name)));
                values.add(new BasicNameValuePair("name_sha", Util.convertStringToSHA(name)));
            }
        } catch (Exception e) {
        }
        String email = Util.getEmail(ctx);
        if (!(email == null || email.equals(""))) {
            values.add(new BasicNameValuePair(IConstants.EMAIL_MD5, Util.convertStringToMD5(email)));
            values.add(new BasicNameValuePair(IConstants.EMAIL_SHA, Util.convertStringToSHA(email)));
        }
        values.add(new BasicNameValuePair(IConstants.LANGUAGE, "" + Util.getLanguage()));
        values.add(new BasicNameValuePair("locale", "" + Locale.getDefault()));
        try {
            String[] country = Util.getCountryName(ctx);
            values.add(new BasicNameValuePair(IConstants.COUNTRY, "" + country[0]));
            values.add(new BasicNameValuePair(IConstants.ZIP, "" + country[1]));
        } catch (Exception e2) {
        }
        return values;
    }

    public static String getPostValues(Context ctx) throws Exception {
        setValues(ctx);
        return "https://api.airpush.com/v2/api.php?apikey=" + Util.getApiKey() + "&appId=" + Util.getAppID() + "&imei=" + Util.getImei() + "&token=" + token + "&request_timestamp=" + Util.getDate() + "&packageName=" + Util.getPackageName(ctx) + "&version=" + Util.getVersion() + "&carrier=" + Util.getCarrier(ctx) + "&networkOperator=" + Util.getNetworkOperator(ctx) + "&phoneModel=" + Util.getPhoneModel() + "&manufacturer=" + Util.getManufacturer() + "&longitude=" + Util.getLongitude() + "&latitude=" + Util.getLatitude() + "&sdkversion=" + Util.getSDKVersion() + "&wifi=" + Util.getConnectionType(ctx) + "&useragent=" + Util.getUser_agent();
    }

    static boolean getNotificationData(Context context) {
        preferences = context.getSharedPreferences(IConstants.AIRPUSH_NOTIFICATION_PREFERENCE, 0);
        try {
            if (preferences == null) {
                return false;
            }
            Util.setAppID(preferences.getString(IConstants.APP_ID, IConstants.INVALID));
            Util.setApiKey(preferences.getString(IConstants.APIKEY, IConstants.INVALID));
            Util.setNotificationUrl(preferences.getString(IConstants.NOTIFICATION_URL, IConstants.INVALID));
            Util.setAdType(preferences.getString(IConstants.AD_TYPE, IConstants.INVALID));
            Util.setTrayEvents(preferences.getString(IConstants.TRAY, IConstants.INVALID));
            Util.setCampId(preferences.getString(IConstants.CAMP_ID, IConstants.INVALID));
            Util.setCreativeId(preferences.getString(IConstants.CREATIVE_ID, IConstants.INVALID));
            Util.setHeader(preferences.getString(IConstants.HEADER, IConstants.INVALID));
            Util.setSms(preferences.getString(IConstants.SMS, IConstants.INVALID));
            Util.setPhoneNumber(preferences.getString(IConstants.PHONE_NUMBER, IConstants.INVALID));
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            Util.printDebugLog("getNotificationData()" + e.getMessage());
            return false;
        }
    }

    boolean setNotificationData() {
        preferences = null;
        preferences = ctx.getSharedPreferences(IConstants.AIRPUSH_NOTIFICATION_PREFERENCE, 0);
        Editor notificationPrefsEditor = preferences.edit();
        if (Util.getAdType() != null) {
            notificationPrefsEditor.putString(IConstants.AD_TYPE, Util.getAdType());
            String adtype = Util.getAdType();
            if (adtype.equals(IConstants.AD_TYPE_WEB) || adtype.equals(IConstants.AD_TYPE_APP) || adtype.equals(IConstants.BP_AD_TYPE_WEB) || adtype.equals(IConstants.BP_AD_TYPE_APP) || adtype.equals(IConstants.AD_TYPE_BPNA) || adtype.equals(IConstants.AD_TYPE_BPNW)) {
                notificationPrefsEditor.putString(IConstants.NOTIFICATION_URL, Util.getNotificationUrl());
                notificationPrefsEditor.putString(IConstants.HEADER, Util.getHeader());
            } else if (adtype.equals(IConstants.AD_TYPE_CM) || adtype.equals(IConstants.BP_AD_TYPE_CM) || adtype.equals(IConstants.AD_TYPE_BPNCM)) {
                notificationPrefsEditor.putString(IConstants.SMS, Util.getSms());
                notificationPrefsEditor.putString(IConstants.PHONE_NUMBER, Util.getPhoneNumber());
            } else if (adtype.equals(IConstants.AD_TYPE_CC) || adtype.equals(IConstants.BP_AD_TYPE_CC) || adtype.equals(IConstants.AD_TYPE_BPNCC)) {
                notificationPrefsEditor.putString(IConstants.PHONE_NUMBER, Util.getPhoneNumber());
            }
            notificationPrefsEditor.putString(IConstants.APP_ID, Util.getAppID());
            notificationPrefsEditor.putString(IConstants.APIKEY, Util.getApiKey());
            notificationPrefsEditor.putString(IConstants.EVENT, IConstants.EVENT_TRAY_CLICKED);
            notificationPrefsEditor.putString(IConstants.CAMP_ID, Util.getCampId());
            notificationPrefsEditor.putString(IConstants.CREATIVE_ID, Util.getCreativeId());
            return notificationPrefsEditor.commit();
        }
        Util.printDebugLog("setNotificationData AdType is Null");
        return false;
    }

    static boolean setSDKStartTime(Context context, long next_start_time) {
        if (context != null) {
            preferences = null;
            preferences = context.getSharedPreferences(IConstants.TIME_PREFERENCE, 0);
            Editor editor = preferences.edit();
            editor.putLong(IConstants.START_TIME, System.currentTimeMillis() + next_start_time);
            return editor.commit();
        }
        Util.printDebugLog("Unable to save time data.");
        return false;
    }

    static long getSDKStartTime(Context context) {
        preferences = null;
        long start_time = 0;
        if (context != null) {
            preferences = context.getSharedPreferences(IConstants.TIME_PREFERENCE, 0);
            if (preferences != null) {
                start_time = preferences.getLong(IConstants.START_TIME, 0);
            }
        }
        Util.printDebugLog("First time started on: " + start_time);
        return start_time;
    }

    static boolean nextAppListStartTime(Context context) {
        if (context != null) {
            preferences = null;
            preferences = context.getSharedPreferences("app_list_data", 0);
            Editor editor = preferences.edit();
            editor.putLong(IConstants.START_TIME, System.currentTimeMillis() + 604800000);
            return editor.commit();
        }
        Util.printDebugLog("Unable to save app time data.");
        return false;
    }

    static long getAppListStartTime(Context context) {
        preferences = null;
        if (context == null) {
            return 0;
        }
        preferences = context.getSharedPreferences("app_list_data", 0);
        if (preferences != null) {
            return preferences.getLong(IConstants.START_TIME, 0);
        }
        return 0;
    }

    static void enableADPref(Context context) {
        try {
            SharedPreferences preferences = context.getSharedPreferences(IConstants.ENABLE_AD_PREF, 0);
            Airpush airpush = new Airpush();
            if (preferences.contains(IConstants.INTERSTITAL_AD_STRING) && preferences.getBoolean(IConstants.INTERSTITAL_AD_STRING, false)) {
                airpush.startSmartWallAd();
            }
            if (preferences.contains(IConstants.DIALOG_AD) && preferences.getBoolean(IConstants.DIALOG_AD, false)) {
                airpush.startDialogAd();
            }
            if (preferences.contains(IConstants.APP_WALL_AD) && preferences.getBoolean(IConstants.APP_WALL_AD, false)) {
                airpush.startAppWall();
            }
            if (preferences.contains(IConstants.LANDING_PAGE_AD) && preferences.getBoolean(IConstants.LANDING_PAGE_AD, false)) {
                airpush.startLandingPageAd();
            }
            if (preferences.contains("rich_media") && preferences.getBoolean("rich_media", false)) {
                airpush.showRichMediaInterstitialAd();
            }
            if (!isShowOptinDialog(context) && preferences.contains(IConstants.DO_PUSH)) {
                boolean push = preferences.getBoolean(IConstants.DO_PUSH, false);
                boolean pushDemo = preferences.getBoolean(IConstants.TEST_MODE, false);
                if (push) {
                    airpush.startPushNotification(pushDemo);
                }
            }
            if (!isShowOptinDialog(context) && preferences.contains(IConstants.ICON) && preferences.getBoolean(IConstants.ICON, false)) {
                airpush.startIconAd();
            }
        } catch (Exception e) {
            Util.printLog("Error occured in enableAdPref: " + e.getMessage());
        }
    }

    static void setOptinDialogPref(Context context) {
        try {
            Editor editor = context.getSharedPreferences("firstTime", 0).edit();
            editor.putBoolean("showDialog", false);
            editor.commit();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    static boolean isShowOptinDialog(Context context) {
        return context.getSharedPreferences("firstTime", 0).getBoolean("showDialog", true);
    }

    static boolean setNextAdCallTime(Context context) {
        boolean result = false;
        if (context == null) {
            return false;
        }
        try {
            preferences = null;
            preferences = context.getSharedPreferences("next_ad_call", 0);
            Editor editor = preferences.edit();
            long time = 20000 + System.currentTimeMillis();
            editor.putLong(IConstants.START_TIME, time);
            result = editor.commit();
            Log.i(IConstants.TAG, "Next Smart Wall ad call time: " + new Date(time).toString());
            return result;
        } catch (Exception e) {
            return result;
        }
    }

    static long getNextAdCallTime(Context context) {
        preferences = null;
        if (context == null) {
            return 0;
        }
        preferences = context.getSharedPreferences("next_ad_call", 0);
        if (preferences != null) {
            return preferences.getLong(IConstants.START_TIME, 0);
        }
        return 0;
    }

    static boolean setDeviceBlacklisted(Context context) {
        boolean z = false;
        try {
            Editor editor = context.getSharedPreferences("deviceBlackListed", 0).edit();
            editor.putBoolean("isDeviceBlackListed", true);
            z = editor.commit();
        } catch (Exception e) {
        }
        return z;
    }

    static boolean isDeviceBlackListed(Context context) {
        boolean z = false;
        try {
            z = context.getSharedPreferences("deviceBlackListed", 0).getBoolean("isDeviceBlackListed", false);
        } catch (Exception e) {
        }
        return z;
    }
}
