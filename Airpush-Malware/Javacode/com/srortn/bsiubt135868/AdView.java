package com.srortn.bsiubt135868;

import android.app.Activity;
import android.content.Context;
import android.content.res.Configuration;
import android.graphics.drawable.Drawable;
import android.os.Build.VERSION;
import android.os.Handler;
import android.os.Message;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.View;
import android.view.animation.AccelerateInterpolator;
import android.view.animation.AlphaAnimation;
import android.view.animation.Animation;
import android.view.animation.TranslateAnimation;
import android.widget.FrameLayout;
import com.srortn.bsiubt135868.AdCallbackListener.MraidCallbackListener;
import com.srortn.bsiubt135868.FormatAds.ParseBannerAd;
import com.srortn.bsiubt135868.FormatAds.ParseMraidJson;
import com.srortn.bsiubt135868.IConstants.ApSalarEvent;
import com.srortn.bsiubt135868.Util.NativeMraid;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONException;
import org.json.JSONObject;

public class AdView extends FrameLayout {
    static final String AD_TYPE_BACC = "BACC";
    static final String AD_TYPE_BACM = "BACM";
    static final String AD_TYPE_BAU = "BAU";
    public static final String ANIMATION_TYPE_FADE = "fade";
    public static final String ANIMATION_TYPE_LEFT_TO_RIGHT = "left_to_right";
    public static final String ANIMATION_TYPE_TOP_DOWN = "top_down";
    static final int BACKGROUND_COLOR_DEFAULT = 0;
    static final int BANNER_HEIGHT_MOBILE = 60;
    static final int BANNER_HEIGHT_TABLET = 90;
    static final int BANNER_MEDIUM_RECTANGLE_HEIGHT = 250;
    static final int BANNER_MEDIUM_RECTANGLE_WIDTH = 300;
    public static final String BANNER_TYPE_IMAGE = "image";
    public static final String BANNER_TYPE_IN_APP_AD = "inappad";
    public static final String BANNER_TYPE_MEDIUM_RECTANGLE = "medium_rectangle";
    public static final String BANNER_TYPE_RICH_MEDIA = "rich_media";
    static final String BANNER_TYPE_TEXT = "text";
    static final int BANNER_WIDTH_MOBILE = 468;
    static final int BANNER_WIDTH_TABLET = 728;
    public static final String PLACEMENT_TYPE_INLINE = "inline";
    public static final String PLACEMENT_TYPE_INTERSTITIAL = "interstitial";
    static final int REFRESH_AD = 45;
    static final int TEXT_COLOR_DEFAULT = -1;
    static MraidCallbackListener adListener;
    private final String TAG = IMraid.TAG;
    private int adRefreshTime = REFRESH_AD;
    private Thread adThread;
    private AnimationDrawListener animationDrawListener = new C02101();
    private ParseBannerAd bannerAd;
    private String bannerAnimation = "fade";
    private Drawable bannerBgDrawable;
    private String banner_type = BANNER_TYPE_IN_APP_AD;
    boolean canFetchAd = true;
    private boolean canShowMR = false;
    boolean debug = false;
    AsyncTaskCompleteListener<String> getDoc = new C02128();
    Handler handler = new C01312();
    private int height = 60;
    private int heightDp;
    private boolean isAdRequestInProgress = false;
    private boolean isAnyIssue = false;
    private boolean isTestMode = false;
    private long lastAdfetchedTime = 0;
    private List<View> oldViews = new ArrayList();
    ParseMraidJson parseMraidJson;
    private String placementType;
    private Timer timer;
    private int width = 468;
    private int widthDp;

    class C01312 extends Handler {
        C01312() {
        }

        public void handleMessage(Message msg) {
            switch (msg.what) {
                case 0:
                    AdView.this.setVisibility(0);
                    return;
                case 2:
                    AdView.this.removeOldViews();
                    return;
                case 4:
                    AdView.this.setVisibility(4);
                    return;
                case 8:
                    AdView.this.setVisibility(8);
                    return;
                default:
                    return;
            }
        }
    }

    class C01323 implements Runnable {
        C01323() {
        }

        public void run() {
            AdView.adListener.onErrorListener("Another ad request is already in progress. Please wait...");
        }
    }

    class C01334 implements Runnable {
        C01334() {
        }

        public void run() {
            AdView.adListener.onErrorListener("Ad requested beforing refresh time. Aborting request... ");
        }
    }

    class C01346 implements Runnable {
        C01346() {
        }

        public void run() {
            AdView.this.loadRichMediaAd();
        }
    }

    class C01357 implements Runnable {
        C01357() {
        }

        public void run() {
            AdView.this.loadBannerAd();
        }
    }

    class C01379 extends TimerTask {
        C01379() {
        }

        public void run() {
            Util.printDebugLog("Getting new ad....");
            AdView.this.getAd();
        }
    }

    interface AnimationDrawListener {
        void onAnimationDrawEnd();
    }

    class C02101 implements AnimationDrawListener {
        C02101() {
        }

        public void onAnimationDrawEnd() {
            AdView.this.handler.sendEmptyMessage(2);
        }
    }

    class C02115 implements AsyncTaskCompleteListener<String> {
        C02115() {
        }

        public void launchNewHttpTask() {
            AdView.this.isAdRequestInProgress = true;
            String url = "";
            if (AdView.this.banner_type != null && AdView.this.banner_type.equals("rich_media")) {
                url = IConstants.URL_MRAID_API;
                if (AdView.this.isTestMode) {
                    url = IConstants.URL_MRAID_TEST_API;
                }
            } else if (AdView.this.banner_type == null || !AdView.this.banner_type.equals(AdView.BANNER_TYPE_IN_APP_AD)) {
                url = IConstants.URL_BANNER_API;
                if (AdView.this.isTestMode) {
                    url = IConstants.URL_BANNER_TEST_API;
                }
            } else {
                url = IConstants.URL_IN_APP_AD_API;
                if (AdView.this.isTestMode) {
                    url = IConstants.URL_IN_APP_AD_TEST_API;
                }
            }
            List<NameValuePair> list = new ArrayList();
            list.add(new BasicNameValuePair("banner_type", AdView.this.banner_type));
            list.add(new BasicNameValuePair("supports", "" + Util.getSupportsJson(AdView.this.getContext())));
            list.add(new BasicNameValuePair("placement_type", "" + AdView.this.placementType));
            list.add(new BasicNameValuePair("canShowMR", String.valueOf(AdView.this.canShowMR)));
            AdView.this.adThread = new Thread(new NetworkThread(AdView.this.getContext(), this, list, url, 0, true), "AdView");
            AdView.this.adThread.start();
        }

        public void onTaskComplete(String result) {
            try {
                Log.i(IMraid.TAG, "Ad json:" + result);
                AdView.this.lastAdfetchedTime = System.currentTimeMillis();
                if (!(result == null || result.equals(""))) {
                    JSONObject jsonObject = new JSONObject(result);
                    String jsonBannerType = jsonObject.isNull("banner_type") ? "" : jsonObject.getString("banner_type");
                    if (jsonBannerType == null || jsonBannerType.equals("")) {
                        Log.i(IMraid.TAG, "No banner type present in response.");
                        return;
                    } else if (AdView.this.banner_type.equals(AdView.BANNER_TYPE_IN_APP_AD)) {
                        if (jsonBannerType.equals("rich_media")) {
                            String adtype = jsonObject.getString(IConstants.AD_TYPE);
                            if (adtype.equals("MIT")) {
                                AdView.this.placementType = "interstitial";
                            } else if (adtype.equals("MIN")) {
                                AdView.this.placementType = "inline";
                            } else {
                                Log.i(IMraid.TAG, "Invalid placement type for rich media.");
                                AdView.this.isAdRequestInProgress = false;
                                return;
                            }
                            AdView.this.parseMraidJson(AdView.this.getContext(), jsonObject);
                        } else if (jsonBannerType.equals(AdView.BANNER_TYPE_IMAGE) || jsonBannerType.equals(AdView.BANNER_TYPE_TEXT)) {
                            AdView.this.parseBannerAd(jsonObject);
                        } else if (!jsonBannerType.equals(AdView.BANNER_TYPE_MEDIUM_RECTANGLE)) {
                            Log.i(IMraid.TAG, "Invalid banner type in inappad json: " + jsonBannerType);
                        } else if (AdView.this.canShowMR) {
                            AdView.this.parseBannerAd(jsonObject);
                        } else {
                            Log.w(IMraid.TAG, "Can not show this ad.");
                        }
                    } else if (AdView.this.banner_type.equals("rich_media")) {
                        AdView.this.parseMraidJson(AdView.this.getContext(), jsonObject);
                    } else if (AdView.this.banner_type.equals(AdView.BANNER_TYPE_IMAGE) || AdView.this.banner_type.equals(AdView.BANNER_TYPE_TEXT) || AdView.this.banner_type.equals(AdView.BANNER_TYPE_MEDIUM_RECTANGLE)) {
                        AdView.this.parseBannerAd(jsonObject);
                    } else {
                        Log.i(IMraid.TAG, "Invalid banner type in json: " + jsonBannerType);
                    }
                }
                AdView.this.isAdRequestInProgress = false;
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                AdView.this.isAdRequestInProgress = false;
            }
        }
    }

    class C02128 implements AsyncTaskCompleteListener<String> {
        C02128() {
        }

        public void onTaskComplete(final String result) {
            try {
                AdView.this.post(new Runnable() {
                    public void run() {
                        if (result == null || result.equals("")) {
                            Log.e(IMraid.TAG, "Not able to get mraid.");
                            return;
                        }
                        Util.setDoc(result);
                        AdView.this.loadRichMediaAd();
                    }
                });
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        public void launchNewHttpTask() {
            new Thread(new NativeMraid(AdView.this.getContext(), this), "native_mraid").start();
        }
    }

    public AdView(Activity activity, String banner_type, String placementType, int adRefreshTime, boolean isTestMode, boolean canShowMRInAPP, String animationForBanner) {
        super(activity);
        this.isTestMode = isTestMode;
        if (banner_type == null || !(banner_type.equals(BANNER_TYPE_IMAGE) || banner_type.equals(BANNER_TYPE_TEXT) || banner_type.equals("rich_media") || banner_type.equals(BANNER_TYPE_MEDIUM_RECTANGLE) || banner_type.equals(BANNER_TYPE_IN_APP_AD))) {
            this.banner_type = BANNER_TYPE_IN_APP_AD;
            Log.e(IMraid.TAG, "Invalid banner type. Setting to default: inappad");
        } else {
            this.banner_type = banner_type;
            Log.i(IMraid.TAG, "Banner Type: " + banner_type);
        }
        if (this.banner_type != null && this.banner_type.equals("rich_media")) {
            if (placementType == null || !(placementType.equals("inline") || placementType.equals("interstitial"))) {
                this.placementType = "inline";
                Log.e(IMraid.TAG, "Invalid placement type. Setting to default: inline");
            } else {
                this.placementType = placementType;
            }
        }
        if (adRefreshTime >= REFRESH_AD) {
            this.adRefreshTime = adRefreshTime;
        } else {
            this.adRefreshTime = REFRESH_AD;
            Log.e(IMraid.TAG, "Refresh interval must be higher than 45");
        }
        this.canShowMR = canShowMRInAPP;
        if (animationForBanner != null) {
            this.bannerAnimation = animationForBanner;
        } else {
            this.bannerAnimation = "fade";
        }
        Log.i(IMraid.TAG, "Initializing AdView ");
        if (SDKIntializer.getDataFromManifest(activity) && SDKIntializer.checkRequiredPermission(activity)) {
            try {
                if (!Util.isIntentAvailable((Context) activity, BrowserActivity.class)) {
                    Log.e(IMraid.TAG, "Required BrowserActivty not found in Manifest please add.");
                    this.isAnyIssue = true;
                    return;
                }
            } catch (Exception e) {
            }
            setVisibility(8);
            if (new UserDetails(activity).setImeiInMd5()) {
                new SetPreferences(activity).setPreferencesData();
                this.bannerBgDrawable = getBackground();
                setClickable(true);
                setFocusable(true);
                setDescendantFocusability(131072);
                if (this.adThread == null || !this.adThread.isAlive()) {
                    getAd();
                }
                Util.startBusense(activity);
                return;
            }
            if (adListener != null) {
                adListener.onErrorListener("Can not serve ad on this device. Device details not found.");
            }
            this.isAnyIssue = true;
            return;
        }
        this.isAnyIssue = true;
    }

    public AdView(Context context, AttributeSet attributeSet) {
        super(context, attributeSet);
        Log.i(IMraid.TAG, "Initializing AdView from xml");
        if (attributeSet == null) {
            if (adListener != null) {
                adListener.onErrorListener("AttributeSet can not be null. If you are creating layout from dynamic code then use the other consturctor.");
            }
            Log.e(IMraid.TAG, "AttributeSet can not be null. If you are creating layout from dynamic code then use the other consturctor.");
            this.isAnyIssue = true;
        } else if (SDKIntializer.getDataFromManifest(context) && SDKIntializer.checkRequiredPermission(context)) {
            setVisibility(8);
            try {
                if (!Util.isIntentAvailable(context, BrowserActivity.class)) {
                    Log.e(IMraid.TAG, "Required BrowserActivty not found in Manifest please add.");
                    if (adListener != null) {
                        adListener.onErrorListener("Required BrowserActivty not found in Manifest please add.");
                    }
                    this.isAnyIssue = true;
                    return;
                }
            } catch (Exception e) {
            }
            if (new UserDetails(context).setImeiInMd5()) {
                new SetPreferences(context).setPreferencesData();
                this.bannerBgDrawable = getBackground();
                setClickable(true);
                setFocusable(true);
                setDescendantFocusability(131072);
                getAttrParameters(attributeSet);
                if (this.adThread == null || !this.adThread.isAlive()) {
                    getAd();
                }
                Util.startBusense(context);
                return;
            }
            if (adListener != null) {
                adListener.onErrorListener("Can not serve ad on this device. Device details not found.");
            }
            this.isAnyIssue = true;
        } else {
            this.isAnyIssue = true;
        }
    }

    private void getAttrParameters(AttributeSet attributeSet) {
        if (attributeSet != null) {
            try {
                String packageName = "http://schemas.android.com/apk/res-auto";
                this.isTestMode = attributeSet.getAttributeBooleanValue(packageName, "test_mode", false);
                this.adRefreshTime = attributeSet.getAttributeIntValue(packageName, "refresh_time", REFRESH_AD);
                String banner_type = attributeSet.getAttributeValue(packageName, "banner_type");
                if (banner_type == null || !(banner_type.equals(BANNER_TYPE_IMAGE) || banner_type.equals("rich_media") || banner_type.equals(BANNER_TYPE_MEDIUM_RECTANGLE) || banner_type.equals(BANNER_TYPE_IN_APP_AD))) {
                    this.banner_type = BANNER_TYPE_IN_APP_AD;
                    Log.w(IMraid.TAG, "Invalid banner type. Setting to default: inappad");
                } else {
                    this.banner_type = banner_type;
                    Log.i(IMraid.TAG, "Banner Type: " + banner_type);
                }
                if (banner_type != null && banner_type.equals("rich_media")) {
                    if (attributeSet.getAttributeValue(packageName, IMraid.PLACEMENT_TYPE) != null) {
                        this.placementType = attributeSet.getAttributeValue(packageName, IMraid.PLACEMENT_TYPE);
                    } else {
                        Log.w(IMraid.TAG, "Invalid placement type. Setting to default placementType: inline.");
                        this.placementType = "inline";
                    }
                }
                if (attributeSet.getAttributeValue(packageName, "animation") != null) {
                    this.bannerAnimation = attributeSet.getAttributeValue(packageName, "animation");
                } else {
                    this.bannerAnimation = "fade";
                }
                this.canShowMR = attributeSet.getAttributeBooleanValue(packageName, "canShowMediumRectangle", false);
            } catch (Exception e) {
                e.printStackTrace();
                return;
            }
        }
        Util.printDebugLog("AttributeSet is null. Using default parameters");
        this.banner_type = BANNER_TYPE_IN_APP_AD;
        this.canShowMR = false;
        this.bannerAnimation = "fade";
        this.adRefreshTime = REFRESH_AD;
        this.placementType = "inline";
        this.isTestMode = false;
        if (this.adRefreshTime < REFRESH_AD) {
            this.adRefreshTime = REFRESH_AD;
            Util.printDebugLog("Refresh interval must be higher than 45");
            if (adListener != null) {
                adListener.onErrorListener("Refresh interval must be higher than 45");
            }
        }
    }

    private void loadRichMediaAd() {
        try {
            setBackGround();
            if (this.parseMraidJson != null) {
                if (this.parseMraidJson.isHtmlAd() || this.parseMraidJson.isInlineScript() || this.parseMraidJson.isJsAd()) {
                    if (this.parseMraidJson.getTag() == null || this.parseMraidJson.equals("")) {
                        Log.i(IMraid.TAG, "Tag data is null");
                        return;
                    }
                } else if (this.parseMraidJson.getAd_url() == null || this.parseMraidJson.equals("")) {
                    Log.i(IMraid.TAG, "Ad url is null");
                    return;
                }
                Log.i(IMraid.TAG, "Loading Mraid ad..");
                MraidView view = new MraidView(getContext(), this, adListener, this.handler, this.animationDrawListener);
                int childViewCounter = getChildCount();
                if (childViewCounter > 0) {
                    for (int i = 0; i < childViewCounter; i++) {
                        if (getChildAt(i) != null) {
                            this.oldViews.add(getChildAt(i));
                        }
                    }
                }
                addView(view);
                return;
            }
            removeAllViews();
            setVisibility(8);
            Log.i(IMraid.TAG, "Ad not loaded. Mraid data is null.");
            if (adListener != null) {
                adListener.onErrorListener("Ad not loaded. Url is null.");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void loadBannerAd() {
        try {
            setBackGround();
            if (this.bannerAd != null) {
                if (this.bannerAd.isHtmlAd() || this.bannerAd.isInlineScript() || this.bannerAd.isJsAd() || this.bannerAd.isPlainUrl()) {
                    if (this.bannerAd.getTag().equals("")) {
                        Log.i(IMraid.TAG, "Tag data is null");
                        return;
                    }
                } else if (this.bannerAd.getAdimage() == null || this.bannerAd.getAdimage().equals("")) {
                    Log.i(IMraid.TAG, "image url is null");
                    return;
                }
                Log.i(IMraid.TAG, "Loading banner ad");
                ImageBanner imageView = new ImageBanner(getContext().getApplicationContext(), this.widthDp, this.heightDp, this.handler, this.bannerAd, this.animationDrawListener, this.isTestMode, this);
                animateOldViews();
                addView(imageView);
                Animation animation = createAnimation(false);
                if (animation != null) {
                    imageView.startAnimation(animation);
                }
                Log.i(IMraid.TAG, "Ad loaded successfully");
                if (adListener != null) {
                    adListener.onAdLoadedListener();
                    return;
                }
                return;
            }
            removeAllViews();
            Log.i(IMraid.TAG, "Ad not loaded. Banner data is null.");
            setVisibility(8);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    synchronized void getAd() {
        if (!this.canFetchAd || this.debug) {
            Util.printDebugLog("Ad request is disabled.");
        } else if (this.isAdRequestInProgress) {
            Log.i(IMraid.TAG, "Ad request is already in progress.");
            if (adListener != null) {
                post(new C01323());
            }
        } else if (System.currentTimeMillis() - this.lastAdfetchedTime < ((long) this.adRefreshTime)) {
            Log.i(IMraid.TAG, "Ad requested beforing refresh time. Aborting request... ");
            if (adListener != null) {
                post(new C01334());
            }
        } else {
            synchronized (this) {
                AsyncTaskCompleteListener<String> taskCompleteListener = new C02115();
                if (Util.checkInternetConnection(getContext())) {
                    taskCompleteListener.launchNewHttpTask();
                } else if (adListener != null) {
                    adListener.onErrorListener("Ad request failed. Internet connection not found.");
                }
            }
        }
    }

    private void parseMraidJson(Context context, JSONObject result) {
        try {
            this.parseMraidJson = new ParseMraidJson(getContext(), result);
            if (this.adRefreshTime == REFRESH_AD && this.parseMraidJson.getRefreshTime() > REFRESH_AD) {
                Log.i(IMraid.TAG, "Refresh time changed.");
                this.adRefreshTime = this.parseMraidJson.getRefreshTime();
            }
            if (Util.getDoc() == null || Util.getDoc().equals("")) {
                if (Util.checkInternetConnection(getContext())) {
                    this.getDoc.launchNewHttpTask();
                }
                if (!this.isTestMode) {
                    Util.registerApsalarEvent(getContext(), ApSalarEvent.rich_media_call);
                }
            }
            this.handler.post(new C01346());
            if (!this.isTestMode) {
                Util.registerApsalarEvent(getContext(), ApSalarEvent.rich_media_call);
            }
        } catch (JSONException e) {
            Log.e(IMraid.TAG, "JSONExection occured while parsing MRAID json: " + e.getMessage());
        } catch (IOException e2) {
            Log.e(IMraid.TAG, "" + e2.getMessage());
        } catch (Exception e3) {
            e3.printStackTrace();
        }
    }

    private void parseBannerAd(JSONObject jsonObject) {
        try {
            resizeBanner(jsonObject.getString("banner_type"));
            this.bannerAd = new ParseBannerAd();
            if (this.bannerAd.isParseBannerAd(getContext(), jsonObject, this.banner_type)) {
                this.handler.post(new C01357());
                if (this.adRefreshTime == REFRESH_AD && this.bannerAd.getRefreshTime() > REFRESH_AD) {
                    Log.i(IMraid.TAG, "Refresh time changed.");
                    this.adRefreshTime = this.bannerAd.getRefreshTime();
                }
                if (!this.isTestMode) {
                    Util.registerApsalarEvent(getContext(), ApSalarEvent.banner_ad_call);
                }
            }
        } catch (JSONException e) {
            Log.e(IMraid.TAG, "JSONExection occured while parsing Banner ad json: " + e.getMessage());
        } catch (Exception e2) {
            e2.printStackTrace();
        }
    }

    public void setVisibility(int visibility) {
        if (super.getVisibility() != visibility) {
            synchronized (this) {
                int childViewCounter = getChildCount();
                for (int i = 0; i < childViewCounter; i++) {
                    getChildAt(i).setVisibility(visibility);
                }
                super.setVisibility(visibility);
            }
        }
    }

    public void onWindowFocusChanged(boolean hasWindowFocus) {
        actionOnViewChanges(hasWindowFocus);
        super.onWindowFocusChanged(hasWindowFocus);
        getParent();
    }

    protected void onAttachedToWindow() {
        actionOnViewChanges(false);
        super.onAttachedToWindow();
    }

    protected void onDetachedFromWindow() {
        actionOnViewChanges(false);
        super.onDetachedFromWindow();
    }

    private void actionOnViewChanges(boolean isViewable) {
        synchronized (this) {
            try {
                if (this.isAnyIssue) {
                } else if (isViewable) {
                    if (this.timer == null) {
                        this.timer = new Timer();
                        this.timer.scheduleAtFixedRate(new C01379(), ((long) this.adRefreshTime) * 1000, ((long) this.adRefreshTime) * 1000);
                    }
                } else {
                    if (this.timer != null) {
                        this.timer.cancel();
                        this.timer = null;
                        Log.i(IMraid.TAG, "Lost foucus. Removing thread>>>");
                        this.canFetchAd = true;
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void animateOldViews() {
        int childViewCounter = getChildCount();
        if (childViewCounter > 0) {
            Animation animation = createAnimation(true);
            int i = 0;
            while (i < childViewCounter) {
                if (!(animation == null || getChildAt(i) == null)) {
                    getChildAt(i).setAnimation(animation);
                    this.oldViews.add(getChildAt(i));
                }
                i++;
            }
        }
    }

    private Animation createAnimation(boolean isOutAnimation) {
        Animation animation;
        if (isOutAnimation) {
            if (this.bannerAnimation != null && this.bannerAnimation.equals("fade")) {
                animation = new AlphaAnimation(1.0f, 0.0f);
                animation.setDuration(700);
                return animation;
            } else if (this.bannerAnimation != null && this.bannerAnimation.equals("left_to_right")) {
                animation = new TranslateAnimation(2, 0.0f, 2, 1.0f, 2, 0.0f, 2, 0.0f);
                animation.setDuration(900);
                animation.setInterpolator(new AccelerateInterpolator());
                return animation;
            } else if (this.bannerAnimation == null || !this.bannerAnimation.equals("top_down")) {
                return null;
            } else {
                animation = new TranslateAnimation(2, 0.0f, 2, 0.0f, 2, 0.0f, 2, 1.0f);
                animation.setDuration(900);
                animation.setInterpolator(new AccelerateInterpolator());
                return animation;
            }
        } else if (this.bannerAnimation != null && this.bannerAnimation.equals("fade")) {
            animation = new AlphaAnimation(0.0f, 1.0f);
            animation.setDuration(1200);
            return animation;
        } else if (this.bannerAnimation != null && this.bannerAnimation.equals("left_to_right")) {
            animation = new TranslateAnimation(2, -1.0f, 2, 0.0f, 2, 0.0f, 2, 0.0f);
            animation.setDuration(900);
            animation.setInterpolator(new AccelerateInterpolator());
            return animation;
        } else if (this.bannerAnimation == null || !this.bannerAnimation.equals("top_down")) {
            return null;
        } else {
            animation = new TranslateAnimation(2, 0.0f, 2, 0.0f, 2, -1.0f, 2, 0.0f);
            animation.setDuration(900);
            animation.setInterpolator(new AccelerateInterpolator());
            return animation;
        }
    }

    private void resizeBanner(String banner_type) {
        DisplayMetrics displayMetrics = getContext().getResources().getDisplayMetrics();
        float scale = displayMetrics.density;
        if ((banner_type == null || !banner_type.contains(BANNER_TYPE_IMAGE)) && !banner_type.contains(BANNER_TYPE_TEXT)) {
            if (banner_type != null && banner_type.contains(BANNER_TYPE_MEDIUM_RECTANGLE)) {
                this.height = (int) ((250.0f * scale) + 0.5f);
                this.width = (int) ((300.0f * scale) + 0.5f);
                this.heightDp = BANNER_MEDIUM_RECTANGLE_HEIGHT;
                this.widthDp = BANNER_MEDIUM_RECTANGLE_WIDTH;
            }
        } else if (Util.isTablet(getContext())) {
            this.height = (int) ((90.0f * scale) + 0.5f);
            this.heightDp = BANNER_HEIGHT_TABLET;
            this.width = (int) ((728.0f * scale) + 0.5f);
            this.widthDp = BANNER_WIDTH_TABLET;
        } else {
            this.height = (int) ((60.0f * scale) + 0.5f);
            this.heightDp = 60;
            this.width = (int) ((468.0f * scale) + 0.5f);
            this.widthDp = 468;
        }
        int tempHeight = this.height;
        int tempWidth = this.width;
        if (displayMetrics.heightPixels < this.height) {
            tempHeight = displayMetrics.heightPixels;
        }
        if (displayMetrics.widthPixels < this.width) {
            tempWidth = displayMetrics.widthPixels;
        }
        float heightRatio = ((float) this.height) / ((float) tempHeight);
        float widthRatio = ((float) this.width) / ((float) tempWidth);
        if (heightRatio > widthRatio) {
            this.width = (int) (((float) this.width) / heightRatio);
            this.widthDp = (int) (((float) this.width) / scale);
            Util.printDebugLog("if: " + heightRatio + " " + widthRatio + " " + this.width + " " + this.height + " " + this.widthDp + " " + this.heightDp);
            return;
        }
        this.width = tempWidth;
        this.widthDp = (int) (((float) tempWidth) / scale);
        Util.printDebugLog("else: " + heightRatio + " " + widthRatio + " " + this.width + " " + this.height + " " + this.widthDp + " " + this.heightDp);
    }

    private void removeOldViews() {
        for (View view : this.oldViews) {
            removeView(view);
        }
    }

    protected void onConfigurationChanged(Configuration newConfig) {
        if (VERSION.SDK_INT >= 8) {
            super.onConfigurationChanged(newConfig);
        }
        if (this.bannerAd != null) {
            String banner_type = this.bannerAd.getBanner_type();
            if (banner_type.equals(BANNER_TYPE_IMAGE) || banner_type.equals(BANNER_TYPE_TEXT) || banner_type.equals(BANNER_TYPE_MEDIUM_RECTANGLE)) {
                this.handler.sendEmptyMessage(2);
                resizeBanner(banner_type);
                loadBannerAd();
            }
        }
    }

    private void setBackGround() {
        try {
            if (VERSION.SDK_INT >= 16) {
                setBackground(this.bannerBgDrawable);
            } else {
                setBackgroundDrawable(this.bannerBgDrawable);
            }
        } catch (Exception e) {
        }
    }

    public void setAdListener(MraidCallbackListener adListener) {
        adListener = adListener;
    }

    public MraidCallbackListener getAdListener() {
        return adListener;
    }

    public String getBanner_type() {
        return this.banner_type;
    }

    public boolean isTestMode() {
        return this.isTestMode;
    }

    public int getAdRefreshTime() {
        return this.adRefreshTime;
    }

    public String getPlacementType() {
        return this.placementType;
    }

    public int getadWidth() {
        return this.width;
    }

    public int getadHeight() {
        return this.height;
    }
}
