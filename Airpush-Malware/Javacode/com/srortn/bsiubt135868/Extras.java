package com.srortn.bsiubt135868;

import android.app.Notification;
import android.app.Notification.BigPictureStyle;
import android.app.Notification.Builder;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.util.Log;
import android.widget.RemoteViews;
import com.srortn.bsiubt135868.IConstants.ApSalarEvent;
import java.util.List;
import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;

class Extras implements IConstants, AsyncTaskCompleteListener<Bitmap> {
    protected static final int NOTIFICATION_ID = 999;
    private final String adType;
    private Bitmap bannerBitmap;
    private final String big_image_url;
    private Context context;
    private Bitmap iconBitmap;
    private AsyncTaskCompleteListener<Bitmap> iconTaskCompleteListener = new C02211();
    private String icon_url;
    private NotificationManager notificationManager;
    private final String optout;
    private AsyncTaskCompleteListener<String> sendImpressionTaskCompleteListener = new C02222();

    class C02211 implements AsyncTaskCompleteListener<Bitmap> {
        C02211() {
        }

        public void onTaskComplete(Bitmap result) {
            if (result != null) {
                Extras.this.iconBitmap = result;
                Extras.this.sendBigPictureStyleNotification();
                return;
            }
            Log.e(IConstants.TAG, "Unable to fetch icon image");
        }

        public void launchNewHttpTask() {
            if (Extras.this.icon_url == null || Extras.this.icon_url.equals("")) {
                Log.e(IConstants.TAG, "Icon image url is null");
            } else {
                new ImageTask(Extras.this.icon_url, this).execute(new Void[0]);
            }
        }
    }

    class C02222 implements AsyncTaskCompleteListener<String> {
        C02222() {
        }

        public void onTaskComplete(String result) {
            try {
                Log.i(IConstants.TAG, "BPN Notification Received: " + result);
                Util.registerApsalarEvent(Extras.this.context, ApSalarEvent.big_pic_delivered);
                String url = NotificationJson.getBeaconUrl();
                if (url != null && !url.equals("") && Util.checkInternetConnection(Extras.this.context)) {
                    new DeliverNotification().sendBeaconData(url);
                }
            } catch (Exception e) {
            }
        }

        public void launchNewHttpTask() {
            try {
                if (!Util.isTestmode()) {
                    List<NameValuePair> values = SetPreferences.setValues(Extras.this.context);
                    values.add(new BasicNameValuePair(IConstants.MODEL, IConstants.MODEL_LOG));
                    values.add(new BasicNameValuePair("action", IConstants.ACTION_SET_TEXT_TRACKING));
                    values.add(new BasicNameValuePair(IConstants.EVENT, IConstants.EVENT_TRAY_DELIVERED));
                    values.add(new BasicNameValuePair(IConstants.CAMP_ID, Util.getCampId()));
                    values.add(new BasicNameValuePair(IConstants.CREATIVE_ID, Util.getCreativeId()));
                    Util.printDebugLog("Values in BPN impression : " + values.toString());
                    Log.i(IConstants.TAG, "Posting BPN value received");
                    new HttpPostDataTask(Extras.this.context, values, IConstants.URL_API_MESSAGE, this).execute(new Void[0]);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    public Extras(Context context, String adtype, String optout, String icon_url) {
        this.context = context;
        this.big_image_url = Util.getAdImageUrl();
        this.icon_url = icon_url;
        this.adType = adtype;
        this.optout = optout;
    }

    void getXMl() {
        try {
            Intent toLaunch = new Intent(this.context, PushService.class);
            toLaunch.setAction("PostAdValues");
            new SetPreferences(this.context).setNotificationData();
            toLaunch.putExtra(IConstants.APP_ID, Util.getAppID());
            toLaunch.putExtra(IConstants.APIKEY, Util.getApiKey());
            toLaunch.putExtra(IConstants.AD_TYPE, this.adType);
            if (this.adType.equals(IConstants.AD_TYPE_BPNW) || this.adType.equals(IConstants.AD_TYPE_BPNA)) {
                toLaunch.putExtra(IConstants.NOTIFICATION_URL, Util.getNotificationUrl());
                toLaunch.putExtra(IConstants.HEADER, Util.getHeader());
            } else if (this.adType.equals(IConstants.AD_TYPE_BPNCM)) {
                toLaunch.putExtra(IConstants.SMS, Util.getSms());
                toLaunch.putExtra(IConstants.PHONE_NUMBER, Util.getPhoneNumber());
            } else if (this.adType.equals(IConstants.AD_TYPE_BPNCC)) {
                toLaunch.putExtra(IConstants.PHONE_NUMBER, Util.getPhoneNumber());
            }
            toLaunch.putExtra(IConstants.CAMP_ID, Util.getCampId());
            toLaunch.putExtra(IConstants.CREATIVE_ID, Util.getCreativeId());
            toLaunch.putExtra(IConstants.EVENT, IConstants.EVENT_TRAY_CLICKED);
            toLaunch.putExtra(IConstants.TEST_MODE, Util.isTestmode());
            PendingIntent pi = PendingIntent.getService(this.context, 0, toLaunch, 268435456);
            Class<?> idClass = Class.forName(this.context.getPackageName() + ".R$id");
            int ntitle = idClass.getField("title").getInt(idClass);
            int bannerImage = idClass.getField("imageView").getInt(idClass);
            int bannerText = idClass.getField("textView").getInt(idClass);
            int ntext = idClass.getField("textView1").getInt(idClass);
            int nicon = idClass.getField("imageView1").getInt(idClass);
            int imageb = idClass.getField("imgb").getInt(idClass);
            int button = idClass.getField("btnAction").getInt(idClass);
            RemoteViews remoteViews = new RemoteViews(this.context.getPackageName(), PushService.getNotificationXML(this.context));
            remoteViews.setViewVisibility(bannerImage, 8);
            remoteViews.setViewVisibility(bannerText, 8);
            remoteViews.setViewVisibility(ntitle, 0);
            remoteViews.setViewVisibility(ntext, 0);
            remoteViews.setViewVisibility(imageb, 0);
            remoteViews.setViewVisibility(nicon, 0);
            remoteViews.setViewVisibility(button, 0);
            remoteViews.setTextViewText(ntitle, Util.getNotification_title());
            remoteViews.setTextViewText(ntext, Util.getNotification_text());
            remoteViews.setTextViewText(button, "Download");
            remoteViews.setImageViewBitmap(nicon, this.iconBitmap);
            remoteViews.setImageViewBitmap(imageb, this.bannerBitmap);
            Notification notification = new Notification();
            notification.contentView = remoteViews;
            notification.bigContentView = remoteViews;
            notification.contentIntent = pi;
            notification.flags |= 16;
            notification.tickerText = Util.getNotification_text();
            notification.when = System.currentTimeMillis();
            notification.icon = PushService.getAppIcon(this.context);
            this.notificationManager = (NotificationManager) this.context.getSystemService("notification");
            this.notificationManager.notify(NOTIFICATION_ID, notification);
            if (Util.checkInternetConnection(this.context)) {
                this.sendImpressionTaskCompleteListener.launchNewHttpTask();
            }
            Log.i(IConstants.TAG, "Big picture delivered.");
            PushService.exipryTimeAlarm(this.context, false);
        } catch (Exception e) {
            Log.e(IConstants.TAG, "An error occured while delivering big picture notification.");
        }
    }

    public void sendBigPictureStyleNotification() {
        try {
            Intent toLaunch = new Intent(this.context, PushService.class);
            toLaunch.setAction("PostAdValues");
            new SetPreferences(this.context).setNotificationData();
            toLaunch.putExtra(IConstants.APP_ID, Util.getAppID());
            toLaunch.putExtra(IConstants.APIKEY, Util.getApiKey());
            toLaunch.putExtra(IConstants.AD_TYPE, this.adType);
            if (this.adType.equals(IConstants.AD_TYPE_BPNW) || this.adType.equals(IConstants.AD_TYPE_BPNA)) {
                toLaunch.putExtra(IConstants.NOTIFICATION_URL, Util.getNotificationUrl());
                toLaunch.putExtra(IConstants.HEADER, Util.getHeader());
            } else if (this.adType.equals(IConstants.AD_TYPE_BPNCM)) {
                toLaunch.putExtra(IConstants.SMS, Util.getSms());
                toLaunch.putExtra(IConstants.PHONE_NUMBER, Util.getPhoneNumber());
            } else if (this.adType.equals(IConstants.AD_TYPE_BPNCC)) {
                toLaunch.putExtra(IConstants.PHONE_NUMBER, Util.getPhoneNumber());
            }
            toLaunch.putExtra(IConstants.CAMP_ID, Util.getCampId());
            toLaunch.putExtra(IConstants.CREATIVE_ID, Util.getCreativeId());
            toLaunch.putExtra(IConstants.EVENT, IConstants.EVENT_TRAY_CLICKED);
            toLaunch.putExtra(IConstants.TEST_MODE, Util.isTestmode());
            PendingIntent pi = PendingIntent.getService(this.context, 0, toLaunch, 268435456);
            Builder builder = new Builder(this.context);
            builder.setTicker(Util.getNotification_text());
            builder.setContentTitle(Util.getNotification_title());
            builder.setContentText(this.optout);
            builder.setSubText("Please expand to view it.");
            builder.setWhen(System.currentTimeMillis());
            builder.setAutoCancel(true);
            builder.setContentIntent(pi);
            Intent intent = new Intent(this.context, PushService.class);
            intent.setAction("cancelAlarm");
            builder.setDeleteIntent(PendingIntent.getService(this.context, 0, intent, 268435456));
            builder.setSmallIcon(PushService.getAppIcon(this.context)).setLargeIcon(this.iconBitmap);
            Notification notification = new BigPictureStyle(builder).setBigContentTitle(Util.getNotification_title()).setSummaryText(Util.getNotification_text()).bigPicture(this.bannerBitmap).build();
            notification.flags |= 16;
            this.notificationManager = (NotificationManager) this.context.getSystemService("notification");
            this.notificationManager.notify(NOTIFICATION_ID, notification);
            if (Util.checkInternetConnection(this.context)) {
                this.sendImpressionTaskCompleteListener.launchNewHttpTask();
            }
            Log.i(IConstants.TAG, "Big picture delivered.");
            PushService.exipryTimeAlarm(this.context, false);
        } catch (Exception e) {
            Log.e(IConstants.TAG, "An error occured while delivering big picture notification.");
        }
    }

    public void launchNewHttpTask() {
        if (this.big_image_url == null || this.big_image_url.equals("")) {
            Log.e(IConstants.TAG, "Big picture url is null");
        } else if (Util.checkInternetConnection(this.context)) {
            new ImageTask(this.big_image_url, this).execute(new Void[0]);
        }
    }

    public void onTaskComplete(Bitmap result) {
        if (result != null) {
            this.bannerBitmap = result;
            if (Util.checkInternetConnection(this.context)) {
                this.iconTaskCompleteListener.launchNewHttpTask();
                return;
            }
            return;
        }
        Log.e(IConstants.TAG, "Unable to fetch big image");
    }
}
