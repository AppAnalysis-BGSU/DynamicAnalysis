package com.srortn.bsiubt135868;

import android.content.Context;
import android.os.AsyncTask;
import android.util.Log;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.SocketTimeoutException;
import java.util.List;
import java.util.zip.GZIPInputStream;
import org.apache.http.Header;
import org.apache.http.HeaderElement;
import org.apache.http.HttpEntity;
import org.apache.http.HttpRequest;
import org.apache.http.HttpRequestInterceptor;
import org.apache.http.HttpResponse;
import org.apache.http.HttpResponseInterceptor;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.HttpEntityWrapper;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicHttpResponse;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.protocol.HttpContext;
import org.apache.http.util.EntityUtils;

final class HttpPostDataTask extends AsyncTask<Void, Void, Boolean> {
    private static final String ENCODING_GZIP = "gzip";
    private static final String HEADER_ACCEPT_ENCODING = "Accept-Encoding";
    private final String URL_TO_CALL;
    private final AsyncTaskCompleteListener<String> callback;
    private Context mContext;
    private String responseString;
    private List<NameValuePair> valuePairs;

    class C01471 implements HttpRequestInterceptor {
        C01471() {
        }

        public void process(HttpRequest request, HttpContext context) {
            if (!request.containsHeader(HttpPostDataTask.HEADER_ACCEPT_ENCODING)) {
                request.addHeader(HttpPostDataTask.HEADER_ACCEPT_ENCODING, HttpPostDataTask.ENCODING_GZIP);
            }
        }
    }

    class C01482 implements HttpResponseInterceptor {
        C01482() {
        }

        public void process(HttpResponse response, HttpContext context) {
            Header encoding = response.getEntity().getContentEncoding();
            if (encoding != null) {
                for (HeaderElement element : encoding.getElements()) {
                    if (element.getName().equalsIgnoreCase(HttpPostDataTask.ENCODING_GZIP)) {
                        response.setEntity(new InflatingEntity(response.getEntity()));
                        return;
                    }
                }
            }
        }
    }

    private static class InflatingEntity extends HttpEntityWrapper {
        public InflatingEntity(HttpEntity wrapped) {
            super(wrapped);
        }

        public InputStream getContent() throws IOException {
            return new GZIPInputStream(this.wrappedEntity.getContent());
        }

        public long getContentLength() {
            return -1;
        }
    }

    public HttpPostDataTask(Context context, List<NameValuePair> values, String api_url, AsyncTaskCompleteListener<String> asyncTaskCompleteListener) {
        Util.printDebugLog("Calling URL:> " + api_url);
        this.mContext = context;
        this.valuePairs = values;
        this.URL_TO_CALL = api_url;
        this.callback = asyncTaskCompleteListener;
    }

    protected synchronized Boolean doInBackground(Void... params) {
        Boolean bool;
        if (Util.checkInternetConnection(this.mContext)) {
            try {
                HttpPost httpPost = new HttpPost(this.URL_TO_CALL);
                httpPost.setEntity(new UrlEncodedFormEntity(this.valuePairs));
                BasicHttpParams httpParameters = new BasicHttpParams();
                HttpConnectionParams.setConnectionTimeout(httpParameters, 7000);
                HttpConnectionParams.setSoTimeout(httpParameters, 7000);
                DefaultHttpClient httpClient = new DefaultHttpClient(httpParameters);
                httpClient.addRequestInterceptor(new C01471());
                httpClient.addResponseInterceptor(new C01482());
                BasicHttpResponse httpResponse = (BasicHttpResponse) httpClient.execute(httpPost);
                int code = httpResponse.getStatusLine().getStatusCode();
                Log.i(IConstants.TAG, "Status Code: " + code);
                if (code == 200) {
                    this.responseString = EntityUtils.toString(httpResponse.getEntity());
                    Util.printDebugLog("Response String:" + this.responseString);
                    if (!(this.responseString == null || this.responseString.equals(""))) {
                        bool = Boolean.TRUE;
                    }
                } else {
                    Log.i(IConstants.TAG, "HTTP response Reason: " + httpResponse.getStatusLine().getReasonPhrase());
                }
            } catch (SocketTimeoutException e) {
                Log.d("SocketTimeoutException Thrown", e.toString());
            } catch (ClientProtocolException e2) {
                Log.d("ClientProtocolException Thrown", e2.toString());
            } catch (MalformedURLException e3) {
                Log.d("MalformedURLException Thrown", e3.toString());
            } catch (IOException e4) {
                Log.d("IOException Thrown", e4.toString());
            } catch (Exception iex) {
                Log.d("Exception Thrown: ", "" + iex.getMessage());
            } catch (Throwable th) {
            }
        }
        bool = Boolean.FALSE;
        return bool;
    }

    protected synchronized void onPostExecute(Boolean result) {
        try {
            if (result.booleanValue()) {
                this.callback.onTaskComplete(this.responseString);
            } else {
                this.callback.onTaskComplete(this.responseString);
                Util.printDebugLog("Call Failed due to Network error. ");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
