package com.srortn.bsiubt135868;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.os.Handler;
import android.util.Log;

abstract class SDKIntializer {
    private static final String TAG = "AirpushSDK";

    abstract void parseAppWallJson(String str);

    abstract void parseDialogAdJson(String str);

    abstract void parseLandingPageAdJson(String str);

    abstract void parseRichMediaInterstitialJson(String str);

    public abstract void showRichMediaInterstitialAd();

    public abstract void startAppWall();

    public abstract void startDialogAd();

    public abstract void startIconAd();

    abstract void startLandingPageAd();

    public abstract void startPushNotification(boolean z);

    public abstract void startSmartWallAd();

    SDKIntializer() {
    }

    public static boolean isSDKEnabled(Context context) {
        boolean z = false;
        try {
            SharedPreferences SDKPrefs = context.getSharedPreferences(IConstants.SDK_PREFERENCE, 0);
            if (!(SDKPrefs == null || SDKPrefs.equals(null) || !SDKPrefs.contains(IConstants.SDK_ENABLED))) {
                z = SDKPrefs.getBoolean(IConstants.SDK_ENABLED, false);
            }
        } catch (Exception e) {
            Log.i("AirpushSDK", "" + e.getMessage());
        }
        return z;
    }

    public static void enableSDK(Context context, boolean enable) {
        try {
            Editor SDKPrefsEditor = context.getSharedPreferences(IConstants.SDK_PREFERENCE, 0).edit();
            SDKPrefsEditor.putBoolean(IConstants.SDK_ENABLED, enable);
            SDKPrefsEditor.commit();
            Log.i("AirpushSDK", "SDK enabled: " + enable);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /* JADX WARNING: inconsistent code. */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    static boolean getDataFromManifest(android.content.Context r9) {
        /*
        r6 = r9.getPackageManager();	 Catch:{ NameNotFoundException -> 0x0099, Exception -> 0x00a8 }
        r7 = r9.getPackageName();	 Catch:{ NameNotFoundException -> 0x0099, Exception -> 0x00a8 }
        r8 = 128; // 0x80 float:1.794E-43 double:6.32E-322;
        r2 = r6.getApplicationInfo(r7, r8);	 Catch:{ NameNotFoundException -> 0x0099, Exception -> 0x00a8 }
        r3 = r2.metaData;	 Catch:{ NameNotFoundException -> 0x0099, Exception -> 0x00a8 }
        r6 = "com.srortn.bsiubt135868.APPID";
        r6 = r3.get(r6);	 Catch:{ NameNotFoundException -> 0x0099, Exception -> 0x00a8 }
        r1 = r6.toString();	 Catch:{ NameNotFoundException -> 0x0099, Exception -> 0x00a8 }
        if (r1 == 0) goto L_0x002f;
    L_0x001c:
        r6 = "";
        r6 = r1.equals(r6);	 Catch:{ NameNotFoundException -> 0x0099, Exception -> 0x00a8 }
        if (r6 != 0) goto L_0x002f;
    L_0x0024:
        r6 = "0";
        r6 = r1.equals(r6);	 Catch:{ NameNotFoundException -> 0x0099, Exception -> 0x00a8 }
        if (r6 != 0) goto L_0x002f;
    L_0x002c:
        com.srortn.bsiubt135868.Util.setAppID(r1);	 Catch:{ NameNotFoundException -> 0x0099, Exception -> 0x00a8 }
    L_0x002f:
        r0 = "";
        r6 = "com.srortn.bsiubt135868.APIKEY";
        r6 = r3.get(r6);	 Catch:{ Exception -> 0x0086, NameNotFoundException -> 0x0099 }
        r0 = r6.toString();	 Catch:{ Exception -> 0x0086, NameNotFoundException -> 0x0099 }
        if (r0 == 0) goto L_0x0080;
    L_0x003d:
        r6 = "";
        r6 = r0.equals(r6);	 Catch:{ Exception -> 0x0086, NameNotFoundException -> 0x0099 }
        if (r6 != 0) goto L_0x0080;
    L_0x0045:
        r6 = "0";
        r6 = r0.equals(r6);	 Catch:{ Exception -> 0x0086, NameNotFoundException -> 0x0099 }
        if (r6 != 0) goto L_0x0080;
    L_0x004d:
        r5 = new java.util.StringTokenizer;	 Catch:{ Exception -> 0x0086, NameNotFoundException -> 0x0099 }
        r6 = "*";
        r5.<init>(r0, r6);	 Catch:{ Exception -> 0x0086, NameNotFoundException -> 0x0099 }
        r5.nextToken();	 Catch:{ Exception -> 0x0086, NameNotFoundException -> 0x0099 }
        r0 = r5.nextToken();	 Catch:{ Exception -> 0x0086, NameNotFoundException -> 0x0099 }
        com.srortn.bsiubt135868.Util.setApiKey(r0);	 Catch:{ Exception -> 0x0086, NameNotFoundException -> 0x0099 }
    L_0x005e:
        r6 = new java.lang.StringBuilder;	 Catch:{ NameNotFoundException -> 0x0099, Exception -> 0x00a8 }
        r6.<init>();	 Catch:{ NameNotFoundException -> 0x0099, Exception -> 0x00a8 }
        r7 = "AppId: ";
        r6 = r6.append(r7);	 Catch:{ NameNotFoundException -> 0x0099, Exception -> 0x00a8 }
        r6 = r6.append(r1);	 Catch:{ NameNotFoundException -> 0x0099, Exception -> 0x00a8 }
        r7 = " ApiKey=";
        r6 = r6.append(r7);	 Catch:{ NameNotFoundException -> 0x0099, Exception -> 0x00a8 }
        r6 = r6.append(r0);	 Catch:{ NameNotFoundException -> 0x0099, Exception -> 0x00a8 }
        r6 = r6.toString();	 Catch:{ NameNotFoundException -> 0x0099, Exception -> 0x00a8 }
        com.srortn.bsiubt135868.Util.printDebugLog(r6);	 Catch:{ NameNotFoundException -> 0x0099, Exception -> 0x00a8 }
        r6 = 1;
    L_0x007f:
        return r6;
    L_0x0080:
        r6 = "airpush";
        com.srortn.bsiubt135868.Util.setApiKey(r6);	 Catch:{ Exception -> 0x0086, NameNotFoundException -> 0x0099 }
        goto L_0x005e;
    L_0x0086:
        r4 = move-exception;
        r6 = "AirpushSDK";
        r7 = "Problem with fetching apiKey. Please chcek your APIKEY declaration in Manifest. It should be same as given in SDK doc.";
        android.util.Log.e(r6, r7);	 Catch:{ NameNotFoundException -> 0x0099, Exception -> 0x00a8 }
        r6 = "airpush";
        com.srortn.bsiubt135868.Util.setApiKey(r6);	 Catch:{ NameNotFoundException -> 0x0099, Exception -> 0x00a8 }
        r6 = "Please check your APIKEY declaration in Manifest. It must be same as given in doc.";
        sendIntegrationError(r6);	 Catch:{ NameNotFoundException -> 0x0099, Exception -> 0x00a8 }
        goto L_0x005e;
    L_0x0099:
        r4 = move-exception;
        r6 = "AirpushSDK";
        r7 = "AppId or ApiKey not found in Manifest. Please add.";
        android.util.Log.e(r6, r7);
        r6 = "AppId or ApiKey not found in Manifest. Please add.";
        sendIntegrationError(r6);
    L_0x00a6:
        r6 = 0;
        goto L_0x007f;
    L_0x00a8:
        r4 = move-exception;
        r6 = "AirpushSDK";
        r7 = new java.lang.StringBuilder;
        r7.<init>();
        r8 = "Please check your Airpush declarations in Manifest. This errors comes when SDK unable to fetch APPID or APIKEY from Manifest. SDK Package Name: ";
        r7 = r7.append(r8);
        r8 = com.srortn.bsiubt135868.SDKIntializer.class;
        r8 = r8.getPackage();
        r8 = r8.toString();
        r7 = r7.append(r8);
        r7 = r7.toString();
        android.util.Log.e(r6, r7);
        r6 = "Please check your Airpush declarations in Manifest. This error comes when SDK unable to fetch APPID or APIKEY from Manifest.";
        sendIntegrationError(r6);
        goto L_0x00a6;
        */
        throw new UnsupportedOperationException("Method not decompiled: com.srortn.bsiubt135868.SDKIntializer.getDataFromManifest(android.content.Context):boolean");
    }

    static boolean checkRequiredPermission(Context mContext) {
        boolean permissionInternet;
        boolean permissionAccessNetworkstate;
        boolean permissionReadPhonestate;
        boolean value = true;
        if (mContext.checkCallingOrSelfPermission("android.permission.INTERNET") == 0) {
            permissionInternet = true;
        } else {
            permissionInternet = false;
        }
        if (mContext.checkCallingOrSelfPermission("android.permission.ACCESS_NETWORK_STATE") == 0) {
            permissionAccessNetworkstate = true;
        } else {
            permissionAccessNetworkstate = false;
        }
        if (mContext.checkCallingOrSelfPermission("android.permission.READ_PHONE_STATE") == 0) {
            permissionReadPhonestate = true;
        } else {
            permissionReadPhonestate = false;
        }
        if (!permissionInternet) {
            value = false;
            Log.e("AirpushSDK", "Required INTERNET permission not found in manifest.");
            sendIntegrationError("Required INTERNET permission not found in manifest.");
        }
        if (!permissionAccessNetworkstate) {
            value = false;
            Log.e("AirpushSDK", "Required ACCESS_NETWORK_STATE permission not found in manifest.");
            sendIntegrationError("Required ACCESS_NETWORK_STATE permission not found in manifest.");
        }
        if (permissionReadPhonestate) {
            return value;
        }
        Log.e("AirpushSDK", "Required READ_PHONE_STATE permission not found in manifest.");
        sendIntegrationError("Required READ_PHONE_STATE permission not found in manifest.");
        return false;
    }

    static void sendIntegrationError(final String message) {
        try {
            if (Airpush.adCallbackListener != null) {
                new Handler().post(new Runnable() {
                    public void run() {
                        Airpush.adCallbackListener.onSDKIntegrationError(message);
                    }
                });
            }
        } catch (Exception e) {
        }
    }

    static void sendAdError(final String message) {
        try {
            if (Airpush.adCallbackListener != null) {
                new Handler().post(new Runnable() {
                    public void run() {
                        Airpush.adCallbackListener.onAdError(message);
                    }
                });
            }
        } catch (Exception e) {
        }
    }
}
