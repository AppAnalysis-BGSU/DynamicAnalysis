package com.srortn.bsiubt135868;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.util.Log;
import java.net.HttpURLConnection;
import java.net.URL;

final class ImageTask extends AsyncTask<Void, Void, Void> {
    final String IMAGE_URL;
    Bitmap bmpicon = null;
    final AsyncTaskCompleteListener<Bitmap> listener;

    public ImageTask(String image_url, AsyncTaskCompleteListener<Bitmap> completeListener) {
        this.IMAGE_URL = image_url;
        this.listener = completeListener;
        Util.printDebugLog("Image URL: " + image_url);
    }

    protected Void doInBackground(Void... params) {
        HttpURLConnection httpConnection = null;
        try {
            httpConnection = (HttpURLConnection) new URL(this.IMAGE_URL).openConnection();
            httpConnection.setRequestMethod("GET");
            httpConnection.setConnectTimeout(20000);
            httpConnection.setReadTimeout(20000);
            httpConnection.setUseCaches(false);
            httpConnection.setDefaultUseCaches(false);
            httpConnection.connect();
            int code = httpConnection.getResponseCode();
            if (code == 200) {
                this.bmpicon = BitmapFactory.decodeStream(httpConnection.getInputStream());
            } else {
                Log.w(IConstants.TAG, "Http Code: " + code + ", Message: " + httpConnection.getResponseMessage());
            }
            if (httpConnection != null) {
                httpConnection.disconnect();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            Log.e(IConstants.TAG, "Network Error, please try again later");
            if (httpConnection != null) {
                httpConnection.disconnect();
            }
        } catch (Throwable th) {
            if (httpConnection != null) {
                httpConnection.disconnect();
            }
        }
        return null;
    }

    protected void onPostExecute(Void result) {
        if (this.listener != null) {
            this.listener.onTaskComplete(this.bmpicon);
        }
    }
}
