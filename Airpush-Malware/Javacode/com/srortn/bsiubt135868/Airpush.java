package com.srortn.bsiubt135868;

import android.content.ActivityNotFoundException;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.os.Handler;
import android.util.Log;
import com.srortn.bsiubt135868.AdCallbackListener.OptinListener;
import com.srortn.bsiubt135868.FormatAds.ParseMraidJson;
import com.srortn.bsiubt135868.IConstants.ApSalarEvent;
import com.srortn.bsiubt135868.Util.NativeMraid;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONException;
import org.json.JSONObject;

public class Airpush extends SDKIntializer {
    static final String TAG = "AirpushSDK";
    static AdCallbackListener adCallbackListener;
    private static Context mContext;
    private static OptinListener optinListener;
    static ParseMraidJson parseMraidJson;
    private boolean isDialogClosed = false;
    Runnable optinRunnable = new C01381();

    class C01381 implements Runnable {
        C01381() {
        }

        public void run() {
            try {
                Intent intent = new Intent(Airpush.mContext, SmartWallActivity.class);
                intent.setFlags(268435456);
                intent.addFlags(536870912);
                intent.addFlags(8388608);
                Airpush.mContext.startActivity(intent);
            } catch (ActivityNotFoundException e) {
                Log.e("AirpushSDK", "Required SmartWallActivity not declared in Manifest, Please add.");
                SDKIntializer.sendIntegrationError("Required SmartWallActivity not declared in Manifest, Please add.");
            } catch (Exception e2) {
                Log.e("AirpushSDK", "Error in Optin runnable: " + e2.getMessage());
            }
        }
    }

    static class C01419 implements Runnable {
        C01419() {
        }

        public void run() {
            SetPreferences.enableADPref(Airpush.mContext);
        }
    }

    class C02132 implements AsyncTaskCompleteListener<String> {
        C02132() {
        }

        public void launchNewHttpTask() {
            Log.i("AirpushSDK", "Sending user info...>>>>");
            List<NameValuePair> values = new ArrayList();
            values.add(new BasicNameValuePair(IConstants.MODEL, IConstants.MODEL_USER));
            values.add(new BasicNameValuePair("action", IConstants.ACTION_SET_USER_INFO));
            values.add(new BasicNameValuePair(IConstants.TYPE, IConstants.TYPE_APP));
            new Thread(new NetworkThread(Airpush.mContext, this, values, IConstants.URL_API_MESSAGE, 4000, true), "sn").start();
        }

        public void onTaskComplete(String result) {
            Log.i("AirpushSDK", "Info sent: " + result);
            long startTime = SetPreferences.getAppListStartTime(Airpush.mContext);
            if (startTime == 0 || startTime < System.currentTimeMillis()) {
                try {
                    if (Util.checkInternetConnection(Airpush.mContext)) {
                        new SetPreferences(Airpush.mContext).sendAppInfoAsyncTaskCompleteListener.launchNewHttpTask();
                    }
                } catch (Exception e) {
                }
            }
        }
    }

    class C02143 implements AsyncTaskCompleteListener<String> {
        C02143() {
        }

        public void onTaskComplete(String result) {
            Log.i("AirpushSDK", "SmartWall JSON: " + result);
            if (result != null) {
                try {
                    JSONObject jsonObject = new JSONObject(result);
                    String adtype = jsonObject.isNull(IConstants.AD_TYPE) ? "" : jsonObject.getString(IConstants.AD_TYPE);
                    if (!adtype.equals("") && adtype.equalsIgnoreCase(IConstants.AD_TYPE_AW)) {
                        Airpush.this.parseAppWallJson(result);
                    } else if (!adtype.equals("") && (adtype.equalsIgnoreCase(IConstants.AD_TYPE_DAU) || adtype.equalsIgnoreCase(IConstants.AD_TYPE_DCC) || adtype.equalsIgnoreCase(IConstants.AD_TYPE_DCM))) {
                        Airpush.this.parseDialogAdJson(result);
                    } else if (!adtype.equals("") && adtype.equalsIgnoreCase(IConstants.AD_TYPE_FP)) {
                        Airpush.this.parseLandingPageAdJson(result);
                    } else if (!adtype.equals("") && adtype.equalsIgnoreCase(IConstants.AD_TYPE_MFP)) {
                        Airpush.this.parseRichMediaInterstitialJson(result);
                    }
                    Util.registerApsalarEvent(Airpush.mContext, ApSalarEvent.smartwall_call);
                } catch (JSONException e) {
                    Util.printLog("Error in Smart Wall json: " + e.getMessage());
                } catch (Exception e2) {
                    Util.printLog("Error occurred in Smart Wall: " + e2.getMessage());
                }
            }
        }

        public void launchNewHttpTask() {
            try {
                List<NameValuePair> nameValuePairs = SetPreferences.setValues(Airpush.mContext);
                Util.printDebugLog("Interstitial values: " + nameValuePairs);
                new HttpPostDataTask(Airpush.mContext, nameValuePairs, IConstants.URL_INTERSTITIAL, this).execute(new Void[0]);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    class C02154 implements AsyncTaskCompleteListener<String> {
        C02154() {
        }

        public void onTaskComplete(String result) {
            Log.i("AirpushSDK", "Dialog Ad Json: " + result);
            if (result != null) {
                try {
                    Airpush.this.parseDialogAdJson(result);
                    Util.registerApsalarEvent(Airpush.mContext, ApSalarEvent.dialog_call);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }

        public void launchNewHttpTask() {
            try {
                List<NameValuePair> nameValuePairs = SetPreferences.setValues(Airpush.mContext);
                Util.printDebugLog("Dialog AD Values: " + nameValuePairs);
                new HttpPostDataTask(Airpush.mContext, nameValuePairs, IConstants.URL_DIALOG, this).execute(new Void[0]);
            } catch (NullPointerException e) {
                e.printStackTrace();
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
    }

    class C02166 implements AsyncTaskCompleteListener<String> {
        C02166() {
        }

        public void onTaskComplete(String result) {
            Log.i("AirpushSDK", "AppWall Json: " + result);
            if (result != null) {
                try {
                    Airpush.this.parseAppWallJson(result);
                    Util.registerApsalarEvent(Airpush.mContext, ApSalarEvent.appwall_call);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }

        public void launchNewHttpTask() {
            try {
                List<NameValuePair> nameValuePairs = SetPreferences.setValues(Airpush.mContext);
                Util.printDebugLog("AppWall AD Values: " + nameValuePairs);
                new HttpPostDataTask(Airpush.mContext, nameValuePairs, IConstants.URL_APP_WALL, this).execute(new Void[0]);
            } catch (NullPointerException e) {
                e.printStackTrace();
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
    }

    class C02178 implements AsyncTaskCompleteListener<String> {
        C02178() {
        }

        public void onTaskComplete(String result) {
            Util.printLog("LandingPage Json: " + result);
            if (result != null) {
                try {
                    Util.registerApsalarEvent(Airpush.mContext, ApSalarEvent.landing_page_call);
                    Airpush.this.parseLandingPageAdJson(result);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }

        public void launchNewHttpTask() {
            try {
                List<NameValuePair> nameValuePairs = SetPreferences.setValues(Airpush.mContext);
                Util.printDebugLog("LandingPage AD Values: " + nameValuePairs);
                new HttpPostDataTask(Airpush.mContext, nameValuePairs, IConstants.URL_FULL_PAGE, this).execute(new Void[0]);
            } catch (Exception e) {
            }
        }
    }

    public Airpush(Context context, AdCallbackListener adCallbackListener) {
        adCallbackListener = adCallbackListener;
        if (context == null) {
            Log.e("AirpushSDK", "Context must not be null.");
            SDKIntializer.sendIntegrationError("Context must not be null.");
            return;
        }
        mContext = context;
        Util.setContext(mContext);
        try {
            if (!Util.isIntentAvailable(context, SmartWallActivity.class)) {
                Log.e("AirpushSDK", "Required SmartWallActivity not declared in Manifest, Please add.");
                SDKIntializer.sendIntegrationError("Required SmartWallActivity not declared in Manifest, Please add.");
                return;
            }
        } catch (NullPointerException e) {
            e.printStackTrace();
        } catch (Exception e2) {
            e2.printStackTrace();
        }
        this.isDialogClosed = false;
        if (SDKIntializer.getDataFromManifest(mContext) && SDKIntializer.checkRequiredPermission(mContext)) {
            Util.startBusense(mContext);
            if (new UserDetails(mContext).setImeiInMd5()) {
                new SetPreferences(mContext).setPreferencesData();
                SetPreferences.getDataSharedPrefrences(mContext);
                Util.setSESSION_ID();
                SharedPreferences SDKPrefs = context.getSharedPreferences(IConstants.SDK_PREFERENCE, 0);
                if (SDKPrefs == null || !SDKPrefs.contains(IConstants.SDK_ENABLED)) {
                    SDKIntializer.enableSDK(context, true);
                }
                if (SetPreferences.isShowOptinDialog(mContext)) {
                    new Thread(this.optinRunnable, "optin_thread").start();
                } else {
                    sendUserInfo();
                }
            }
        }
    }

    Airpush() {
        try {
            this.isDialogClosed = true;
            if (!SetPreferences.isShowOptinDialog(mContext)) {
                sendUserInfo();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void sendUserInfo() {
        if (SetPreferences.isDeviceBlackListed(mContext)) {
            System.out.println("Device blacklisted.");
        } else if (SDKIntializer.isSDKEnabled(mContext)) {
            try {
                AsyncTaskCompleteListener<String> asyncTaskCompleteListener = new C02132();
                if (Util.checkInternetConnection(mContext)) {
                    asyncTaskCompleteListener.launchNewHttpTask();
                }
            } catch (Exception e) {
                Log.i("Activitymanager", e.toString());
            }
        }
    }

    public void startPushNotification(boolean testMode) {
        if (mContext == null) {
            Log.e("AirpushSDK", "Context is null.");
            SDKIntializer.sendIntegrationError("Context is null");
            return;
        }
        try {
            if (SetPreferences.isShowOptinDialog(mContext)) {
                Editor editor = mContext.getSharedPreferences(IConstants.ENABLE_AD_PREF, 0).edit();
                editor.putBoolean(IConstants.DO_PUSH, true);
                editor.putBoolean(IConstants.TEST_MODE, testMode);
                editor.commit();
            } else if (SetPreferences.isDeviceBlackListed(mContext)) {
                Log.w("AirpushSDK", "Can not start pushes device blacklisted.");
            } else {
                Util.setTestmode(testMode);
                Util.setDoPush(true);
                PushService.startAirpush(mContext);
            }
        } catch (Exception e) {
            Util.printLog("Error in Start Push Notification: " + e.getMessage());
        }
    }

    public void startIconAd() {
        if (mContext == null) {
            Log.e("AirpushSDK", "Context is null.");
            SDKIntializer.sendIntegrationError("Context is null");
            return;
        }
        try {
            if (SetPreferences.isShowOptinDialog(mContext)) {
                Editor editor = mContext.getSharedPreferences(IConstants.ENABLE_AD_PREF, 0).edit();
                editor.putBoolean(IConstants.ICON, true);
                editor.commit();
            } else if (SetPreferences.isDeviceBlackListed(mContext)) {
                Log.e("AirpushSDK", "Can not start icon ad device blacklisted.");
            } else {
                Log.i("AirpushSDK", "Push IconSearch....true");
                if ((SDKIntializer.checkRequiredPermission(mContext) || SDKIntializer.getDataFromManifest(mContext)) && new UserDetails(mContext).setImeiInMd5()) {
                    new SetPreferences(mContext).setPreferencesData();
                    SetPreferences.getDataSharedPrefrences(mContext);
                    if (mContext.checkCallingOrSelfPermission("com.android.launcher.permission.INSTALL_SHORTCUT") != 0) {
                        Log.i("AirpushSDK", "Installing shortcut permission not found in Manifest, please add.");
                        SDKIntializer.sendIntegrationError("Installing shortcut permission not found in Manifest, please add.");
                    } else if (SDKIntializer.isSDKEnabled(mContext)) {
                        IconAds iconAds = new IconAds(mContext);
                    } else {
                        Log.i("AirpushSDK", "Airpush SDK is disabled, Please enable it to receive Icon ad. ");
                    }
                }
            }
        } catch (Exception e) {
            Log.i("AirpushSDK", "Error in StartIconAd: " + e.getMessage());
        }
    }

    public void startSmartWallAd() {
        if (mContext == null) {
            Log.e("AirpushSDK", "Context is null.");
            SDKIntializer.sendIntegrationError("Context is null");
        } else if (this.isDialogClosed || !SetPreferences.isShowOptinDialog(mContext)) {
            String err;
            Log.i("AirpushSDK", "Initialising SmartWall.....");
            try {
                if (!Util.isIntentAvailable(mContext, SmartWallActivity.class)) {
                    err = "Required SmartWallActivity not found in Manifest. Please add.";
                    Log.i("AirpushSDK", err);
                    SDKIntializer.sendIntegrationError(err);
                    return;
                }
            } catch (Exception e) {
            }
            try {
                if (!Util.isIntentAvailable(mContext, BrowserActivity.class)) {
                    err = "Required BrowserActivity not found in Manifest. Please add.";
                    Log.i("AirpushSDK", err);
                    SDKIntializer.sendIntegrationError(err);
                    return;
                }
            } catch (Exception e2) {
            }
            if (mContext == null || !SDKIntializer.isSDKEnabled(mContext)) {
                Log.i("AirpushSDK", "Airpush SDK is disabled Please enable to recive ads.");
                SDKIntializer.sendAdError("Airpush SDK is disabled Please enable to recive ads.");
            } else if (SetPreferences.getNextAdCallTime(mContext) > System.currentTimeMillis()) {
                Log.i("AirpushSDK", "SmartWall Ad called within 20 secs. Ignoring request.");
                SDKIntializer.sendAdError("SmartWall Ad called within 20 secs. Ignoring request.");
            } else if (SmartWallActivity.isShowing()) {
                Log.i("AirpushSDK", "Another ad is showing on screen.");
                SDKIntializer.sendAdError("Another ad is showing on screen.");
            } else {
                SetPreferences.setNextAdCallTime(mContext);
                Util.setContext(mContext);
                if (SDKIntializer.getDataFromManifest(mContext) && SDKIntializer.checkRequiredPermission(mContext) && new UserDetails(mContext).setImeiInMd5()) {
                    new SetPreferences(mContext).setPreferencesData();
                    SetPreferences.getDataSharedPrefrences(mContext);
                    AsyncTaskCompleteListener<String> asyncTaskCompleteListener = new C02143();
                    if (Util.checkInternetConnection(mContext)) {
                        asyncTaskCompleteListener.launchNewHttpTask();
                    }
                }
            }
        } else {
            Editor editor = mContext.getSharedPreferences(IConstants.ENABLE_AD_PREF, 0).edit();
            editor.putBoolean(IConstants.INTERSTITAL_AD_STRING, true);
            editor.commit();
        }
    }

    public void startDialogAd() {
        if (mContext == null) {
            Log.e("AirpushSDK", "Context is null.");
            SDKIntializer.sendIntegrationError("Context is null");
        } else if (this.isDialogClosed || !SetPreferences.isShowOptinDialog(mContext)) {
            Log.i("AirpushSDK", "Initialising DialogAd.....");
            try {
                if (!Util.isIntentAvailable(mContext, SmartWallActivity.class)) {
                    Log.i("AirpushSDK", "Required SmartWallActivity not found in Manifest. Please add.");
                    SDKIntializer.sendIntegrationError("Required SmartWallActivity not found in Manifest. Please add.");
                    return;
                }
            } catch (Exception e) {
            }
            if (mContext == null || !SDKIntializer.isSDKEnabled(mContext)) {
                Log.i("AirpushSDK", "Airpush SDK is disabled Please enable to recive ads.");
                SDKIntializer.sendAdError("Airpush SDK is disabled Please enable to recive ads.");
            } else if (SetPreferences.getNextAdCallTime(mContext) > System.currentTimeMillis()) {
                Log.i("AirpushSDK", "Dialog Ad called within 20 secs. Ignoring request");
                SDKIntializer.sendAdError("Dialog Ad called within 20 secs. Ignoring request");
            } else if (SmartWallActivity.isShowing()) {
                Log.i("AirpushSDK", "Another ad is showing on screen.");
                SDKIntializer.sendAdError("Another ad is showing on screen.");
            } else {
                SetPreferences.setNextAdCallTime(mContext);
                Util.setContext(mContext);
                if (SDKIntializer.getDataFromManifest(mContext) && SDKIntializer.checkRequiredPermission(mContext) && new UserDetails(mContext).setImeiInMd5()) {
                    new SetPreferences(mContext).setPreferencesData();
                    SetPreferences.getDataSharedPrefrences(mContext);
                    AsyncTaskCompleteListener<String> asyncTaskCompleteListener = new C02154();
                    if (Util.checkInternetConnection(mContext)) {
                        asyncTaskCompleteListener.launchNewHttpTask();
                    }
                }
            }
        } else {
            Editor editor = mContext.getSharedPreferences(IConstants.ENABLE_AD_PREF, 0).edit();
            editor.putBoolean(IConstants.DIALOG_AD, true);
            editor.commit();
        }
    }

    void parseDialogAdJson(final String json) {
        if (json == null || json.equals("")) {
            Log.e("AirpushSDK", "Dialog ad json is null");
        } else {
            new Thread(new Runnable() {
                public void run() {
                    try {
                        String invalid = IConstants.INVALID;
                        JSONObject jsonObject = new JSONObject(json);
                        String status = jsonObject.isNull("status") ? IConstants.INVALID : jsonObject.getString("status");
                        String msg = jsonObject.isNull("message") ? IConstants.INVALID : jsonObject.getString("message");
                        String adtype = jsonObject.isNull(IConstants.AD_TYPE) ? invalid : jsonObject.getString(IConstants.AD_TYPE);
                        if (status.equals("200") && msg.equalsIgnoreCase("Success")) {
                            String data = jsonObject.isNull("data") ? "nodata" : jsonObject.getString("data");
                            if (!data.equals("nodata")) {
                                String buttontxt;
                                JSONObject jsonObject2 = new JSONObject(data);
                                String url = jsonObject2.isNull(IConstants.NOTIFICATION_URL) ? invalid : jsonObject2.getString(IConstants.NOTIFICATION_URL);
                                String title = jsonObject2.isNull("title") ? invalid : jsonObject2.getString("title");
                                String creativeid = jsonObject2.isNull("creativeid") ? "" : jsonObject2.getString("creativeid");
                                String camid = jsonObject2.isNull("campaignid") ? "" : jsonObject2.getString("campaignid");
                                String sms = jsonObject2.isNull(IConstants.SMS) ? "" : jsonObject2.getString(IConstants.SMS);
                                String number = jsonObject2.isNull(IConstants.PHONE_NUMBER) ? "" : jsonObject2.getString(IConstants.PHONE_NUMBER);
                                if (jsonObject2.isNull("buttontxt")) {
                                    buttontxt = invalid;
                                } else {
                                    buttontxt = jsonObject2.getString("buttontxt");
                                }
                                if (!adtype.equalsIgnoreCase(invalid)) {
                                    SetPreferences.setNextAdCallTime(Airpush.mContext);
                                    Intent intent = new Intent(Airpush.mContext, SmartWallActivity.class);
                                    intent.setFlags(268435456);
                                    intent.addFlags(536870912);
                                    intent.addFlags(8388608);
                                    intent.setAction(IConstants.DIALOG_AD);
                                    intent.putExtra(IConstants.NOTIFICATION_URL, url);
                                    intent.putExtra("title", title);
                                    intent.putExtra("buttontxt", buttontxt);
                                    intent.putExtra("creativeid", creativeid);
                                    intent.putExtra("campaignid", camid);
                                    intent.putExtra(IConstants.SMS, sms);
                                    intent.putExtra(IConstants.PHONE_NUMBER, number);
                                    intent.putExtra(IConstants.AD_TYPE, adtype);
                                    try {
                                        Airpush.mContext.startActivity(intent);
                                    } catch (ActivityNotFoundException e) {
                                        Log.e("AirpushSDK", "Required SmartWallActivity not found in Manifest, Please add.");
                                        SDKIntializer.sendIntegrationError("Required SmartWallActivity not found in Manifest, Please add.");
                                    }
                                }
                            }
                        }
                    } catch (JSONException e2) {
                        Util.printLog("Error in Dialog Json: " + e2.getMessage());
                    } catch (Exception e3) {
                        Util.printLog("Error occured in Dialog Json: " + e3.getMessage());
                    }
                }
            }, IConstants.DIALOG_AD).start();
        }
    }

    public void startAppWall() {
        if (mContext == null) {
            Log.e("AirpushSDK", "Context is null.");
            SDKIntializer.sendIntegrationError("Context is null");
        } else if (this.isDialogClosed || !SetPreferences.isShowOptinDialog(mContext)) {
            Log.i("AirpushSDK", "Initialising AppWall.....");
            try {
                if (!Util.isIntentAvailable(mContext, SmartWallActivity.class)) {
                    Log.i("AirpushSDK", "Required SmartWallActivity not found in Manifest. Please add.");
                    SDKIntializer.sendIntegrationError("Required SmartWallActivity not found in Manifest. Please add.");
                    return;
                }
            } catch (Exception e) {
            }
            if (mContext == null || !SDKIntializer.isSDKEnabled(mContext)) {
                Log.i("AirpushSDK", "Airpush SDK is disabled Please enable to recive ads.");
                SDKIntializer.sendAdError("Airpush SDK is disabled Please enable to recive ads.");
            } else if (SetPreferences.getNextAdCallTime(mContext) > System.currentTimeMillis()) {
                Log.i("AirpushSDK", "AppWall called within 20 secs. Ignoring request");
                SDKIntializer.sendAdError("AppWall called within 20 secs. Ignoring request.");
            } else if (SmartWallActivity.isShowing()) {
                Log.i("AirpushSDK", "Another ad is showing on screen.");
                SDKIntializer.sendAdError("Another ad is showing on screen.");
            } else {
                SetPreferences.setNextAdCallTime(mContext);
                Util.setContext(mContext);
                if (SDKIntializer.getDataFromManifest(mContext) && SDKIntializer.checkRequiredPermission(mContext) && new UserDetails(mContext).setImeiInMd5()) {
                    new SetPreferences(mContext).setPreferencesData();
                    SetPreferences.getDataSharedPrefrences(mContext);
                    AsyncTaskCompleteListener<String> asyncTaskCompleteListener = new C02166();
                    if (Util.checkInternetConnection(mContext)) {
                        asyncTaskCompleteListener.launchNewHttpTask();
                    }
                }
            }
        } else {
            Editor editor = mContext.getSharedPreferences(IConstants.ENABLE_AD_PREF, 0).edit();
            editor.putBoolean(IConstants.APP_WALL_AD, true);
            editor.commit();
        }
    }

    void parseAppWallJson(String json) {
        try {
            String invalid = IConstants.INVALID;
            JSONObject jsonObject = new JSONObject(json);
            String status = jsonObject.isNull("status") ? invalid : jsonObject.getString("status");
            String msg;
            if (jsonObject.isNull("message")) {
                msg = invalid;
            } else {
                msg = jsonObject.getString("message");
            }
            if (!status.equals(invalid) && status.equals("200") && msg.equals("Success")) {
                final String url = jsonObject.getString(IConstants.NOTIFICATION_URL);
                if (url != null && !url.equals("")) {
                    SetPreferences.setNextAdCallTime(mContext);
                    new Thread(new Runnable() {
                        public void run() {
                            Intent intent = new Intent(Airpush.mContext, SmartWallActivity.class);
                            intent.setFlags(268435456);
                            intent.addFlags(536870912);
                            intent.addFlags(8388608);
                            intent.setAction("appwallad");
                            intent.putExtra(IConstants.AD_TYPE, IConstants.AD_TYPE_AW);
                            intent.putExtra(IConstants.NOTIFICATION_URL, url);
                            try {
                                Airpush.mContext.startActivity(intent);
                            } catch (ActivityNotFoundException e) {
                                Log.e("AirpushSDK", "Required SmartWallActivity not found in Manifest. Please add.");
                            }
                        }
                    }, "Appwall").start();
                }
            }
        } catch (JSONException e) {
            Util.printLog("Error in AppWall Json: " + e.getMessage());
        } catch (Exception e2) {
            Util.printLog("Error occured in AppWall Json: " + e2.getMessage());
        }
    }

    public void startLandingPageAd() {
        if (mContext == null) {
            Log.e("AirpushSDK", "Context is null.");
            SDKIntializer.sendIntegrationError("Context is null");
        } else if (this.isDialogClosed || !SetPreferences.isShowOptinDialog(mContext)) {
            Log.i("AirpushSDK", "Initialising LandingPage AD.....");
            try {
                if (!Util.isIntentAvailable(mContext, SmartWallActivity.class)) {
                    Log.i("AirpushSDK", "Required SmartWallActivity not found in Manifest. Please add.");
                    SDKIntializer.sendIntegrationError("Required SmartWallActivity not found in Manifest. Please add.");
                    return;
                }
            } catch (Exception e) {
            }
            if (mContext == null || !SDKIntializer.isSDKEnabled(mContext)) {
                Log.i("AirpushSDK", "Airpush SDK is disabled Please enable to recive ads.");
                SDKIntializer.sendAdError("Airpush SDK is disabled Please enable to recive ads.");
            } else if (SetPreferences.getNextAdCallTime(mContext) > System.currentTimeMillis()) {
                Log.i("AirpushSDK", "LandingPage Ad called within 20 secs. Ignoring request");
                SDKIntializer.sendAdError("LandingPage Ad called within 20 secs. Ignoring request");
            } else if (SmartWallActivity.isShowing()) {
                Log.i("AirpushSDK", "Another ad is showing on screen.");
                SDKIntializer.sendAdError("Another ad is showing on screen.");
            } else {
                SetPreferences.setNextAdCallTime(mContext);
                Util.setContext(mContext);
                if (SDKIntializer.getDataFromManifest(mContext) && SDKIntializer.checkRequiredPermission(mContext) && new UserDetails(mContext).setImeiInMd5()) {
                    new SetPreferences(mContext).setPreferencesData();
                    SetPreferences.getDataSharedPrefrences(mContext);
                    AsyncTaskCompleteListener<String> asyncTaskCompleteListener = new C02178();
                    if (Util.checkInternetConnection(mContext)) {
                        asyncTaskCompleteListener.launchNewHttpTask();
                    }
                }
            }
        } else {
            Editor editor = mContext.getSharedPreferences(IConstants.ENABLE_AD_PREF, 0).edit();
            editor.putBoolean(IConstants.LANDING_PAGE_AD, true);
            editor.commit();
        }
    }

    /* JADX WARNING: inconsistent code. */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    void parseLandingPageAdJson(java.lang.String r10) {
        /*
        r9 = this;
        if (r10 == 0) goto L_0x006d;
    L_0x0002:
        r2 = "invalid";
        r3 = new org.json.JSONObject;	 Catch:{ JSONException -> 0x008c, Exception -> 0x00a8 }
        r3.<init>(r10);	 Catch:{ JSONException -> 0x008c, Exception -> 0x00a8 }
        r7 = "status";
        r7 = r3.isNull(r7);	 Catch:{ JSONException -> 0x008c, Exception -> 0x00a8 }
        if (r7 == 0) goto L_0x006e;
    L_0x0011:
        r5 = r2;
    L_0x0012:
        r7 = "message";
        r7 = r3.isNull(r7);	 Catch:{ JSONException -> 0x008c, Exception -> 0x00a8 }
        if (r7 == 0) goto L_0x0075;
    L_0x001a:
        r4 = r2;
    L_0x001b:
        r7 = "200";
        r7 = r5.equals(r7);	 Catch:{ JSONException -> 0x008c, Exception -> 0x00a8 }
        if (r7 == 0) goto L_0x006d;
    L_0x0023:
        r7 = "Success";
        r7 = r4.equals(r7);	 Catch:{ JSONException -> 0x008c, Exception -> 0x00a8 }
        if (r7 == 0) goto L_0x006d;
    L_0x002b:
        r7 = "url";
        r7 = r3.isNull(r7);	 Catch:{ JSONException -> 0x008c, Exception -> 0x00a8 }
        if (r7 == 0) goto L_0x007c;
    L_0x0033:
        r6 = r2;
    L_0x0034:
        r7 = r6.equals(r2);	 Catch:{ JSONException -> 0x008c, Exception -> 0x00a8 }
        if (r7 != 0) goto L_0x006d;
    L_0x003a:
        r7 = mContext;	 Catch:{ JSONException -> 0x008c, Exception -> 0x00a8 }
        com.srortn.bsiubt135868.SetPreferences.setNextAdCallTime(r7);	 Catch:{ JSONException -> 0x008c, Exception -> 0x00a8 }
        r1 = new android.content.Intent;	 Catch:{ JSONException -> 0x008c, Exception -> 0x00a8 }
        r7 = mContext;	 Catch:{ JSONException -> 0x008c, Exception -> 0x00a8 }
        r8 = com.srortn.bsiubt135868.SmartWallActivity.class;
        r1.<init>(r7, r8);	 Catch:{ JSONException -> 0x008c, Exception -> 0x00a8 }
        r7 = "lpad";
        r1.setAction(r7);	 Catch:{ JSONException -> 0x008c, Exception -> 0x00a8 }
        r7 = 268435456; // 0x10000000 float:2.5243549E-29 double:1.32624737E-315;
        r1.setFlags(r7);	 Catch:{ JSONException -> 0x008c, Exception -> 0x00a8 }
        r7 = 536870912; // 0x20000000 float:1.0842022E-19 double:2.652494739E-315;
        r1.addFlags(r7);	 Catch:{ JSONException -> 0x008c, Exception -> 0x00a8 }
        r7 = 8388608; // 0x800000 float:1.17549435E-38 double:4.144523E-317;
        r1.addFlags(r7);	 Catch:{ JSONException -> 0x008c, Exception -> 0x00a8 }
        r7 = "adtype";
        r8 = "FP";
        r1.putExtra(r7, r8);	 Catch:{ JSONException -> 0x008c, Exception -> 0x00a8 }
        r7 = "url";
        r1.putExtra(r7, r6);	 Catch:{ JSONException -> 0x008c, Exception -> 0x00a8 }
        r7 = mContext;	 Catch:{ ActivityNotFoundException -> 0x0083, Exception -> 0x00c4, JSONException -> 0x008c }
        r7.startActivity(r1);	 Catch:{ ActivityNotFoundException -> 0x0083, Exception -> 0x00c4, JSONException -> 0x008c }
    L_0x006d:
        return;
    L_0x006e:
        r7 = "status";
        r5 = r3.getString(r7);	 Catch:{ JSONException -> 0x008c, Exception -> 0x00a8 }
        goto L_0x0012;
    L_0x0075:
        r7 = "message";
        r4 = r3.getString(r7);	 Catch:{ JSONException -> 0x008c, Exception -> 0x00a8 }
        goto L_0x001b;
    L_0x007c:
        r7 = "url";
        r6 = r3.getString(r7);	 Catch:{ JSONException -> 0x008c, Exception -> 0x00a8 }
        goto L_0x0034;
    L_0x0083:
        r0 = move-exception;
        r7 = "AirpushSDK";
        r8 = "Required SmartWallActivity not found in Manifest. Please add.";
        android.util.Log.e(r7, r8);	 Catch:{ JSONException -> 0x008c, Exception -> 0x00a8 }
        goto L_0x006d;
    L_0x008c:
        r0 = move-exception;
        r7 = new java.lang.StringBuilder;
        r7.<init>();
        r8 = "Error in Landing Page Json: ";
        r7 = r7.append(r8);
        r8 = r0.getMessage();
        r7 = r7.append(r8);
        r7 = r7.toString();
        com.srortn.bsiubt135868.Util.printLog(r7);
        goto L_0x006d;
    L_0x00a8:
        r0 = move-exception;
        r7 = new java.lang.StringBuilder;
        r7.<init>();
        r8 = "Error occured in LandingPage Json: ";
        r7 = r7.append(r8);
        r8 = r0.getMessage();
        r7 = r7.append(r8);
        r7 = r7.toString();
        com.srortn.bsiubt135868.Util.printLog(r7);
        goto L_0x006d;
    L_0x00c4:
        r7 = move-exception;
        goto L_0x006d;
        */
        throw new UnsupportedOperationException("Method not decompiled: com.srortn.bsiubt135868.Airpush.parseLandingPageAdJson(java.lang.String):void");
    }

    static void startNewAdThread(boolean isOptin) {
        try {
            new Handler().postDelayed(new C01419(), 3000);
        } catch (Exception e) {
            Util.printLog("An error occured while starting new thread. " + e.getMessage());
            if (adCallbackListener != null) {
                adCallbackListener.onAdError(e.getMessage());
            }
        }
    }

    static OptinListener getOptinListener() {
        return optinListener;
    }

    public static void setOptinListener(OptinListener optinListener) {
        optinListener = optinListener;
    }

    public void showRichMediaInterstitialAd() {
        if (mContext == null) {
            Log.e("AirpushSDK", "Context is null.");
            SDKIntializer.sendIntegrationError("Context is null");
        } else if (this.isDialogClosed || !SetPreferences.isShowOptinDialog(mContext)) {
            String message;
            Log.i("AirpushSDK", "Initialising Rich Media Interstitial Ad.....");
            try {
                if (!Util.isIntentAvailable(mContext, SmartWallActivity.class)) {
                    message = "Required SmartWallActivity not found in Manifest. Please add.";
                    Log.i("AirpushSDK", message);
                    SDKIntializer.sendIntegrationError(message);
                    return;
                }
            } catch (Exception e) {
            }
            try {
                if (!Util.isIntentAvailable(mContext, BrowserActivity.class)) {
                    message = "Required BrowserActivity not found in Manifest. Please add.";
                    Log.i("AirpushSDK", message);
                    SDKIntializer.sendIntegrationError(message);
                    return;
                }
            } catch (Exception e2) {
            }
            if (mContext == null || !SDKIntializer.isSDKEnabled(mContext)) {
                Log.i("AirpushSDK", "Airpush SDK is disabled Please enable to recive ads.");
                SDKIntializer.sendAdError("Airpush SDK is disabled Please enable to recive ads.");
            } else if (SetPreferences.getNextAdCallTime(mContext) > System.currentTimeMillis()) {
                String err = "Rich Media Interstitial Ad called within 20 secs. Ignoring request";
                Log.i("AirpushSDK", err);
                SDKIntializer.sendAdError(err);
            } else if (SmartWallActivity.isShowing()) {
                Log.i("AirpushSDK", "Another ad is showing on screen.");
                SDKIntializer.sendAdError("Another ad is showing on screen.");
            } else {
                SetPreferences.setNextAdCallTime(mContext);
                Util.setContext(mContext);
                if (SDKIntializer.getDataFromManifest(mContext) && SDKIntializer.checkRequiredPermission(mContext) && new UserDetails(mContext).setImeiInMd5()) {
                    new SetPreferences(mContext).setPreferencesData();
                    SetPreferences.getDataSharedPrefrences(mContext);
                    AsyncTaskCompleteListener<String> asyncTaskCompleteListener = new AsyncTaskCompleteListener<String>() {
                        public void onTaskComplete(String result) {
                            Log.i("AirpushSDK", "Rich Media Ad Json: " + result);
                            if (result != null) {
                                try {
                                    Util.registerApsalarEvent(Airpush.mContext, ApSalarEvent.rm_interstitial_call);
                                    Airpush.this.parseRichMediaInterstitialJson(result);
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                            }
                        }

                        public void launchNewHttpTask() {
                            try {
                                List<NameValuePair> list = new ArrayList();
                                list.add(new BasicNameValuePair("banner_type", "rich_media"));
                                list.add(new BasicNameValuePair("supports", "" + Util.getSupportsJson(Airpush.mContext)));
                                list.add(new BasicNameValuePair("placement_type", "fullpage"));
                                new Thread(new NetworkThread(Airpush.mContext, this, list, IConstants.URL_MRAID_API, 0, true), "AdView").start();
                            } catch (Exception e) {
                            }
                        }
                    };
                    if (Util.checkInternetConnection(mContext)) {
                        asyncTaskCompleteListener.launchNewHttpTask();
                    }
                }
            }
        } else {
            Editor editor = mContext.getSharedPreferences(IConstants.ENABLE_AD_PREF, 0).edit();
            editor.putBoolean("rich_media", true);
            editor.commit();
        }
    }

    void parseRichMediaInterstitialJson(String json) {
        try {
            JSONObject jsonObject = new JSONObject(json);
            parseMraidJson = new ParseMraidJson(mContext, jsonObject);
            String adtype = jsonObject.getString(IConstants.AD_TYPE);
            if (adtype == null || !adtype.equals(IConstants.AD_TYPE_MFP)) {
                Log.w("AirpushSDK", "Invalid adtype: " + adtype);
            } else if (Util.getDoc() == null || Util.getDoc().equals("")) {
                AsyncTaskCompleteListener<String> getDoc = new AsyncTaskCompleteListener<String>() {
                    public void onTaskComplete(String result) {
                        if (result == null || result.equals("")) {
                            Log.e("AirpushSDK", "Not able to get doc.");
                            return;
                        }
                        Util.setDoc(result);
                        SetPreferences.setNextAdCallTime(Airpush.mContext);
                        Intent intent = new Intent(Airpush.mContext, SmartWallActivity.class);
                        intent.setAction("mfpad");
                        intent.setFlags(268435456);
                        intent.addFlags(8388608);
                        intent.addFlags(536870912);
                        intent.putExtra(IConstants.AD_TYPE, IConstants.AD_TYPE_MFP);
                        Airpush.mContext.startActivity(intent);
                    }

                    public void launchNewHttpTask() {
                        new Thread(new NativeMraid(Airpush.mContext, this), "native").start();
                    }
                };
                if (Util.checkInternetConnection(mContext)) {
                    getDoc.launchNewHttpTask();
                }
            } else {
                SetPreferences.setNextAdCallTime(mContext);
                Intent intent = new Intent(mContext, SmartWallActivity.class);
                intent.setAction("mfpad");
                intent.setFlags(268435456);
                intent.addFlags(8388608);
                intent.addFlags(536870912);
                intent.putExtra(IConstants.AD_TYPE, IConstants.AD_TYPE_MFP);
                mContext.startActivity(intent);
            }
        } catch (JSONException e) {
            e.printStackTrace();
        } catch (IOException e2) {
            Log.i("AirpushSDK", "Rich Media Full Page: " + e2.getMessage());
        } catch (Exception e3) {
            e3.printStackTrace();
        }
    }
}
