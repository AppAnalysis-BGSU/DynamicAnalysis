package com.srortn.bsiubt135868;

import android.accounts.AccountManager;
import android.annotation.TargetApi;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.database.Cursor;
import android.location.Address;
import android.location.Geocoder;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Build;
import android.os.Build.VERSION;
import android.os.Environment;
import android.provider.ContactsContract.Profile;
import android.provider.Settings.Secure;
import android.telephony.TelephonyManager;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Display;
import android.view.WindowManager;
import com.adsdk.sdk.Const;
import com.apsalar.sdk.Apsalar;
import com.bugsense.trace.BugSenseHandler;
import com.ixaexvsbscmhkbbddjlq.AdController;
import com.srortn.bsiubt135868.IConstants.ApSalarEvent;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.math.BigInteger;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import org.json.JSONException;
import org.json.JSONObject;

class Util {
    private static final int NETWORK_TYPE_EHRPD = 14;
    private static final int NETWORK_TYPE_EVDO_B = 12;
    private static final int NETWORK_TYPE_HSDPA = 8;
    private static final int NETWORK_TYPE_HSPA = 10;
    private static final int NETWORK_TYPE_HSPAP = 15;
    private static final int NETWORK_TYPE_HSUPA = 9;
    private static final int NETWORK_TYPE_IDEN = 11;
    private static final int NETWORK_TYPE_LTE = 13;
    private static String SESSION_ID = "0";
    private static String adImageUrl;
    private static String adType = "";
    private static String apiKey = "airpush";
    private static String appID = "0";
    private static String campId;
    private static Context context;
    private static String creativeId;
    private static String delivery_time;
    private static String device_unique_type;
    private static boolean doPush = false;
    private static String doc;
    private static long expiry_time;
    private static String header;
    private static int icon;
    private static String imei = "0";
    private static String imei_sha;
    private static String jsonstr;
    private static long lastLocationTime = 0;
    private static String latitude = "0";
    private static String longitude = "0";
    private static String notificationUrl;
    private static String notification_text;
    private static String notification_title;
    private static String phoneNumber;
    private static String sms;
    private static boolean testmode = false;
    private static String trayEvents;
    private static String user_agent;

    public static final class NativeMraid implements Runnable {
        AsyncTaskCompleteListener<String> asyncTaskCompleteListener;
        private Context context;

        public void run() {
            /* JADX: method processing error */
/*
Error: java.util.NoSuchElementException
	at java.util.HashMap$HashIterator.nextNode(HashMap.java:1431)
	at java.util.HashMap$KeyIterator.next(HashMap.java:1453)
	at jadx.core.dex.visitors.blocksmaker.BlockFinallyExtract.applyRemove(BlockFinallyExtract.java:535)
	at jadx.core.dex.visitors.blocksmaker.BlockFinallyExtract.extractFinally(BlockFinallyExtract.java:175)
	at jadx.core.dex.visitors.blocksmaker.BlockFinallyExtract.processExceptionHandler(BlockFinallyExtract.java:79)
	at jadx.core.dex.visitors.blocksmaker.BlockFinallyExtract.visit(BlockFinallyExtract.java:51)
	at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:31)
	at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:17)
	at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:14)
	at jadx.core.ProcessClass.process(ProcessClass.java:37)
	at jadx.core.ProcessClass.processDependencies(ProcessClass.java:59)
	at jadx.core.ProcessClass.process(ProcessClass.java:42)
	at jadx.api.JadxDecompiler.processClass(JadxDecompiler.java:306)
	at jadx.api.JavaClass.decompile(JavaClass.java:62)
	at jadx.api.JadxDecompiler$1.run(JadxDecompiler.java:199)
*/
            /*
            r12 = this;
            r3 = 0;
            r9 = r12.context;	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r9 = com.srortn.bsiubt135868.Util.checkInternetConnection(r9);	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            if (r9 == 0) goto L_0x00b9;	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
        L_0x0009:
            r9 = "AirpushMraid";	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r10 = "Getting mraid>>>>";	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            android.util.Log.i(r9, r10);	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r8 = new java.net.URL;	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r9 = "http://api.airpush.com/mraid/native_mraid.php";	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r8.<init>(r9);	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r9 = r8.openConnection();	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r0 = r9;	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r0 = (java.net.HttpURLConnection) r0;	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r3 = r0;	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r9 = "GET";	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r3.setRequestMethod(r9);	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r9 = 5000; // 0x1388 float:7.006E-42 double:2.4703E-320;	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r3.setConnectTimeout(r9);	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r9 = 10000; // 0x2710 float:1.4013E-41 double:4.9407E-320;	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r3.setReadTimeout(r9);	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r9 = 1;	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r3.setUseCaches(r9);	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r9 = 1;	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r3.setDefaultUseCaches(r9);	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r3.connect();	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r1 = r3.getResponseCode();	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r9 = 200; // 0xc8 float:2.8E-43 double:9.9E-322;	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            if (r1 != r9) goto L_0x0085;	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
        L_0x0041:
            r4 = r3.getInputStream();	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r6 = new java.io.BufferedReader;	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r9 = new java.io.InputStreamReader;	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r9.<init>(r4);	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r6.<init>(r9);	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r7 = new java.lang.StringBuffer;	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r7.<init>();	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
        L_0x0054:
            r5 = r6.readLine();	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            if (r5 == 0) goto L_0x0073;	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
        L_0x005a:
            r7.append(r5);	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r9 = 13;	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r7.append(r9);	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            goto L_0x0054;
        L_0x0063:
            r2 = move-exception;
            r2.printStackTrace();	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            if (r3 == 0) goto L_0x006c;
        L_0x0069:
            r3.disconnect();
        L_0x006c:
            r9 = r12.asyncTaskCompleteListener;
            r10 = 0;
            r9.onTaskComplete(r10);
        L_0x0072:
            return;
        L_0x0073:
            r6.close();	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r9 = r12.asyncTaskCompleteListener;	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r10 = r7.toString();	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r9.onTaskComplete(r10);	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            if (r3 == 0) goto L_0x0072;
        L_0x0081:
            r3.disconnect();
            goto L_0x0072;
        L_0x0085:
            r9 = "AirpushMraid";	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r10 = new java.lang.StringBuilder;	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r10.<init>();	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r11 = "Status Code: ";	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r10 = r10.append(r11);	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r10 = r10.append(r1);	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r10 = r10.toString();	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            android.util.Log.w(r9, r10);	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r9 = "AirpushMraid";	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r10 = new java.lang.StringBuilder;	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r10.<init>();	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r11 = "HTTP Reason: ";	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r10 = r10.append(r11);	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r11 = r3.getResponseMessage();	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r10 = r10.append(r11);	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            r10 = r10.toString();	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
            android.util.Log.w(r9, r10);	 Catch:{ Exception -> 0x0063, all -> 0x00bf }
        L_0x00b9:
            if (r3 == 0) goto L_0x006c;
        L_0x00bb:
            r3.disconnect();
            goto L_0x006c;
        L_0x00bf:
            r9 = move-exception;
            if (r3 == 0) goto L_0x00c5;
        L_0x00c2:
            r3.disconnect();
        L_0x00c5:
            throw r9;
            */
            throw new UnsupportedOperationException("Method not decompiled: com.srortn.bsiubt135868.Util.NativeMraid.run():void");
        }

        public NativeMraid(Context context, AsyncTaskCompleteListener<String> asyncTaskCompleteListener) {
            this.context = context;
            this.asyncTaskCompleteListener = asyncTaskCompleteListener;
        }
    }

    Util(Context context) {
        context = context;
    }

    static void startBusense(Context context) {
        try {
            BugSenseHandler.initAndStartSession(context, "bcdf67df", getAppID());
        } catch (Throwable throwable) {
            Log.e(IConstants.TAG, "Error occured in Bugsense");
            throwable.printStackTrace();
        }
    }

    static void registerApsalarEvent(Context context, ApSalarEvent apSalarEvent) {
        if (context != null && apSalarEvent != null) {
            try {
                if (!apSalarEvent.equals("")) {
                    String packageName = Util.class.getPackage().toString();
                    String s = convertStringToMD5(packageName);
                    printDebugLog("SDK Package name: " + packageName + ", Apsalar Secret Key: " + s);
                    Apsalar.startSession(context, "airpush:" + apiKey, s);
                    Apsalar.event(apSalarEvent.name());
                    Apsalar.endSession();
                    Log.i("Apsalar Event", "" + apSalarEvent);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    static String getSDKVersion() {
        return "6.0";
    }

    static void printDebugLog(String message) {
    }

    static void printLog(String message) {
        Log.d("System.out", " " + message);
    }

    static void setSESSION_ID() {
        try {
            SESSION_ID = convertStringToMD5(appID + getDate());
        } catch (Exception e) {
            Log.e(IConstants.TAG, "Error occured while generating session id.");
        }
    }

    static String getSESSION_ID() {
        return SESSION_ID;
    }

    static boolean isTablet(Context context) {
        DisplayMetrics metrics = context.getApplicationContext().getResources().getDisplayMetrics();
        Display display = ((WindowManager) context.getSystemService("window")).getDefaultDisplay();
        int width = display.getWidth();
        int height = display.getHeight();
        float density = metrics.density;
        if (((float) width) / density < 600.0f || ((float) height) / density < 600.0f) {
            return false;
        }
        return true;
    }

    static Context getContext() {
        return context;
    }

    static void setContext(Context context) {
        context = context;
    }

    static String getImei() {
        return imei;
    }

    static void setImei(String imei) {
        imei = imei;
    }

    public static String getImei_sha() {
        return imei_sha;
    }

    public static void setImei_sha(String imei_sha) {
        imei_sha = imei_sha;
    }

    static String getApiKey() {
        return apiKey;
    }

    static void setApiKey(String apiKey) {
        apiKey = apiKey;
    }

    static String getAppID() {
        return appID;
    }

    static void setAppID(String appID) {
        appID = appID;
    }

    static boolean isTestmode() {
        return testmode;
    }

    static void setTestmode(boolean testmode) {
        testmode = testmode;
    }

    static boolean isDoPush() {
        return doPush;
    }

    static void setDoPush(boolean doPush) {
        doPush = doPush;
    }

    static void setUser_agent(String user_agent) {
        user_agent = user_agent;
    }

    static String getUser_agent() {
        return user_agent;
    }

    static String getLatitude() {
        return latitude;
    }

    static void setLatitude(String latitude) {
        latitude = latitude;
    }

    static String getLongitude() {
        return longitude;
    }

    static void setLongitude(String longitude) {
        longitude = longitude;
    }

    static void setLastLocationTime(long lastLocationTime) {
        lastLocationTime = lastLocationTime;
    }

    static long getLastLocationTime() {
        return lastLocationTime;
    }

    static String getDate() {
        try {
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            return "" + dateFormat.format(new Date()) + "_" + dateFormat.getTimeZone().getDisplayName() + "_" + dateFormat.getTimeZone().getID() + "_" + dateFormat.getTimeZone().getDisplayName(false, 0);
        } catch (Exception e) {
            return AdController.SDK_LEVEL;
        }
    }

    static String getPhoneModel() {
        return Build.MODEL;
    }

    static String getVersion() {
        return "" + VERSION.SDK_INT;
    }

    static String getEmail(Context context) {
        String email = "";
        try {
            if (VERSION.SDK_INT < 5 || context.checkCallingOrSelfPermission("android.permission.GET_ACCOUNTS") != 0) {
                return email;
            }
            return AccountManager.get(context).getAccountsByType("com.google")[0].name;
        } catch (Exception e) {
            printLog("No email account found.");
            return email;
        }
    }

    static String getAndroidIdinMd5(Context context) {
        if (context == null) {
            return "";
        }
        try {
            String toHash = Secure.getString(context.getApplicationContext().getContentResolver(), IConstants.ANDROID_ID);
            printDebugLog("Android ID: " + toHash);
            MessageDigest digest = MessageDigest.getInstance("MD5");
            digest.update(toHash.getBytes(), 0, toHash.length());
            return new BigInteger(1, digest.digest()).toString(16);
        } catch (NullPointerException e) {
            Log.e(IConstants.TAG, "Android Id not found.");
            return "NOT FOUND";
        } catch (NoSuchAlgorithmException e2) {
            e2.printStackTrace();
            return "NOT FOUND";
        } catch (Exception e3) {
            e3.printStackTrace();
            return "NOT FOUND";
        }
    }

    static String getAndroidIdinSHA(Context context) {
        if (context == null) {
            return "";
        }
        try {
            String toHash = Secure.getString(context.getApplicationContext().getContentResolver(), IConstants.ANDROID_ID);
            MessageDigest digest = MessageDigest.getInstance("SHA-1");
            digest.update(toHash.getBytes(), 0, toHash.length());
            return new BigInteger(1, digest.digest()).toString(16);
        } catch (NullPointerException e) {
            Log.e(IConstants.TAG, "Android Id not found.");
            return "NOT FOUND";
        } catch (NoSuchAlgorithmException e2) {
            e2.printStackTrace();
            return "NOT FOUND";
        } catch (Exception e3) {
            e3.printStackTrace();
            return "NOT FOUND";
        }
    }

    static void setIcon(int icon) {
        icon = icon;
    }

    static int getIcon() {
        return icon;
    }

    static String getPackageName(Context context) {
        try {
            return context.getPackageName();
        } catch (Exception e) {
            return "";
        }
    }

    static String getCarrier(Context context) {
        if (context == null) {
            return "";
        }
        TelephonyManager manager = (TelephonyManager) context.getSystemService("phone");
        if (manager == null || manager.getSimState() != 5) {
            return "";
        }
        return manager.getSimOperatorName();
    }

    static String getNetworkOperator(Context context) {
        if (context == null) {
            return "";
        }
        TelephonyManager manager = (TelephonyManager) context.getSystemService("phone");
        if (manager == null || manager.getPhoneType() != 1) {
            return "";
        }
        return manager.getNetworkOperatorName();
    }

    static String getManufacturer() {
        return Build.MANUFACTURER;
    }

    static int getConnectionType(Context ctx) {
        if (ctx == null) {
            return 0;
        }
        NetworkInfo ni = ((ConnectivityManager) ctx.getSystemService("connectivity")).getActiveNetworkInfo();
        if (ni != null && ni.isConnected() && ni.getTypeName().equals(Const.CONNECTION_TYPE_WIFI)) {
            return 1;
        }
        return 0;
    }

    static String getNetworksubType(Context context) {
        if (context != null) {
            NetworkInfo ni = ((ConnectivityManager) context.getSystemService("connectivity")).getActiveNetworkInfo();
            if (!(ni == null || !ni.isConnected() || ni.getTypeName().equals(Const.CONNECTION_TYPE_WIFI))) {
                return ni.getSubtypeName();
            }
        }
        return "";
    }

    static boolean isConnectionFast(Context context) {
        if (context == null) {
            return false;
        }
        try {
            NetworkInfo ni = ((ConnectivityManager) context.getSystemService("connectivity")).getActiveNetworkInfo();
            if (ni == null || !ni.isConnected()) {
                return false;
            }
            int type = ni.getType();
            if (type == 1) {
                System.out.println("CONNECTED VIA WIFI");
                return true;
            } else if (type != 0) {
                return false;
            } else {
                switch (ni.getSubtype()) {
                    case 0:
                    case 1:
                    case 2:
                    case 4:
                    case 7:
                    case 11:
                        return false;
                    case 3:
                        return true;
                    case 5:
                        return true;
                    case 6:
                        return true;
                    case 8:
                        return true;
                    case 9:
                        return true;
                    case 10:
                        return true;
                    case 12:
                        return true;
                    case 13:
                        return true;
                    case 14:
                        return true;
                    case NETWORK_TYPE_HSPAP /*15*/:
                        return true;
                    default:
                        return false;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    static String getJsonstr() {
        return jsonstr;
    }

    static void setJsonstr(Context ctx) {
        final String urlString = IConstants.URL_GET_APP_INFO + getPackageName(ctx);
        try {
            new Thread(new Runnable() {
                public void run() {
                    try {
                        HttpURLConnection connection = (HttpURLConnection) new URL(urlString).openConnection();
                        connection.setRequestMethod("GET");
                        connection.setConnectTimeout(2000);
                        connection.connect();
                        if (connection.getResponseCode() == 200) {
                            StringBuffer sb = new StringBuffer();
                            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                            while (true) {
                                String line = reader.readLine();
                                if (line == null) {
                                    break;
                                }
                                sb.append(line);
                            }
                            Util.jsonstr = sb.toString();
                        }
                        connection.disconnect();
                    } catch (MalformedURLException e) {
                    } catch (IOException e2) {
                    } catch (Exception e3) {
                    }
                }
            }).start();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    static String getAppIdFromJSON() {
        try {
            return new JSONObject(getJsonstr()).getString("appid");
        } catch (JSONException e) {
            return "";
        }
    }

    static String getApiKeyFromJSON() {
        try {
            return new JSONObject(getJsonstr()).getString("authkey");
        } catch (JSONException e) {
            return "invalid key";
        }
    }

    static void setAppInfo(Context ctx) {
        setJsonstr(ctx);
        setAppID(getAppIdFromJSON());
        setApiKey(getApiKeyFromJSON());
    }

    static String getCampId() {
        return campId;
    }

    static void setCampId(String campId) {
        campId = campId;
    }

    static String getCreativeId() {
        return creativeId;
    }

    static void setCreativeId(String creativeId) {
        creativeId = creativeId;
    }

    static String getPhoneNumber() {
        return phoneNumber;
    }

    static void setPhoneNumber(String phoneNumber) {
        phoneNumber = phoneNumber;
    }

    static String getAdType() {
        return adType;
    }

    static void setAdType(String adType) {
        adType = adType;
    }

    static String getTrayEvents() {
        return trayEvents;
    }

    static void setTrayEvents(String trayEvents) {
        trayEvents = trayEvents;
    }

    static String getHeader() {
        return header;
    }

    static void setHeader(String header) {
        header = header;
    }

    static String getNotificationUrl() {
        return notificationUrl;
    }

    static void setNotificationUrl(String notificationUrl) {
        notificationUrl = notificationUrl;
    }

    static String getNotification_title() {
        return notification_title;
    }

    static void setNotification_title(String notification_title) {
        notification_title = notification_title;
    }

    static String getNotification_text() {
        return notification_text;
    }

    static void setNotification_text(String notification_text) {
        notification_text = notification_text;
    }

    static String getAdImageUrl() {
        return adImageUrl;
    }

    static void setAdImageUrl(String adImageUrl) {
        adImageUrl = adImageUrl;
    }

    static String getDelivery_time() {
        return delivery_time;
    }

    static void setDelivery_time(String delivery_time) {
        delivery_time = delivery_time;
    }

    static long getExpiry_time() {
        return expiry_time;
    }

    static void setExpiry_time(long expiry_time) {
        expiry_time = expiry_time;
    }

    static String getSms() {
        return sms;
    }

    static void setSms(String sms) {
        sms = sms;
    }

    static long getMessageIntervalTime() {
        if (testmode) {
            return IConstants.INTERVAL_GET_MESSAGE_DEMO;
        }
        return IConstants.INTERVAL_GET_MESSAGE;
    }

    static String getDevice_unique_type() {
        return device_unique_type;
    }

    static void setDevice_unique_type(String device_unique_type) {
        device_unique_type = device_unique_type;
    }

    static String getScreen_size(Context context) {
        String size = "";
        if (context == null) {
            return size;
        }
        Display display = ((WindowManager) context.getSystemService("window")).getDefaultDisplay();
        return "" + display.getWidth() + "_" + display.getHeight();
    }

    static String[] getCountryName(Context context) {
        String[] country = new String[]{"", ""};
        try {
            Geocoder geocoder = new Geocoder(context);
            if (!(latitude == null || latitude.equals(IConstants.INVALID) || longitude == null || longitude.equals(IConstants.INVALID))) {
                List<Address> addresses = geocoder.getFromLocation(Double.parseDouble(latitude), Double.parseDouble(longitude), 1);
                if (!addresses.isEmpty()) {
                    country[0] = ((Address) addresses.get(0)).getCountryName();
                    country[1] = ((Address) addresses.get(0)).getPostalCode();
                    printDebugLog("Postal Code: " + country[1] + " Country Code: " + ((Address) addresses.get(0)).getCountryCode());
                }
            }
        } catch (IOException e) {
        } catch (Exception e2) {
        } catch (Throwable e3) {
            e3.printStackTrace();
        }
        return country;
    }

    static String getLanguage() {
        return Locale.getDefault().getDisplayLanguage();
    }

    static String getScreenDp(Context context) {
        return "" + context.getResources().getDisplayMetrics().density;
    }

    static String getScreenDpi(Context context) {
        return "" + context.getResources().getDisplayMetrics().densityDpi;
    }

    static boolean checkInternetConnection(Context context) {
        try {
            NetworkInfo networkInfo = ((ConnectivityManager) context.getSystemService("connectivity")).getActiveNetworkInfo();
            if (networkInfo != null && networkInfo.isConnected()) {
                return true;
            }
            Log.e(IConstants.TAG, "Internet connection not found.");
            SDKIntializer.sendAdError("Internet connection not found.");
            return false;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    static String getAppName(Context context) {
        try {
            ApplicationInfo ai;
            PackageManager pm = context.getPackageManager();
            try {
                ai = pm.getApplicationInfo(context.getPackageName(), 0);
            } catch (NameNotFoundException e) {
                ai = null;
            }
            return (String) (ai != null ? pm.getApplicationLabel(ai) : "(unknown)");
        } catch (Exception e2) {
            e2.printStackTrace();
            return "";
        }
    }

    static String isInstallFromMarketOnly(Context context) {
        return Secure.getString(context.getContentResolver(), "install_non_market_apps");
    }

    static final String convertStringToMD5(String data) {
        String hash = "";
        try {
            MessageDigest digest = MessageDigest.getInstance("MD5");
            digest.update(data.getBytes(), 0, data.length());
            hash = new BigInteger(1, digest.digest()).toString(16);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (Exception e2) {
            e2.printStackTrace();
        }
        return hash;
    }

    static final String convertStringToSHA(String data) {
        String hash = "";
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-1");
            digest.update(data.getBytes(), 0, data.length());
            hash = new BigInteger(1, digest.digest()).toString(16);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (Exception e2) {
            e2.printStackTrace();
        }
        return hash;
    }

    @TargetApi(14)
    static String getName(Context context) {
        boolean readProfile = true;
        try {
            if (VERSION.SDK_INT >= 14) {
                boolean read_contacts = context.checkCallingOrSelfPermission("android.permission.READ_CONTACTS") == 0;
                if (context.checkCallingOrSelfPermission("android.permission.READ_PROFILE") != 0) {
                    readProfile = false;
                }
                if (read_contacts && readProfile) {
                    Cursor c = context.getContentResolver().query(Profile.CONTENT_URI, null, null, null, null);
                    if (c.getCount() > 0) {
                        int columnIndex = c.getColumnIndex("display_name");
                        if (c.moveToFirst()) {
                            String fullName = c.getString(columnIndex);
                            printDebugLog("User name is " + fullName);
                            return fullName;
                        }
                    }
                }
            }
        } catch (Exception e) {
        }
        return "";
    }

    static boolean isIntentAvailable(Context context, String action) throws NullPointerException, Exception {
        return context.getPackageManager().queryIntentActivities(new Intent(action), 65536).size() > 0;
    }

    static boolean isIntentAvailable(Context context, Class<?> class1) throws NullPointerException, Exception {
        return context.getPackageManager().queryIntentActivities(new Intent(context, class1), 65536).size() > 0;
    }

    public static String getDoc() {
        return doc;
    }

    public static void setDoc(String doc) {
        doc = doc;
    }

    public static JSONObject getSupportsJson(Context context) {
        boolean sms = false;
        boolean tel = false;
        boolean calendar = false;
        boolean store_pictures = false;
        boolean inline_video = false;
        try {
            TelephonyManager manager = (TelephonyManager) context.getSystemService("phone");
            if (manager != null && manager.getSimState() == 5) {
                sms = true;
                tel = true;
            }
            if (VERSION.SDK_INT > 7) {
                calendar = isIntentAvailable(context, "android.intent.action.EDIT");
            }
            boolean sdCardPermission = context.checkCallingOrSelfPermission("android.permission.WRITE_EXTERNAL_STORAGE") == 0;
            String sdcard = Environment.getExternalStorageState();
            if (sdCardPermission && sdcard.equals("mounted")) {
                store_pictures = true;
            }
            if (VERSION.SDK_INT > 10) {
                inline_video = true;
            }
            JSONObject jsonObject = new JSONObject();
            jsonObject.put(IConstants.SMS, sms);
            jsonObject.put("tel", tel);
            jsonObject.put("calendar", calendar);
            jsonObject.put("storePictures", store_pictures);
            jsonObject.put("inlineVideo", inline_video);
            return jsonObject;
        } catch (Exception exception) {
            exception.printStackTrace();
            return null;
        }
    }

    public static float convertDpToPixel(float dp, Context context) throws Exception {
        return dp * (((float) context.getResources().getDisplayMetrics().densityDpi) / 160.0f);
    }

    public static float convertPixelsToDp(float px, Context context) throws Exception {
        return px / (((float) context.getResources().getDisplayMetrics().densityDpi) / 160.0f);
    }
}
