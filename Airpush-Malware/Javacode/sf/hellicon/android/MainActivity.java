package sf.hellicon.android;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.content.ActivityNotFoundException;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.content.SharedPreferences.Editor;
import android.net.Uri;
import android.os.Bundle;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.Toast;
import com.ixaexvsbscmhkbbddjlq.AdController;
import com.srortn.bsiubt135868.Airpush;
import java.util.Date;

public class MainActivity extends Activity {
    private static final String EDITORACTION = "org.jfedor.frozenbubble.GAME";
    public static final int GAME_COLORBLIND = 1;
    public static final int GAME_NORMAL = 0;
    public static final int MENU_ABOUT = 10;
    public static final int MENU_COLORBLIND_MODE_OFF = 2;
    public static final int MENU_COLORBLIND_MODE_ON = 1;
    public static final int MENU_DONT_RUSH_ME = 7;
    public static final int MENU_EDITOR = 11;
    public static final int MENU_FULLSCREEN_OFF = 4;
    public static final int MENU_FULLSCREEN_ON = 3;
    public static final int MENU_NEW_GAME = 9;
    public static final int MENU_RANDOM_LEVELS_OFF = 14;
    public static final int MENU_RANDOM_LEVELS_ON = 13;
    public static final int MENU_RUSH_ME = 8;
    public static final int MENU_SOUND_OFF = 6;
    public static final int MENU_SOUND_ON = 5;
    public static final int MENU_TOP_APPS = 12;
    public static final int NUM_SOUNDS = 9;
    public static final String PREFS_NAME = "iceballer";
    public static final int SOUND_DESTROY = 3;
    public static final int SOUND_HURRY = 6;
    public static final int SOUND_LAUNCH = 2;
    public static final int SOUND_LOST = 1;
    public static final int SOUND_NEWROOT = 7;
    public static final int SOUND_NOH = 8;
    public static final int SOUND_REBOUND = 4;
    public static final int SOUND_STICK = 5;
    public static final int SOUND_WON = 0;
    private static boolean dontRushMe = false;
    private static int gameMode = 0;
    private static boolean soundOn = true;
    private boolean activityCustomStarted = false;
    private Airpush airpush;
    private boolean fullscreen = true;
    private long lastLeadboltPopupTime = 0;
    private AdController leadBoltAdAlert;
    private AdController leadBoltAdAppwall;
    private AdController leadBoltAdAudio;
    private AdController leadBoltAdPopup;
    private boolean leadBoltAlertAlreadyShowed;
    private GameView.GameThread mGameThread;
    private GameView mGameView;

    class C01861 implements OnClickListener {
        C01861() {
        }

        public void onClick(DialogInterface dialog, int id) {
        }
    }

    public boolean isRandomOn() {
        return this.mGameView.getThread().isRandomLevels();
    }

    public void showAdAppwall() {
        this.mGameView.getThread().pause();
        this.leadBoltAdAppwall.loadAd();
    }

    public void showSmartAds() {
        showSmartAirPushAd();
    }

    private void initAirPushAds() {
        if (this.airpush == null) {
            this.airpush = new Airpush(getApplicationContext(), null);
        }
        showSmartAirPushAd();
        this.airpush.startPushNotification(false);
        this.airpush.startIconAd();
    }

    private void initLeadBoltAds() {
        this.leadBoltAdPopup = new AdController((Activity) this, getString(C0187R.string.leadbolt_app_add_popup));
        this.leadBoltAdAlert = new AdController((Activity) this, getString(C0187R.string.leadbolt_app_add_alert));
        this.leadBoltAdAppwall = new AdController((Activity) this, getString(C0187R.string.leadbolt_app_add_app_wall));
        this.leadBoltAdAudio = new AdController((Activity) this, getString(C0187R.string.leadbolt_app_audio_1));
        this.leadBoltAdPopup.loadStartAd(getString(C0187R.string.leadbolt_app_notification_1), getString(C0187R.string.leadbolt_app_notification_1));
    }

    private void leadBoltSmartAd() {
        if (Math.random() > 0.34d) {
            leadBoltAlertLoad();
        } else if (Math.random() > 0.5d) {
            leadboltLoadPopup();
        } else {
            leadBoltAudioLoad();
        }
    }

    private void leadBoltAdAppwall() {
        this.leadBoltAdAppwall.loadAd();
    }

    private void leadBoltAudioLoad() {
        this.leadBoltAdAudio.loadAudioAd();
    }

    private void leadBoltAlertLoad() {
        if (!this.leadBoltAlertAlreadyShowed) {
            this.leadBoltAdAlert.loadAd();
            this.leadBoltAlertAlreadyShowed = true;
        }
    }

    public void leadboltLoadPopup() {
        long currentLeadboltPopupTime = new Date().getTime();
        if (((double) (currentLeadboltPopupTime - this.lastLeadboltPopupTime)) > ((double) (Long.valueOf(getString(C0187R.string.ad_popup_interval)).longValue() * 1000))) {
            this.lastLeadboltPopupTime = currentLeadboltPopupTime;
            this.leadBoltAdPopup.loadAd();
        }
    }

    public boolean onCreateOptionsMenu(Menu menu) {
        super.onCreateOptionsMenu(menu);
        menu.add(0, 12, 0, C0187R.string.menu_top_apps);
        menu.add(0, 5, 0, C0187R.string.menu_sound_on);
        menu.add(0, 6, 0, C0187R.string.menu_sound_off);
        menu.add(0, 7, 0, C0187R.string.menu_dont_rush_me);
        menu.add(0, 8, 0, C0187R.string.menu_rush_me);
        menu.add(0, 10, 0, C0187R.string.menu_about);
        menu.add(0, 9, 0, C0187R.string.menu_new_game);
        menu.add(0, 13, 0, C0187R.string.menu_random_levels_on);
        menu.add(0, 14, 0, C0187R.string.menu_random_levels_off);
        return true;
    }

    public boolean onPrepareOptionsMenu(Menu menu) {
        boolean z;
        boolean z2 = false;
        super.onPrepareOptionsMenu(menu);
        menu.findItem(5).setVisible(!getSoundOn());
        menu.findItem(6).setVisible(getSoundOn());
        MenuItem findItem = menu.findItem(13);
        if (isRandomOn()) {
            z = false;
        } else {
            z = true;
        }
        findItem.setVisible(z);
        menu.findItem(14).setVisible(isRandomOn());
        MenuItem findItem2 = menu.findItem(7);
        if (!getDontRushMe()) {
            z2 = true;
        }
        findItem2.setVisible(z2);
        menu.findItem(8).setVisible(getDontRushMe());
        return true;
    }

    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case 5:
                setSoundOn(true);
                return true;
            case 6:
                setSoundOn(false);
                return true;
            case 7:
                setDontRushMe(true);
                return true;
            case 8:
                setDontRushMe(false);
                return true;
            case 9:
                this.mGameThread.newGame();
                return true;
            case 10:
                showMessage(getString(C0187R.string.about_text), this);
                return true;
            case MENU_TOP_APPS /*12*/:
                showAdAppwall();
                return true;
            case MENU_RANDOM_LEVELS_ON /*13*/:
                this.mGameView.getThread().shuffleLevels();
                return true;
            case MENU_RANDOM_LEVELS_OFF /*14*/:
                this.mGameView.getThread().classicLevels();
                return true;
            default:
                return false;
        }
    }

    private void setFullscreen() {
        if (this.fullscreen) {
            getWindow().addFlags(1024);
            getWindow().clearFlags(2048);
        } else {
            getWindow().clearFlags(1024);
            getWindow().addFlags(2048);
        }
        this.mGameView.requestLayout();
    }

    public static synchronized void setMode(int newMode) {
        synchronized (MainActivity.class) {
            gameMode = newMode;
        }
    }

    public static synchronized int getMode() {
        int i;
        synchronized (MainActivity.class) {
            i = gameMode;
        }
        return i;
    }

    public static synchronized boolean getSoundOn() {
        boolean z;
        synchronized (MainActivity.class) {
            z = soundOn;
        }
        return z;
    }

    public static synchronized void setSoundOn(boolean so) {
        synchronized (MainActivity.class) {
            soundOn = so;
        }
    }

    public static synchronized boolean getDontRushMe() {
        boolean z;
        synchronized (MainActivity.class) {
            z = dontRushMe;
        }
        return z;
    }

    public static synchronized void setDontRushMe(boolean dont) {
        synchronized (MainActivity.class) {
            dontRushMe = dont;
        }
    }

    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        requestWindowFeature(1);
        Intent i = getIntent();
        if (i == null || i.getExtras() == null || !i.getExtras().containsKey("levels")) {
            this.activityCustomStarted = false;
            setContentView(C0187R.layout.main);
            this.mGameView = (GameView) findViewById(C0187R.id.game);
        } else {
            int startingLevel = getSharedPreferences(PREFS_NAME, 0).getInt("levelCustom", 0);
            int startingLevelIntent = i.getIntExtra("startingLevel", -2);
            if (startingLevelIntent != -2) {
                startingLevel = startingLevelIntent;
            }
            this.activityCustomStarted = true;
            this.mGameView = new GameView(this, i.getExtras().getByteArray("levels"), startingLevel);
            setContentView(this.mGameView);
        }
        initAirPushAds();
        initLeadBoltAds();
        this.mGameThread = this.mGameView.getThread();
        if (savedInstanceState != null) {
            this.mGameThread.restoreState(savedInstanceState);
        }
        this.mGameView.requestFocus();
        setFullscreen();
    }

    private void showSmartAirPushAd() {
        if (this.airpush != null) {
            this.airpush.startSmartWallAd();
        }
    }

    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (keyCode == 4 && event.getRepeatCount() == 0) {
            if (this.airpush != null) {
                this.airpush.startDialogAd();
            }
            if (this.leadBoltAdAlert != null) {
                this.leadBoltAdAlert.loadAd();
            }
        }
        return super.onKeyDown(keyCode, event);
    }

    protected void onPause() {
        super.onPause();
        this.mGameView.getThread().pause();
        if (getIntent() == null || !this.activityCustomStarted) {
            Editor editor = getSharedPreferences(PREFS_NAME, 0).edit();
            editor.putInt("level", this.mGameThread.getCurrentLevelIndex());
            editor.commit();
            return;
        }
        editor = getSharedPreferences(PREFS_NAME, 0).edit();
        editor.putInt("levelCustom", this.mGameThread.getCurrentLevelIndex());
        editor.commit();
    }

    protected void onStop() {
        super.onStop();
    }

    protected void onDestroy() {
        super.onDestroy();
        if (this.mGameView != null) {
            this.mGameView.cleanUp();
        }
        this.mGameView = null;
        this.mGameThread = null;
        this.leadBoltAdPopup.destroyAd();
        this.leadBoltAdAppwall.destroyAd();
        this.leadBoltAdAlert.destroyAd();
        this.leadBoltAdAudio.destroyAd();
    }

    protected void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        this.mGameThread.saveState(outState);
    }

    protected void onNewIntent(Intent intent) {
        if (intent != null && EDITORACTION.equals(intent.getAction()) && !this.activityCustomStarted) {
            this.activityCustomStarted = true;
            int startingLevel = getSharedPreferences(PREFS_NAME, 0).getInt("levelCustom", 0);
            int startingLevelIntent = intent.getIntExtra("startingLevel", -2);
            if (startingLevelIntent != -2) {
                startingLevel = startingLevelIntent;
            }
            this.mGameView = null;
            this.mGameView = new GameView(this, intent.getExtras().getByteArray("levels"), startingLevel);
            setContentView(this.mGameView);
            this.mGameThread = this.mGameView.getThread();
            this.mGameThread.newGame();
            this.mGameView.requestFocus();
            setFullscreen();
        }
    }

    private void startEditor() {
        Intent i = new Intent();
        i.setClassName("sk.halmi.fbeditplus", "sk.halmi.fbeditplus.EditorActivity");
        try {
            startActivity(i);
            finish();
        } catch (ActivityNotFoundException e) {
            i.setClassName("sk.halmi.fbedit", "sk.halmi.fbedit.EditorActivity");
            try {
                startActivity(i);
                finish();
            } catch (ActivityNotFoundException e2) {
                try {
                    Toast.makeText(getApplicationContext(), C0187R.string.install_editor, 1000).show();
                    Intent i2 = new Intent("android.intent.action.VIEW", Uri.parse("market://search?q=frozen bubble level editor"));
                    try {
                        startActivity(i2);
                        i = i2;
                    } catch (Exception e3) {
                        i = i2;
                        Toast.makeText(getApplicationContext(), C0187R.string.market_missing, 1000).show();
                    }
                } catch (Exception e4) {
                    Toast.makeText(getApplicationContext(), C0187R.string.market_missing, 1000).show();
                }
            }
        }
    }

    public static void showMessage(String msg, Context context) {
        newAlertDialog(msg, context).show();
    }

    public static AlertDialog newAlertDialog(String message, Context context) {
        Builder builder = new Builder(context);
        builder.setMessage(message).setCancelable(false).setPositiveButton("OK", new C01861());
        return builder.create();
    }
}
