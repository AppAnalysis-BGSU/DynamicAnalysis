package sf.hellicon.android;

import android.os.Bundle;
import java.lang.reflect.Array;
import java.util.Vector;

public class LevelManager {
    private int currentLevel;
    private Vector levelList;
    private boolean randomLevels = false;

    public void setCurrentLevel(int currentLevel) {
        this.currentLevel = currentLevel;
    }

    public boolean isRandomLevels() {
        return this.randomLevels;
    }

    public void setRandomLevels(boolean randomLevels) {
        this.randomLevels = randomLevels;
    }

    public void saveState(Bundle map) {
        map.putInt("LevelManager-currentLevel", this.currentLevel);
    }

    public void restoreState(Bundle map) {
        this.currentLevel = map.getInt("LevelManager-currentLevel");
    }

    public LevelManager(byte[] levels, int startingLevel) {
        String allLevels = new String(levels);
        this.currentLevel = startingLevel;
        this.levelList = new Vector();
        int nextLevel = allLevels.indexOf("\n\n");
        if (nextLevel == -1 && allLevels.trim().length() != 0) {
            nextLevel = allLevels.length();
        }
        while (nextLevel != -1) {
            this.levelList.addElement(getLevel(allLevels.substring(0, nextLevel).trim()));
            allLevels = allLevels.substring(nextLevel).trim();
            if (allLevels.length() == 0) {
                nextLevel = -1;
            } else {
                nextLevel = allLevels.indexOf("\n\n");
                if (nextLevel == -1) {
                    nextLevel = allLevels.length();
                }
            }
        }
        if (this.currentLevel >= this.levelList.size()) {
            this.currentLevel = 0;
        }
    }

    private byte[][] getLevel(String data) {
        int i;
        byte[][] temp = (byte[][]) Array.newInstance(Byte.TYPE, new int[]{8, 12});
        for (int j = 0; j < 12; j++) {
            for (i = 0; i < 8; i++) {
                temp[i][j] = (byte) -1;
            }
        }
        int tempX = 0;
        int tempY = 0;
        i = 0;
        while (i < data.length()) {
            if (data.charAt(i) >= '0' && data.charAt(i) <= '7') {
                temp[tempX][tempY] = (byte) (data.charAt(i) - 48);
                tempX++;
            } else if (data.charAt(i) == '-') {
                temp[tempX][tempY] = (byte) -1;
                tempX++;
            }
            if (tempX == 8) {
                tempY++;
                if (tempY == 12) {
                    break;
                }
                tempX = tempY % 2;
            }
            i++;
        }
        return temp;
    }

    public byte[][] getCurrentLevel() {
        if (this.currentLevel < this.levelList.size()) {
            return (byte[][]) this.levelList.elementAt(this.currentLevel);
        }
        return null;
    }

    public void goToNextLevel() {
        if (isRandomLevels()) {
            this.currentLevel = getRandomLevel();
        } else {
            this.currentLevel++;
        }
        if (this.currentLevel >= this.levelList.size()) {
            this.currentLevel = 0;
        }
    }

    public int getRandomLevel() {
        int level = (int) (Math.random() * ((double) this.levelList.size()));
        if (level >= this.levelList.size()) {
            return 0;
        }
        return level;
    }

    public void goToFirstLevel() {
        this.currentLevel = 0;
    }

    public int getLevelIndex() {
        return this.currentLevel;
    }
}
