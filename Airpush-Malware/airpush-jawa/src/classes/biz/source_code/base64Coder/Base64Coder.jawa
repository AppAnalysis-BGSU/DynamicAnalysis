record `biz.source_code.base64Coder.Base64Coder` @kind class @AccessFlag PUBLIC {
}
global `char`[] `@@biz.source_code.base64Coder.Base64Coder.map1` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@biz.source_code.base64Coder.Base64Coder.map2` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@biz.source_code.base64Coder.Base64Coder.systemLineSeparator` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `biz.source_code.base64Coder.Base64Coder.<clinit>`() @owner ^`biz.source_code.base64Coder.Base64Coder` @signature `Lbiz/source_code/base64Coder/Base64Coder;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    `int` int_v5;
    `int` int_v2;
    `char` char_v2;
    `byte`[] byte_arr1_v0;
    `char`[] char_arr1_v4;
    `byte` byte_v3;
    `char`[] char_arr1_v0;
    `int` int_v0;
    `int` int_v3;
    `byte`[] byte_arr1_v2;
    `char` char_v4;
    `java.lang.String` String_v0;
    `int` int_v1;
    `java.lang.String` String_temp;
    `char`[] char_arr1_v2;
    `char` char_v0;

    #L030878.  int_v5:= 64I;
    #L03087c.  int_v1:= 0I;
    #L03087e.  String_v0:= "line.separator" @kind object;
    #L030882.  call String_temp:=  `java.lang.System.getProperty`(String_v0) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @classDescriptor ^`java.lang.System` @kind static;
    #L030888.  String_v0:= String_temp  @kind object;
    #L03088a.  `@@biz.source_code.base64Coder.Base64Coder.systemLineSeparator`:= String_v0  @kind object @type ^`java.lang.String`;
    #L03088e.  char_arr1_v0:= new `char`[int_v5];
    #L030892.  `@@biz.source_code.base64Coder.Base64Coder.map1`:= char_arr1_v0  @kind object @type ^`char`[];
    #L030896.  char_v0:= 65I;
    #L03089a.  int_v2:= int_v1;
    #L03089c.  int_v3:= 90I;
    #L0308a0.  if char_v0 > int_v3 then goto L0308ba;
    #L0308a4.  char_arr1_v4:= `@@biz.source_code.base64Coder.Base64Coder.map1`  @kind object @type ^`char`[];
    #L0308a8.  int_v3:= int_v2 + 1;
    #L0308ac.  char_arr1_v4[int_v2]:= char_v0  @kind char;
    #L0308b0.  int_v0:= char_v0 + 1;
    #L0308b4.  char_v0:= (`char`)int_v0  @kind i2c;
    #L0308b6.  int_v2:= int_v3;
    #L0308b8.  goto L03089c;
    #L0308ba.  char_v0:= 97I;
    #L0308be.  int_v3:= 122I;
    #L0308c2.  if char_v0 > int_v3 then goto L0308dc;
    #L0308c6.  char_arr1_v4:= `@@biz.source_code.base64Coder.Base64Coder.map1`  @kind object @type ^`char`[];
    #L0308ca.  int_v3:= int_v2 + 1;
    #L0308ce.  char_arr1_v4[int_v2]:= char_v0  @kind char;
    #L0308d2.  int_v0:= char_v0 + 1;
    #L0308d6.  char_v0:= (`char`)int_v0  @kind i2c;
    #L0308d8.  int_v2:= int_v3;
    #L0308da.  goto L0308be;
    #L0308dc.  char_v0:= 48I;
    #L0308e0.  int_v3:= 57I;
    #L0308e4.  if char_v0 > int_v3 then goto L0308fe;
    #L0308e8.  char_arr1_v4:= `@@biz.source_code.base64Coder.Base64Coder.map1`  @kind object @type ^`char`[];
    #L0308ec.  int_v3:= int_v2 + 1;
    #L0308f0.  char_arr1_v4[int_v2]:= char_v0  @kind char;
    #L0308f4.  int_v0:= char_v0 + 1;
    #L0308f8.  char_v0:= (`char`)int_v0  @kind i2c;
    #L0308fa.  int_v2:= int_v3;
    #L0308fc.  goto L0308e0;
    #L0308fe.  char_arr1_v0:= `@@biz.source_code.base64Coder.Base64Coder.map1`  @kind object @type ^`char`[];
    #L030902.  int_v3:= int_v2 + 1;
    #L030906.  char_v4:= 43I;
    #L03090a.  char_arr1_v0[int_v2]:= char_v4  @kind char;
    #L03090e.  char_arr1_v0:= `@@biz.source_code.base64Coder.Base64Coder.map1`  @kind object @type ^`char`[];
    #L030912.  int_v2:= int_v3 + 1;
    #L030916.  char_v2:= 47I;
    #L03091a.  char_arr1_v0[int_v3]:= char_v2  @kind char;
    #L03091e.  int_v0:= 128I;
    #L030922.  byte_arr1_v0:= new `byte`[int_v0];
    #L030926.  `@@biz.source_code.base64Coder.Base64Coder.map2`:= byte_arr1_v0  @kind object @type ^`byte`[];
    #L03092a.  int_v0:= int_v1;
    #L03092c.  byte_arr1_v2:= `@@biz.source_code.base64Coder.Base64Coder.map2`  @kind object @type ^`byte`[];
    #L030930.  int_v2:= length @variable byte_arr1_v2;
    #L030932.  if int_v0 >= int_v2 then goto L030946;
    #L030936.  byte_arr1_v2:= `@@biz.source_code.base64Coder.Base64Coder.map2`  @kind object @type ^`byte`[];
    #L03093a.  byte_v3:= -1I;
    #L03093c.  byte_arr1_v2[int_v0]:= byte_v3  @kind byte;
    #L030940.  int_v0:= int_v0 + 1;
    #L030944.  goto L03092c;
    #L030946.  if int_v1 >= int_v5 then goto L030962;
    #L03094a.  byte_arr1_v0:= `@@biz.source_code.base64Coder.Base64Coder.map2`  @kind object @type ^`byte`[];
    #L03094e.  char_arr1_v2:= `@@biz.source_code.base64Coder.Base64Coder.map1`  @kind object @type ^`char`[];
    #L030952.  int_v2:= char_arr1_v2[int_v1]  @kind char;
    #L030956.  byte_v3:= (`byte`)int_v1  @kind i2b;
    #L030958.  byte_arr1_v0[int_v2]:= byte_v3  @kind byte;
    #L03095c.  int_v1:= int_v1 + 1;
    #L030960.  goto L030946;
    #L030962.  return  @kind void;
}
procedure `void` `biz.source_code.base64Coder.Base64Coder.<init>`(`biz.source_code.base64Coder.Base64Coder` `this` @kind this) @owner ^`biz.source_code.base64Coder.Base64Coder` @signature `Lbiz/source_code/base64Coder/Base64Coder;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {

    #L030974.  call `java.lang.Object.<init>`(`this`) @signature `Ljava/lang/Object;.<init>:()V` @classDescriptor ^`java.lang.Object` @kind direct;
    #L03097a.  return  @kind void;
}
procedure `byte`[] `biz.source_code.base64Coder.Base64Coder.decode`(`java.lang.String` String_v1 @kind object) @owner ^`biz.source_code.base64Coder.Base64Coder` @signature `Lbiz/source_code/base64Coder/Base64Coder;.decode:(Ljava/lang/String;)[B` @AccessFlag PUBLIC_STATIC {
    `byte`[] byte_arr1_temp;
    `byte`[] byte_arr1_v0;
    `char`[] char_arr1_v0;
    `char`[] char_arr1_temp;

    #L03098c.  call char_arr1_temp:=  `java.lang.String.toCharArray`(String_v1) @signature `Ljava/lang/String;.toCharArray:()[C` @classDescriptor ^`java.lang.String` @kind virtual;
    #L030992.  char_arr1_v0:= char_arr1_temp  @kind object;
    #L030994.  call byte_arr1_temp:=  `biz.source_code.base64Coder.Base64Coder.decode`(char_arr1_v0) @signature `Lbiz/source_code/base64Coder/Base64Coder;.decode:([C)[B` @classDescriptor ^`biz.source_code.base64Coder.Base64Coder` @kind static;
    #L03099a.  byte_arr1_v0:= byte_arr1_temp  @kind object;
    #L03099c.  return byte_arr1_v0  @kind object;
}
procedure `byte`[] `biz.source_code.base64Coder.Base64Coder.decode`(`char`[] char_arr1_v2 @kind object) @owner ^`biz.source_code.base64Coder.Base64Coder` @signature `Lbiz/source_code/base64Coder/Base64Coder;.decode:([C)[B` @AccessFlag PUBLIC_STATIC {
    `byte`[] byte_arr1_temp;
    `byte`[] byte_arr1_v0;
    `int` int_v0;
    `int` int_v1;

    #L0309b0.  int_v0:= 0I;
    #L0309b2.  int_v1:= length @variable char_arr1_v2;
    #L0309b4.  call byte_arr1_temp:=  `biz.source_code.base64Coder.Base64Coder.decode`(char_arr1_v2, int_v0, int_v1) @signature `Lbiz/source_code/base64Coder/Base64Coder;.decode:([CII)[B` @classDescriptor ^`biz.source_code.base64Coder.Base64Coder` @kind static;
    #L0309ba.  byte_arr1_v0:= byte_arr1_temp  @kind object;
    #L0309bc.  return byte_arr1_v0  @kind object;
}
procedure `byte`[] `biz.source_code.base64Coder.Base64Coder.decode`(`char`[] char_arr1_v12 @kind object, `int` int_v13 , `int` int_v14 ) @owner ^`biz.source_code.base64Coder.Base64Coder` @signature `Lbiz/source_code/base64Coder/Base64Coder;.decode:([CII)[B` @AccessFlag PUBLIC_STATIC {
    `byte`[] byte_arr1_v1;
    `int` int_v5;
    `int` int_v2;
    `int` int_v8;
    `java.lang.IllegalArgumentException` IllegalArgumentException_v0;
    `byte`[] byte_arr1_v10;
    `byte` byte_v5;
    `int` int_v6;
    `byte` byte_v9;
    `byte`[] byte_arr1_v9;
    `int` int_v0;
    `int` int_v3;
    `int` int_v4;
    `byte` byte_v0;
    `int` int_v11;
    `char` char_v4;
    `int` int_v1;
    `int` int_v9;
    `int` int_v10;
    `char` char_v0;
    `java.lang.String` String_v1;
    `byte` byte_v1;
    `byte`[] byte_arr1_v7;
    `byte` byte_v4;

    #L0309d0.  int_v2:= 65I;
    #L0309d4.  int_v11:= 127I;
    #L0309d8.  int_v0:= int_v14 %% 4;
    #L0309dc.  if int_v0 == 0 then goto L0309f0;
    #L0309e0.  IllegalArgumentException_v0:= new `java.lang.IllegalArgumentException`;
    #L0309e4.  String_v1:= "Length of Base64 encoded input string is not a multiple of 4." @kind object;
    #L0309e8.  call `java.lang.IllegalArgumentException.<init>`(IllegalArgumentException_v0, String_v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @classDescriptor ^`java.lang.IllegalArgumentException` @kind direct;
    #L0309ee.  throw IllegalArgumentException_v0;
    #L0309f0.  if int_v14 <= 0 then goto L030a0e;
    #L0309f4.  int_v0:= int_v13 + int_v14  @kind int;
    #L0309f8.  int_v0:= int_v0 + -1;
    #L0309fc.  char_v0:= char_arr1_v12[int_v0]  @kind char;
    #L030a00.  int_v1:= 61I;
    #L030a04.  if char_v0 != int_v1 then goto L030a0e;
    #L030a08.  int_v14:= int_v14 + -1;
    #L030a0c.  goto L0309f0;
    #L030a0e.  int_v0:= int_v14 * 3;
    #L030a12.  int_v6:= int_v0 / 4;
    #L030a16.  byte_arr1_v7:= new `byte`[int_v6];
    #L030a1a.  int_v8:= int_v13 + int_v14  @kind int;
    #L030a1e.  int_v0:= 0I;
    #L030a20.  int_v5:= int_v0;
    #L030a22.  if int_v13 >= int_v8 then goto L030b0c;
    #L030a26.  int_v1:= int_v13 + 1;
    #L030a2a.  int_v9:= char_arr1_v12[int_v13]  @kind char;
    #L030a2e.  int_v0:= int_v1 + 1;
    #L030a32.  int_v10:= char_arr1_v12[int_v1]  @kind char;
    #L030a36.  if int_v0 >= int_v8 then goto L030a74;
    #L030a3a.  int_v1:= int_v0 + 1;
    #L030a3e.  char_v0:= char_arr1_v12[int_v0]  @kind char;
    #L030a42.  char_v4:= char_v0;
    #L030a44.  int_v0:= int_v1;
    #L030a46.  if int_v0 >= int_v8 then goto L030a78;
    #L030a4a.  int_v1:= int_v0 + 1;
    #L030a4e.  char_v0:= char_arr1_v12[int_v0]  @kind char;
    #L030a52.  int_v3:= int_v1;
    #L030a54.  if int_v9 > int_v11 then goto L030a64;
    #L030a58.  if int_v10 > int_v11 then goto L030a64;
    #L030a5c.  if int_v4 > int_v11 then goto L030a64;
    #L030a60.  if int_v0 <= int_v11 then goto L030a7e;
    #L030a64.  IllegalArgumentException_v0:= new `java.lang.IllegalArgumentException`;
    #L030a68.  String_v1:= "Illegal character in Base64 encoded data." @kind object;
    #L030a6c.  call `java.lang.IllegalArgumentException.<init>`(IllegalArgumentException_v0, String_v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @classDescriptor ^`java.lang.IllegalArgumentException` @kind direct;
    #L030a72.  throw IllegalArgumentException_v0;
    #L030a74.  int_v4:= int_v2;
    #L030a76.  goto L030a46;
    #L030a78.  int_v3:= int_v0;
    #L030a7a.  int_v0:= int_v2;
    #L030a7c.  goto L030a54;
    #L030a7e.  byte_arr1_v1:= `@@biz.source_code.base64Coder.Base64Coder.map2`  @kind object @type ^`byte`[];
    #L030a82.  byte_v1:= byte_arr1_v1[int_v9]  @kind byte;
    #L030a86.  byte_arr1_v9:= `@@biz.source_code.base64Coder.Base64Coder.map2`  @kind object @type ^`byte`[];
    #L030a8a.  byte_v9:= byte_arr1_v9[int_v10]  @kind byte;
    #L030a8e.  byte_arr1_v10:= `@@biz.source_code.base64Coder.Base64Coder.map2`  @kind object @type ^`byte`[];
    #L030a92.  byte_v4:= byte_arr1_v10[int_v4]  @kind byte;
    #L030a96.  byte_arr1_v10:= `@@biz.source_code.base64Coder.Base64Coder.map2`  @kind object @type ^`byte`[];
    #L030a9a.  byte_v0:= byte_arr1_v10[int_v0]  @kind byte;
    #L030a9e.  if byte_v1 < 0 then goto L030aae;
    #L030aa2.  if byte_v9 < 0 then goto L030aae;
    #L030aa6.  if byte_v4 < 0 then goto L030aae;
    #L030aaa.  if byte_v0 >= 0 then goto L030abe;
    #L030aae.  IllegalArgumentException_v0:= new `java.lang.IllegalArgumentException`;
    #L030ab2.  String_v1:= "Illegal character in Base64 encoded data." @kind object;
    #L030ab6.  call `java.lang.IllegalArgumentException.<init>`(IllegalArgumentException_v0, String_v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @classDescriptor ^`java.lang.IllegalArgumentException` @kind direct;
    #L030abc.  throw IllegalArgumentException_v0;
    #L030abe.  int_v1:= byte_v1 ^< 2;
    #L030ac2.  int_v10:= byte_v9 ^>> 4;
    #L030ac6.  int_v1:= int_v1 ^| int_v10  @kind int;
    #L030ac8.  int_v9:= byte_v9 ^& 15;
    #L030acc.  int_v9:= int_v9 ^< 4;
    #L030ad0.  int_v10:= byte_v4 ^>> 2;
    #L030ad4.  int_v9:= int_v9 ^| int_v10  @kind int;
    #L030ad6.  int_v4:= byte_v4 ^& 3;
    #L030ada.  int_v4:= int_v4 ^< 6;
    #L030ade.  int_v4:= int_v4 ^| byte_v0  @kind int;
    #L030ae0.  int_v0:= int_v5 + 1;
    #L030ae4.  byte_v1:= (`byte`)int_v1  @kind i2b;
    #L030ae6.  byte_arr1_v7[int_v5]:= byte_v1  @kind byte;
    #L030aea.  if int_v0 >= int_v6 then goto L030b12;
    #L030aee.  int_v1:= int_v0 + 1;
    #L030af2.  byte_v5:= (`byte`)int_v9  @kind i2b;
    #L030af4.  byte_arr1_v7[int_v0]:= byte_v5  @kind byte;
    #L030af8.  if int_v1 >= int_v6 then goto L030b0e;
    #L030afc.  int_v0:= int_v1 + 1;
    #L030b00.  byte_v4:= (`byte`)int_v4  @kind i2b;
    #L030b02.  byte_arr1_v7[int_v1]:= byte_v4  @kind byte;
    #L030b06.  int_v5:= int_v0;
    #L030b08.  int_v13:= int_v3;
    #L030b0a.  goto L030a22;
    #L030b0c.  return byte_arr1_v7  @kind object;
    #L030b0e.  int_v0:= int_v1;
    #L030b10.  goto L030b06;
    #L030b12.  int_v1:= int_v0;
    #L030b14.  goto L030af8;
}
procedure `byte`[] `biz.source_code.base64Coder.Base64Coder.decodeLines`(`java.lang.String` String_v6 @kind object) @owner ^`biz.source_code.base64Coder.Base64Coder` @signature `Lbiz/source_code/base64Coder/Base64Coder;.decodeLines:(Ljava/lang/String;)[B` @AccessFlag PUBLIC_STATIC {
    `int` int_v2;
    `byte`[] byte_arr1_temp;
    `byte`[] byte_arr1_v0;
    `char`[] char_arr1_v4;
    `char` char_temp;
    `int` int_v0;
    `char` char_v5;
    `int` int_v3;
    `int` int_temp;
    `int` int_v1;

    #L030b28.  int_v1:= 0I;
    #L030b2a.  call int_temp:=  `java.lang.String.length`(String_v6) @signature `Ljava/lang/String;.length:()I` @classDescriptor ^`java.lang.String` @kind virtual;
    #L030b30.  int_v0:= int_temp;
    #L030b32.  char_arr1_v4:= new `char`[int_v0];
    #L030b36.  int_v0:= int_v1;
    #L030b38.  int_v2:= int_v1;
    #L030b3a.  call int_temp:=  `java.lang.String.length`(String_v6) @signature `Ljava/lang/String;.length:()I` @classDescriptor ^`java.lang.String` @kind virtual;
    #L030b40.  int_v3:= int_temp;
    #L030b42.  if int_v0 >= int_v3 then goto L030b7e;
    #L030b46.  call char_temp:=  `java.lang.String.charAt`(String_v6, int_v0) @signature `Ljava/lang/String;.charAt:(I)C` @classDescriptor ^`java.lang.String` @kind virtual;
    #L030b4c.  char_v5:= char_temp;
    #L030b4e.  int_v3:= 32I;
    #L030b52.  if char_v5 == int_v3 then goto L030b78;
    #L030b56.  int_v3:= 13I;
    #L030b5a.  if char_v5 == int_v3 then goto L030b78;
    #L030b5e.  int_v3:= 10I;
    #L030b62.  if char_v5 == int_v3 then goto L030b78;
    #L030b66.  int_v3:= 9I;
    #L030b6a.  if char_v5 == int_v3 then goto L030b78;
    #L030b6e.  int_v3:= int_v2 + 1;
    #L030b72.  char_arr1_v4[int_v2]:= char_v5  @kind char;
    #L030b76.  int_v2:= int_v3;
    #L030b78.  int_v0:= int_v0 + 1;
    #L030b7c.  goto L030b3a;
    #L030b7e.  call byte_arr1_temp:=  `biz.source_code.base64Coder.Base64Coder.decode`(char_arr1_v4, int_v1, int_v2) @signature `Lbiz/source_code/base64Coder/Base64Coder;.decode:([CII)[B` @classDescriptor ^`biz.source_code.base64Coder.Base64Coder` @kind static;
    #L030b84.  byte_arr1_v0:= byte_arr1_temp  @kind object;
    #L030b86.  return byte_arr1_v0  @kind object;
}
procedure `java.lang.String` `biz.source_code.base64Coder.Base64Coder.decodeString`(`java.lang.String` String_v2 @kind object) @owner ^`biz.source_code.base64Coder.Base64Coder` @signature `Lbiz/source_code/base64Coder/Base64Coder;.decodeString:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    `java.lang.String` String_v0;
    `byte`[] byte_arr1_temp;
    `byte`[] byte_arr1_v1;

    #L030b98.  String_v0:= new `java.lang.String`;
    #L030b9c.  call byte_arr1_temp:=  `biz.source_code.base64Coder.Base64Coder.decode`(String_v2) @signature `Lbiz/source_code/base64Coder/Base64Coder;.decode:(Ljava/lang/String;)[B` @classDescriptor ^`biz.source_code.base64Coder.Base64Coder` @kind static;
    #L030ba2.  byte_arr1_v1:= byte_arr1_temp  @kind object;
    #L030ba4.  call `java.lang.String.<init>`(String_v0, byte_arr1_v1) @signature `Ljava/lang/String;.<init>:([B)V` @classDescriptor ^`java.lang.String` @kind direct;
    #L030baa.  return String_v0  @kind object;
}
procedure `char`[] `biz.source_code.base64Coder.Base64Coder.encode`(`byte`[] byte_arr1_v2 @kind object) @owner ^`biz.source_code.base64Coder.Base64Coder` @signature `Lbiz/source_code/base64Coder/Base64Coder;.encode:([B)[C` @AccessFlag PUBLIC_STATIC {
    `char`[] char_arr1_v0;
    `int` int_v0;
    `char`[] char_arr1_temp;
    `int` int_v1;

    #L030bbc.  int_v0:= 0I;
    #L030bbe.  int_v1:= length @variable byte_arr1_v2;
    #L030bc0.  call char_arr1_temp:=  `biz.source_code.base64Coder.Base64Coder.encode`(byte_arr1_v2, int_v0, int_v1) @signature `Lbiz/source_code/base64Coder/Base64Coder;.encode:([BII)[C` @classDescriptor ^`biz.source_code.base64Coder.Base64Coder` @kind static;
    #L030bc6.  char_arr1_v0:= char_arr1_temp  @kind object;
    #L030bc8.  return char_arr1_v0  @kind object;
}
procedure `char`[] `biz.source_code.base64Coder.Base64Coder.encode`(`byte`[] byte_arr1_v1 @kind object, `int` int_v2 ) @owner ^`biz.source_code.base64Coder.Base64Coder` @signature `Lbiz/source_code/base64Coder/Base64Coder;.encode:([BI)[C` @AccessFlag PUBLIC_STATIC {
    `char`[] char_arr1_v0;
    `int` int_v0;
    `char`[] char_arr1_temp;

    #L030bdc.  int_v0:= 0I;
    #L030bde.  call char_arr1_temp:=  `biz.source_code.base64Coder.Base64Coder.encode`(byte_arr1_v1, int_v0, int_v2) @signature `Lbiz/source_code/base64Coder/Base64Coder;.encode:([BII)[C` @classDescriptor ^`biz.source_code.base64Coder.Base64Coder` @kind static;
    #L030be4.  char_arr1_v0:= char_arr1_temp  @kind object;
    #L030be6.  return char_arr1_v0  @kind object;
}
procedure `char`[] `biz.source_code.base64Coder.Base64Coder.encode`(`byte`[] byte_arr1_v13 @kind object, `int` int_v14 , `int` int_v15 ) @owner ^`biz.source_code.base64Coder.Base64Coder` @signature `Lbiz/source_code/base64Coder/Base64Coder;.encode:([BII)[C` @AccessFlag PUBLIC_STATIC {
    `char`[] char_arr1_v7;
    `char` char_v9;
    `char`[] char_arr1_v10;
    `int` int_v5;
    `int` int_v2;
    `int` int_v8;
    `char` char_v10;
    `int` int_v6;
    `byte` byte_v2;
    `char`[] char_arr1_v12;
    `char`[] char_arr1_v0;
    `int` int_v0;
    `int` int_v3;
    `int` int_v4;
    `byte` byte_v0;
    `int` int_v11;
    `int` int_v1;
    `int` int_v9;
    `int` int_v10;
    `char` char_v0;

    #L030bf8.  int_v3:= 61I;
    #L030bfc.  int_v1:= 0I;
    #L030bfe.  int_v0:= int_v15 * 4;
    #L030c02.  int_v0:= int_v0 + 2;
    #L030c06.  int_v6:= int_v0 / 3;
    #L030c0a.  int_v0:= int_v15 + 2;
    #L030c0e.  int_v0:= int_v0 / 3;
    #L030c12.  int_v0:= int_v0 * 4;
    #L030c16.  char_arr1_v7:= new `char`[int_v0];
    #L030c1a.  int_v8:= int_v14 + int_v15  @kind int;
    #L030c1e.  int_v5:= int_v1;
    #L030c20.  if int_v14 >= int_v8 then goto L030cd8;
    #L030c24.  int_v0:= int_v14 + 1;
    #L030c28.  byte_v2:= byte_arr1_v13[int_v14]  @kind byte;
    #L030c2c.  int_v9:= byte_v2 ^& 255;
    #L030c30.  if int_v0 >= int_v8 then goto L030cc6;
    #L030c34.  int_v2:= int_v0 + 1;
    #L030c38.  byte_v0:= byte_arr1_v13[int_v0]  @kind byte;
    #L030c3c.  int_v0:= byte_v0 ^& 255;
    #L030c40.  int_v4:= int_v0;
    #L030c42.  int_v0:= int_v2;
    #L030c44.  if int_v0 >= int_v8 then goto L030cca;
    #L030c48.  int_v2:= int_v0 + 1;
    #L030c4c.  byte_v0:= byte_arr1_v13[int_v0]  @kind byte;
    #L030c50.  int_v0:= byte_v0 ^& 255;
    #L030c54.  int_v10:= int_v9 ^>> 2;
    #L030c58.  int_v9:= int_v9 ^& 3;
    #L030c5c.  int_v9:= int_v9 ^< 4;
    #L030c60.  int_v11:= int_v4 ^>> 4;
    #L030c64.  int_v9:= int_v9 ^| int_v11  @kind int;
    #L030c66.  int_v4:= int_v4 ^& 15;
    #L030c6a.  int_v4:= int_v4 ^< 2;
    #L030c6e.  int_v11:= int_v0 ^>> 6;
    #L030c72.  int_v4:= int_v4 ^| int_v11  @kind int;
    #L030c74.  int_v11:= int_v0 ^& 63;
    #L030c78.  int_v0:= int_v5 + 1;
    #L030c7c.  char_arr1_v12:= `@@biz.source_code.base64Coder.Base64Coder.map1`  @kind object @type ^`char`[];
    #L030c80.  char_v10:= char_arr1_v12[int_v10]  @kind char;
    #L030c84.  char_arr1_v7[int_v5]:= char_v10  @kind char;
    #L030c88.  int_v5:= int_v0 + 1;
    #L030c8c.  char_arr1_v10:= `@@biz.source_code.base64Coder.Base64Coder.map1`  @kind object @type ^`char`[];
    #L030c90.  char_v9:= char_arr1_v10[int_v9]  @kind char;
    #L030c94.  char_arr1_v7[int_v0]:= char_v9  @kind char;
    #L030c98.  if int_v5 >= int_v6 then goto L030cd0;
    #L030c9c.  char_arr1_v0:= `@@biz.source_code.base64Coder.Base64Coder.map1`  @kind object @type ^`char`[];
    #L030ca0.  char_v0:= char_arr1_v0[int_v4]  @kind char;
    #L030ca4.  char_arr1_v7[int_v5]:= char_v0  @kind char;
    #L030ca8.  int_v4:= int_v5 + 1;
    #L030cac.  if int_v4 >= int_v6 then goto L030cd4;
    #L030cb0.  char_arr1_v0:= `@@biz.source_code.base64Coder.Base64Coder.map1`  @kind object @type ^`char`[];
    #L030cb4.  char_v0:= char_arr1_v0[int_v11]  @kind char;
    #L030cb8.  char_arr1_v7[int_v4]:= char_v0  @kind char;
    #L030cbc.  int_v0:= int_v4 + 1;
    #L030cc0.  int_v5:= int_v0;
    #L030cc2.  int_v14:= int_v2;
    #L030cc4.  goto L030c20;
    #L030cc6.  int_v4:= int_v1;
    #L030cc8.  goto L030c44;
    #L030cca.  int_v2:= int_v0;
    #L030ccc.  int_v0:= int_v1;
    #L030cce.  goto L030c54;
    #L030cd0.  int_v0:= int_v3;
    #L030cd2.  goto L030ca4;
    #L030cd4.  int_v0:= int_v3;
    #L030cd6.  goto L030cb8;
    #L030cd8.  return char_arr1_v7  @kind object;
}
procedure `java.lang.String` `biz.source_code.base64Coder.Base64Coder.encodeLines`(`byte`[] byte_arr1_v4 @kind object) @owner ^`biz.source_code.base64Coder.Base64Coder` @signature `Lbiz/source_code/base64Coder/Base64Coder;.encodeLines:([B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    `java.lang.String` String_v3;
    `int` int_v2;
    `int` int_v0;
    `java.lang.String` String_v0;
    `int` int_v1;
    `java.lang.String` String_temp;

    #L030cec.  int_v0:= 0I;
    #L030cee.  int_v1:= length @variable byte_arr1_v4;
    #L030cf0.  int_v2:= 76I;
    #L030cf4.  String_v3:= `@@biz.source_code.base64Coder.Base64Coder.systemLineSeparator`  @kind object @type ^`java.lang.String`;
    #L030cf8.  call String_temp:=  `biz.source_code.base64Coder.Base64Coder.encodeLines`(byte_arr1_v4, int_v0, int_v1, int_v2, String_v3) @signature `Lbiz/source_code/base64Coder/Base64Coder;.encodeLines:([BIIILjava/lang/String;)Ljava/lang/String;` @classDescriptor ^`biz.source_code.base64Coder.Base64Coder` @kind static;
    #L030cfe.  String_v0:= String_temp  @kind object;
    #L030d00.  return String_v0  @kind object;
}
procedure `java.lang.String` `biz.source_code.base64Coder.Base64Coder.encodeLines`(`byte`[] byte_arr1_v5 @kind object, `int` int_v6 , `int` int_v7 , `int` int_v8 , `java.lang.String` String_v9 @kind object) @owner ^`biz.source_code.base64Coder.Base64Coder` @signature `Lbiz/source_code/base64Coder/Base64Coder;.encodeLines:([BIIILjava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    `int` int_v2;
    `java.lang.StringBuilder` StringBuilder_v2;
    `java.lang.IllegalArgumentException` IllegalArgumentException_v0;
    `char`[] char_arr1_v4;
    `int` int_v0;
    `int` int_v3;
    `int` int_v4;
    `int` int_temp;
    `java.lang.StringBuilder` StringBuilder_temp;
    `char`[] char_arr1_temp;
    `java.lang.String` String_v0;
    `int` int_v1;
    `java.lang.String` String_temp;

    #L030d14.  int_v0:= int_v8 * 3;
    #L030d18.  int_v1:= int_v0 / 4;
    #L030d1c.  if int_v1 > 0 then goto L030d2c;
    #L030d20.  IllegalArgumentException_v0:= new `java.lang.IllegalArgumentException`;
    #L030d24.  call `java.lang.IllegalArgumentException.<init>`(IllegalArgumentException_v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @classDescriptor ^`java.lang.IllegalArgumentException` @kind direct;
    #L030d2a.  throw IllegalArgumentException_v0;
    #L030d2c.  int_v0:= int_v7 + int_v1  @kind int;
    #L030d30.  int_v0:= int_v0 + -1;
    #L030d34.  int_v0:= int_v0 / int_v1  @kind int;
    #L030d36.  int_v2:= int_v7 + 2;
    #L030d3a.  int_v2:= int_v2 / 3;
    #L030d3e.  int_v2:= int_v2 * 4;
    #L030d42.  call int_temp:=  `java.lang.String.length`(String_v9) @signature `Ljava/lang/String;.length:()I` @classDescriptor ^`java.lang.String` @kind virtual;
    #L030d48.  int_v3:= int_temp;
    #L030d4a.  int_v0:= int_v0 * int_v3  @kind int;
    #L030d4c.  int_v0:= int_v0 + int_v2  @kind int;
    #L030d4e.  StringBuilder_v2:= new `java.lang.StringBuilder`;
    #L030d52.  call `java.lang.StringBuilder.<init>`(StringBuilder_v2, int_v0) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @classDescriptor ^`java.lang.StringBuilder` @kind direct;
    #L030d58.  int_v0:= 0I;
    #L030d5a.  if int_v0 >= int_v7 then goto L030d86;
    #L030d5e.  int_v3:= int_v7 - int_v0  @kind int;
    #L030d62.  call int_temp:=  `java.lang.Math.min`(int_v3, int_v1) @signature `Ljava/lang/Math;.min:(II)I` @classDescriptor ^`java.lang.Math` @kind static;
    #L030d68.  int_v3:= int_temp;
    #L030d6a.  int_v4:= int_v6 + int_v0  @kind int;
    #L030d6e.  call char_arr1_temp:=  `biz.source_code.base64Coder.Base64Coder.encode`(byte_arr1_v5, int_v4, int_v3) @signature `Lbiz/source_code/base64Coder/Base64Coder;.encode:([BII)[C` @classDescriptor ^`biz.source_code.base64Coder.Base64Coder` @kind static;
    #L030d74.  char_arr1_v4:= char_arr1_temp  @kind object;
    #L030d76.  call StringBuilder_temp:=  `java.lang.StringBuilder.append`(StringBuilder_v2, char_arr1_v4) @signature `Ljava/lang/StringBuilder;.append:([C)Ljava/lang/StringBuilder;` @classDescriptor ^`java.lang.StringBuilder` @kind virtual;
    #L030d7c.  call StringBuilder_temp:=  `java.lang.StringBuilder.append`(StringBuilder_v2, String_v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @classDescriptor ^`java.lang.StringBuilder` @kind virtual;
    #L030d82.  int_v0:= int_v0 + int_v3  @kind int;
    #L030d84.  goto L030d5a;
    #L030d86.  call String_temp:=  `java.lang.StringBuilder.toString`(StringBuilder_v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @classDescriptor ^`java.lang.StringBuilder` @kind virtual;
    #L030d8c.  String_v0:= String_temp  @kind object;
    #L030d8e.  return String_v0  @kind object;
}
procedure `java.lang.String` `biz.source_code.base64Coder.Base64Coder.encodeString`(`java.lang.String` String_v2 @kind object) @owner ^`biz.source_code.base64Coder.Base64Coder` @signature `Lbiz/source_code/base64Coder/Base64Coder;.encodeString:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    `byte`[] byte_arr1_v1;
    `byte`[] byte_arr1_temp;
    `char`[] char_arr1_v1;
    `char`[] char_arr1_temp;
    `java.lang.String` String_v0;

    #L030da0.  String_v0:= new `java.lang.String`;
    #L030da4.  call byte_arr1_temp:=  `java.lang.String.getBytes`(String_v2) @signature `Ljava/lang/String;.getBytes:()[B` @classDescriptor ^`java.lang.String` @kind virtual;
    #L030daa.  byte_arr1_v1:= byte_arr1_temp  @kind object;
    #L030dac.  call char_arr1_temp:=  `biz.source_code.base64Coder.Base64Coder.encode`(byte_arr1_v1) @signature `Lbiz/source_code/base64Coder/Base64Coder;.encode:([B)[C` @classDescriptor ^`biz.source_code.base64Coder.Base64Coder` @kind static;
    #L030db2.  char_arr1_v1:= char_arr1_temp  @kind object;
    #L030db4.  call `java.lang.String.<init>`(String_v0, char_arr1_v1) @signature `Ljava/lang/String;.<init>:([C)V` @classDescriptor ^`java.lang.String` @kind direct;
    #L030dba.  return String_v0  @kind object;
}
