record `com.bugsense.trace.CryptoHttpClient` @kind class @AccessFlag PUBLIC extends `org.apache.http.impl.client.DefaultHttpClient` @kind class {
  `int` `com.bugsense.trace.CryptoHttpClient.KEY` @AccessFlag ;
}
global `int` `@@com.bugsense.trace.CryptoHttpClient.ANALYTICS` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.lang.String` `@@com.bugsense.trace.CryptoHttpClient.BASE64KEYANALYTICS` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@com.bugsense.trace.CryptoHttpClient.BASE64KEYERRORS` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.bugsense.trace.CryptoHttpClient.ERRORS` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `com.bugsense.trace.CryptoHttpClient.<init>`(`com.bugsense.trace.CryptoHttpClient` v1 @kind this, `int` v2 ) @owner ^`com.bugsense.trace.CryptoHttpClient` @signature `Lcom/bugsense/trace/CryptoHttpClient;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `org.apache.http.conn.ssl.SSLSocketFactory` `com.bugsense.trace.CryptoHttpClient.newSslSocketFactory`(`com.bugsense.trace.CryptoHttpClient` v4 @kind this) @owner ^`com.bugsense.trace.CryptoHttpClient` @signature `Lcom/bugsense/trace/CryptoHttpClient;.newSslSocketFactory:()Lorg/apache/http/conn/ssl/SSLSocketFactory;` @AccessFlag PRIVATE {

  # return;
}
procedure `org.apache.http.conn.ClientConnectionManager` `com.bugsense.trace.CryptoHttpClient.createClientConnectionManager`(`com.bugsense.trace.CryptoHttpClient` v5 @kind this) @owner ^`com.bugsense.trace.CryptoHttpClient` @signature `Lcom/bugsense/trace/CryptoHttpClient;.createClientConnectionManager:()Lorg/apache/http/conn/ClientConnectionManager;` @AccessFlag PROTECTED {

  # return;
}
